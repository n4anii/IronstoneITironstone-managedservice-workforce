<#

.SYNOPSIS


.DESCRIPTION


.NOTES
    * In Intune, remember to set "Run this script using the logged in credentials"  according to the $DeviceContext variable.
        * Intune -> Device Configuration -> PowerShell Scripts -> $NameScriptFull -> Properties -> "Run this script using the logged in credentials"
        * DEVICE (Local System) or USER (Logged in user).
    * Only edit $NameScript and add your code in the #region Your Code Here.
    * You might want to touch "Settings - PowerShell - Output Preferences" for testing / development. 
        * $VerbosePreference, eventually $DebugPreference, to 'Continue' will print much more details.

#>


# Script Variables
[bool]   $DeviceContext = $true
[string] $NameScript    = 'Install-IronTrigger'

# Settings - PowerShell - Output Preferences
$DebugPreference       = 'SilentlyContinue'
$InformationPreference = 'SilentlyContinue'
$VerbosePreference     = 'Continue'
$WarningPreference     = 'Continue'



#region    Don't Touch This
# Settings - PowerShell - Interaction
$ConfirmPreference     = 'None'
$ProgressPreference    = 'SilentlyContinue'

# Settings - PowerShell - Behaviour
$ErrorActionPreference = 'Continue'

# Dynamic Process Variables
[string] $NameScriptFull      = ('{0}_{1}' -f ($(if($DeviceContext){'Device'}Else{'User'}),$NameScript))
[string] $NameScriptVerb      = $NameScript.Split('-')[0]
[string] $NameScriptNoun      = $NameScript.Split('-')[-1]
[string] $ProcessArchitecture = $(if([System.Environment]::Is64BitProcess){'64'}Else{'32'})
[string] $OSArchitecture      = $(if([System.Environment]::Is64BitOperatingSystem){'64'}Else{'32'})

# Dynamic Logging Variables
$Timestamp    = [DateTime]::Now.ToString('yyMMdd-HHmmssffff')
$PathDirLog   = ('{0}\IronstoneIT\Intune\DeviceConfiguration\' -f ($(if($DeviceContext){$env:ProgramW6432}else{$env:APPDATA})))
$PathFileLog  = ('{0}{1}-{2}bit-{3}.txt' -f ($PathDirLog,$NameScriptFull,$ProcessArchitecture,$Timestamp))

# Start Transcript
if (-not(Test-Path -Path $PathDirLog)) {New-Item -ItemType 'Directory' -Path $PathDirLog -ErrorAction 'Stop'}
Start-Transcript -Path $PathFileLog


# Wrap in Try/Catch, so we can always end the transcript
Try {
    ### USER
    # Get variables
    [string] $StrUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
    [string] $StrIsAdmin  = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    # Output User Info
    Write-Output -InputObject ('Running as user "{0}". Has admin privileges? {1}. $DeviceContext = {2}' -f ($StrUserName,$StrIsAdmin,$DeviceContext.ToString()))

    # Check that you are running script correctly according to $DeviceContext and Intune Settings
    if     ($DeviceContext -and $StrUserName -ne 'NT AUTHORITY\SYSTEM')      {Write-Output -InputObject ('Not running as "NT AUTHORITY\SYSTEM". Exit.');Break}
    elseif (-not($DeviceContext) -and $StrUserName -eq 'NT AUTHORITY\SYSTEM'){Write-Output -InputObject ('Not running as logged in user. Exit.');Break}
    

    
    ### POWERSHELL
    # Output Process and OS Architecture Info
    Write-Output -InputObject ('PowerShell is running as a {0} bit process on a {1} bit OS.' -f ($ProcessArchitecture,$OSArchitecture))
    

    # If OS is 64 bit, and PowerShell got launched as x86, relaunch as x64
    if ( (-not([System.Environment]::Is64BitProcess))  -and [System.Environment]::Is64BitOperatingSystem) {
        write-Output -InputObject (' * Will restart this PowerShell session as x64.')
        if ($myInvocation.Line) {
            &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile $myInvocation.Line
        }
        else {
            &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile -File ('{0}' -f ($myInvocation.InvocationName)) $args
        }
        exit $lastexitcode
    }
    
    # End the Initialize Region
    Write-Output -InputObject ('**********************')
#endregion Don't Touch This




################################################
#region    Your Code Here
################################################


#region    Variables
    # Settings
    [bool]   $Script:ReadOnly           = $false

    # Script specific variables
    [string] $Script:NameApp            = 'IronTrigger'
    [string] $Script:NameScheduledTask  = $Script:NameApp
    [string] $Script:PathDirInstall     = ('{0}\IronstoneIT\{1}\' -f ($env:ProgramW6432,$Script:NameApp))

    # Files
    #region Files
        # Enable-BitLockerTrigger.PS1
        #region FilePS1
        [string] $Script:NameFilePS1    = 'Enable_BitLocker.ps1'
        [string] $Script:ContentFilePS1 = ('PCNQU1NjcmlwdEluZm8gCi5WRVJTSU9OIDEuNwouR1VJRCBmNTE4N2UzZi1lZDBhLTRjZTEtYjQzOC1kOGY0MjE2MTljYTMgCi5PUklHSU5BTCBBVVRIT1IgSmFuIFZhbiBNZWlydmVubmUgCi5NT0RJRklFRCBCWSBPbGF2IFIuIEJpcmtlbGFuZCwgU29vcmFqIFJhamFnb3BhbGFuLCBQYXVsIEh1aWpicmVndHMsIFBpZXRlciBXaWdsZXZlbiAmIE5pYWxsIEJyYWR5ICh3aW5kb3dzLW5vb2IuY29tIDIwMTcvOC8xNykKLkNPUFlSSUdIVCAKLlRBR1MgQXp1cmUgSW50dW5lIEJpdExvY2tlciAgCi5MSUNFTlNFVVJJICAKLlBST0pFQ1RVUkkgIAouSUNPTlVSSSAgCi5FWFRFUk5BTE1PRFVMRURFUEVOREVOQ0lFUyAgCi5SRVFVSVJFRFNDUklQVFMgIAouRVhURVJOQUxTQ1JJUFRERVBFTkRFTkNJRVMgIAouUkVMRUFTRU5PVEVTCi5UT0RPIAojPgoKPCMgCiAKLkRFU0NSSVBUSU9OIAogQ2hlY2sgd2hldGhlciBCaXRMb2NrZXIgaXMgRW5hYmxlZCwgaWYgbm90IEVuYWJsZSBCaXRMb2NrZXIgb24gQUFEIEpvaW5lZCBkZXZpY2VzIGFuZCBzdG9yZSByZWNvdmVyeSBpbmZvIGluIEFBRCAKIEFkZGVkIGxvZ2dpbmcKIz4gCgpbY21kbGV0YmluZGluZygpXQpwYXJhbSgKICAgIFtQYXJhbWV0ZXIoKV0KICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICBbc3RyaW5nXSAkT1NEcml2ZSA9ICRlbnY6U3lzdGVtRHJpdmUKKQpbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW05ldC5TZWN1cml0eVByb3RvY29sVHlwZV06OlRsczEyCgoKCiNyZWdpb24gU2V0dGluZ3MgYW5kIFZhcmlhYmxlcwojIyMgU2V0dGluZ3MKICAgICMgSWYgb24sIHdpbGwgcHJvbXB0IHVzZXIgdG8gcmVib290IHdpdGggV2luZG93cyBGb3JtcyBHVUkuCiAgICBbYm9vbF0gJEdVSSA9ICRmYWxzZQogICAgIyBJZiBvbiwgd2lsbCByZW1vdmUgYWxsIGZpbGVzIGFmdGVyIGZpcnN0IHN1Y2Nlc3MuCiAgICBbYm9vbF0gJFNjcmlwdDpCb29sUmVtb3ZlRmlsZXNBZnRlclN1Y2Nlc3MgPSAkZmFsc2UKICAgICMgSWYgb2ZmLCB3aWxsIGNoYW5nZSBzY2hlZHVsZWQgdGFzayB0byBydW4gb25jZSBhIGRheSBhdCAxMjowMCBhZnRlciBmaXJzdCBzdWNjZXNzZnVsbCBydW4sIG9yIGFmdGVyIDMwIGZhaWxlZCBydW5zCiAgICAjIElmIG9uLCB3aWxsIGRlbGV0ZSBzY2hlZHVsZWQgdGFzayBhZnRlciBmaXJzdCBzdWNjZXNzZnVsbCBydW4gYW5kIGFmdGVyIDMwIGZhaWxlZCBydW5zCiAgICBbYm9vbF0gJFNjcmlwdDpCb29sUmVtb3ZlU2NoZWR1bGVkVGFza0FmdGVyRmlyc3RTdWNjZXNzID0gJGZhbHNlCiMjIyBWYXJpYWJsZXMKICAgIFtzdHJpbmddICRTY3JpcHQ6TmFtZVNjcmlwdCAgICAgICAgID0gJ0lyb25UcmlnZ2VyJwogICAgW3N0cmluZ10gJFNjcmlwdDpTY2hlZHVsZWRUYXNrTmFtZSA9ICRTY3JpcHQ6TmFtZVNjcmlwdC5DbG9uZSgpCiAgICBbc3RyaW5nXSAkU2NyaXB0OkRpckluc3RhbGwgICAgICAgID0gKCd7MH1cUHJvZ3JhbSBGaWxlc1xJcm9uc3RvbmVJVFx7MX1cJyAtZiAoJGVudjpTeXN0ZW1Ecml2ZSwkU2NyaXB0Ok5hbWVTY3JpcHQpKQogICAgW3N0cmluZ10gJFNjcmlwdDpEaXJMb2cgICAgICAgICAgICA9ICgnezB9XFByb2dyYW0gRmlsZXNcSXJvbnN0b25lSVRcSW50dW5lXERldmljZUNvbmZpZ3VyYXRpb25cJyAtZiAoJGVudjpTeXN0ZW1Ecml2ZSkpCiAgICBbc3RyaW5nXSAkU2NyaXB0OkZpbGVMb2cgICAgICAgICAgID0gKCd7MH1Jcm9uVHJpZ2dlciAtIEVuYWJsZUJpdExvY2tlci5sb2cnIC1mICgkU2NyaXB0OkRpckxvZykpCiAgICBbc3RyaW5nXSAkU2NyaXB0OkZpbGVTdGF0cyAgICAgICAgID0gKCd7MH1zdGF0cy50eHQnIC1mICgkU2NyaXB0OkRpckluc3RhbGwpKQojIEhlbHAgVmFyaWFibGVzIChET04nVCBDSEFOR0UpCiAgICBbc3RyaW5nXSAkU2NyaXB0OkNvbXB1dGVyTmFtZSAgICAgID0gJGVudjpDT01QVVRFUk5BTUUKICAgIFtib29sXSAgICRTY3JpcHQ6Qm9vbERpZEFueXRoaW5nQ2hhbmdlVGhpc1J1bnRpbWUgPSAkZmFsc2UKICAgIFtTdHJpbmdbXV0gJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXMgPSBAKCdGdWxseURlY3J5cHRlZCcsJ0VuY3J5cHRpb25JblByb2dyZXNzJywnRnVsbHlFbmNyeXB0ZWQnKQojZW5kcmVnaW9uIFNldHRpbmdzIGFuZCBWYXJpYWJsZXMKCgoKI3JlZ2lvbiBGdW5jdGlvbnMKICAgICNyZWdpb24gTG9nZ2luZyBhbmQgT3V0cHV0CiAgICAgICAgI3JlZ2lvbiBMb2dXcml0ZQogICAgICAgIEZ1bmN0aW9uIExvZ1dyaXRlIHsKICAgICAgICAgICAgUGFyYW0gKFtzdHJpbmddJExvZ1N0cmluZykKICAgICAgICAgICAgW3N0cmluZ10gJGEgPSBHZXQtRGF0ZQogICAgICAgICAgICBbc3RyaW5nXSAkTG9nU3RyaW5nID0gJGEsICRMb2dTdHJpbmcKICAgICAgICAgICAgQWRkLWNvbnRlbnQgLVBhdGggJFNjcmlwdDpGaWxlTG9nIC1WYWx1ZSAkTG9nU3RyaW5nCiAgICAgICAgICAgIFdyaXRlLUhvc3QgJExvZ1N0cmluZwogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIExvZ1dyaXRlCgogICAgICAgICNyZWdpb24gTG9nRXJyb3JzCiAgICAgICAgRnVuY3Rpb24gTG9nRXJyb3JzIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdDYXVnaHQgYW4gZXhjZXB0aW9uOicpCiAgICAgICAgICAgIExvZ1dyaXRlICgnRXhjZXB0aW9uIFR5cGU6ICcgKyAkKCRfLkV4Y2VwdGlvbi5HZXRUeXBlKCkuRnVsbE5hbWUpKQogICAgICAgICAgICBMb2dXcml0ZSAoJ0V4Y2VwdGlvbiBNZXNzYWdlOiAnICsgJCgkXy5FeGNlcHRpb24uTWVzc2FnZSkpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gTG9nRXJyb3JzCgoKICAgICAgICAjcmVnaW9uIFdyaXRlLVN0YXRzCiAgICAgICAgIyBXcml0ZS1TdGF0czogT3V0cHV0cyBjdXJyZW50IHN0YXR1cyBvZiB2YXJpb3VzIGJvb2xlYW5zIGFuZCBvdGhlciBtZWFzdXJlbWVudHMKICAgICAgICBGdW5jdGlvbiBXcml0ZS1TdGF0cyB7ICAgIAogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtwYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldCiAgICAgICAgICAgICAgICBbYm9vbF0gJFByZXZpb3VzT25seSA9ICRmYWxzZQogICAgICAgICAgICApCiAgICAgICAgICAgICMgR2VuZXJhbAogICAgICAgICAgICBpZiAoJFByZXZpb3VzT25seSkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdSdW5zOiB7MH0gfCBIYXMgSXJvblRyaWdnZXIgaGFkIGEgc3VjY2Vzc2Z1bGwgcnVuIGFscmVhZHk/IHsxfScgLWYgKCRTY3JpcHQ6Q291bnRSdW5zLCRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIE9TIERyaXZlCiAgICAgICAgICAgIExvZ1dyaXRlICgnT1MgZHJpdmUgKHswfSkgfCBFbmNyeXB0ZWQ6IHsxfSB8IFJlY292ZXJ5IFBhc3N3b3JkcyBwcmVzZW50OiB7Mn0gfCBCYWNrdXAgdG8gT25lRHJpdmU6IHszfSB8IEJhY2t1cCB0byBBenVyZUFEOiB7NH0nIC1mICgkT1NEcml2ZSwkU2NyaXB0OklzRW5jcnlwdGVkLCRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3csJFNjcmlwdDpJc0JhY2t1cE9ELCRTY3JpcHQ6SXNCYWNrdXBBQUQpKQogICAgICAgICAgICBpZiAoLW5vdCgkUHJldmlvdXNPbmx5KSkgewogICAgICAgICAgICAgICAgTG9nd3JpdGUgKCdPUyBkcml2ZSAoezB9KSB8IFZvbHVtZVN0YXR1czogezF9IHwgUHJvdGVjdGlvblN0YXR1czogezJ9JyAtZiAoJE9TRHJpdmUsJFNjcmlwdDpWb2x1bWVFbmNTdGF0dXMsJFNjcmlwdDpWb2x1bWVQcm90ZWN0aW9uU3RhdHVzKSkgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXKSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBkcml2ZSAoezB9KSB8IFByZXNlbmNlIG9mIEJpdExvY2tlciBLZXlQcm90ZWN0b3IgfCBUUE06IHsxfSB8IFJlY292ZXJ5UGFzc3dvcmQ6IHsyfScgLWYgKCRPU0RyaXZlLCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0sJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSkpCiAgICAgICAgICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Vm9sdW1lRW5jU3RhdHVzWzFdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnT1MgZHJpdmUgKHswfSkgfCB7MX0nIC1mICgkT1NEcml2ZSwoV3JpdGUtUmVjb3ZlcnlQYXNzd29yZCkpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIE90aGVyIGZpeGVkIGRyaXZlcyB3aXRoIGEgZHJpdmUgbGV0dGVyCiAgICAgICAgICAgICAgICA8IyAjVE9ETwogICAgICAgICAgICAgICAgaWYgKCRTY3JpcHQ6T3RoZXJFbmNyeXB0ZWREcml2ZXMpIHsKICAgICAgICAgICAgICAgICAgICAkU2NyaXB0Ok90aGVyRW5jcnlwdGVkRHJpdmVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkU2NyaXB0Ok90aGVyRW5jcnlwdGVkRHJpdmVzWzBdKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpEcml2ZVZvbHVtZVN0YXR1cyA9IChHZXQtVmFyaWFibGUgLU5hbWUgKCdWb2x1bWV7MH1FbmNTdGF0dXMnIC1mICRfKSAtU2NvcGUgJ1NjcmlwdCcpLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6RHJpdmVQcm90ZWN0aW9uU3RhdHVzID0gKEdldC1WYXJpYWJsZSAtTmFtZSAoJ1ZvbHVtZXswfVByb3RlY3Rpb25TdGF0dXMnIC1mICRfKSAtU2NvcGUgJ1NjcmlwdCcpLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2d3cml0ZSAoJ1N0YXR1cyBkcml2ZSAiezB9IiB8IFZvbHVtZVN0YXR1czogezF9IHwgUHJvdGVjdGlvblN0YXR1czogezJ9JyAtZiAoJF8sJExvY2FsOkRyaXZlVm9sdW1lU3RhdHVzLCRMb2NhbDpEcml2ZVByb3RlY3Rpb25TdGF0dXMpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Jvb2xbXV0gJExvY2FsOktleVByb3RlY3RvclR5cGVzID0gR2V0LUJpdExvY2tlcktleVByb3RlY3RvclR5cGVzIC1Ecml2ZUxldHRlciAkXwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdCaXRMb2NrZXIgS2V5UHJvdGVjdG9yIFR5cGVzIHByZXNlbnQgZm9yIGRyaXZlICJ7MH0iPyB8IFRQTTogezF9IHwgUmVjb3ZlcnlQYXNzd29yZDogezJ9JyAtZiAoJF8sJExvY2FsOktleVByb3RlY3RvclR5cGVzWzBdLCRMb2NhbDpLZXlQcm90ZWN0b3JUeXBlc1sxXSkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9Iz4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIFdyaXRlLVN0YXRzCgoKICAgICAgICAjcmVnaW9uIFdyaXRlLVJlY292ZXJ5UGFzc3dvcmQKICAgICAgICAjIFdyaXRlLVJlY292ZXJ5UGFzc3dvcmQKICAgICAgICBGdW5jdGlvbiBXcml0ZS1SZWNvdmVyeVBhc3N3b3JkIHsKICAgICAgICAgICAgW2J5dGVdICRMb2NhbDpDID0gJChJZigkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMpeyRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3Jkc31FbHNlezB9KQogICAgICAgICAgICBSZXR1cm4gKFtzdHJpbmddICgnezB9IFJlY292ZXJ5IFBhc3N3b3JkKHMpIHByZXNlbnQuezF9JyAtZiAoJExvY2FsOkMsKCQoSWYoJExvY2FsOkMgLWdlIDEpeyd7MH17MX0nIC1mICgiYHJgbiIsKEdldC1TdHJpbmdSZWNvdmVyeVBhc3N3b3JkcykpfSkpKSkpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gV3JpdGUtUmVjb3ZlcnlQYXNzd29yZAoKCiAgICAgICAgI3JlZ2lvbiBHZXQtU3RyaW5nUmVjb3ZlcnlQYXNzd29yZHMKICAgICAgICAjIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgcmVjb3ZlcnkgcGFzc3dvcmRzIGZyb20gJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzLiBVc2VmdWxsIGZvciBwcmludGluZy8gbG9nZ2luZy8gYmFja3VwCiAgICAgICAgRnVuY3Rpb24gR2V0LVN0cmluZ1JlY292ZXJ5UGFzc3dvcmRzIHsKICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyID0gJE9TRHJpdmUKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBDcmVhdGUgdmFyaWFibGUgbmFtZXMKICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOkFyck5hbWUgPSAnQXJyYXlSZWNvdmVyeVBhc3N3b3JkcycKICAgICAgICAgICAgaWYgKCREcml2ZUxldHRlci5TdWJzdHJpbmcoMCwxKSAtbmUgJGVudjpTeXN0ZW1Ecml2ZS5TdWJzdHJpbmcoMCwxKSkgewogICAgICAgICAgICAgICAgJExvY2FsOkFyck5hbWUgPSAoJ3swfXsxfScgLWYgKCREcml2ZUxldHRlci5TdWJzdHJpbmcoMCwxKSwkTG9jYWw6QXJyTmFtZSkpCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAjIEdldCBBcnJheSwgbG9vcCBpdC4gSWRlYWxseSBvbmx5IG9uZSBwdywgYnV0IGxvb3AganVzdCB0byBiZSBzYWZlLgogICAgICAgICAgICBbdWludDE2XSAkTG9jYWw6VGVtcENvdW50ZXIgPSAwCiAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpPdXRTdHIgPSBbc3RyaW5nXTo6RW1wdHkKICAgICAgICAgICAgKEdldC1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6QXJyTmFtZSAtU2NvcGUgJ1NjcmlwdCcpLlZhbHVlIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAoJ3swfSB8IEtleVByb3RlY3RvcklkICJ7MX0iIHwgUmVjb3ZlcnlQYXNzd29yZCAiezJ9IicgLWYgKCgkTG9jYWw6VGVtcENvdW50ZXIgKz0gMSksJF8uS2V5UHJvdGVjdG9ySWQsJF8uUmVjb3ZlcnlQYXNzd29yZCkpCiAgICAgICAgICAgICAgICBpZiAoJExvY2FsOlRlbXBDb3VudGVyIC1sdCAoKEdldC1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6QXJyTmFtZSAtU2NvcGUgJ1NjcmlwdCcpLlZhbHVlKS5Db3VudCkgeyRMb2NhbDpPdXRTdHIgKz0gImByYG4ifQogICAgICAgICAgICB9CgogICAgICAgICAgICAjIFJldHVybiB0aGUgc3RyaW5nCiAgICAgICAgICAgIFJldHVybiAkTG9jYWw6T3V0U3RyCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gR2V0LVN0cmluZ1JlY292ZXJ5UGFzc3dvcmRzCiAgICAjZW5kcmVnaW9uIExvZ2dpbmcgYW5kIE91dHB1dAoKCgogICAgI3JlZ2lvbiBSZXR1cm4gVmFsdWVzIChVc2VkIGJ5IG90aGVyIEZ1bmN0aW9ucykKICAgICAgICAjcmVnaW9uIEdldC1CaXRMb2NrZXJLZXlQcm90ZWN0b3JUeXBlcwogICAgICAgICMgUmV0dXJucyBhIGJvb2wgYXJyYXksIHdoZXJlIHRoZSBmaXJzdCByZXByZXNlbnRzIHN0YXR1cyBvZiBUUE0gcHJlc2VuY2UsIGFuZCB0aGUgc2Vjb25kIGZvciBQcm90ZWN0aW9uIFBhc3N3b3JkCiAgICAgICAgRnVuY3Rpb24gR2V0LUJvb2xEcml2ZUhhc0JpdExvY2tlclRQTWFuZFBXIHsKICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyID0gJE9TRHJpdmUKICAgICAgICAgICAgKQogICAgICAgICAgICAkTG9jYWw6Qml0TG9ja2VyU3RhdHVzID0gR2V0LUJpdExvY2tlclZvbHVtZSAtTW91bnRQb2ludCAkRHJpdmVMZXR0ZXIKICAgICAgICAgICAgW3VpbnQxNl0gJExvY2FsOkNvdW50UmVjUGFzcyA9IDAKICAgICAgICAgICAgW3VpbnQxNl0gJExvY2FsOkNvdW50VFBNID0gMAogICAgICAgICAgICAkTG9jYWw6Qml0TG9ja2VyU3RhdHVzLktleVByb3RlY3RvciB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkXy5LZXlQcm90ZWN0b3JUeXBlIC1lcSAnUmVjb3ZlcnlQYXNzd29yZCcpIHskTG9jYWw6Q291bnRSZWNQYXNzICs9IDF9CiAgICAgICAgICAgICAgICBlbHNlaWYgKCRfLktleVByb3RlY3RvclR5cGUgLWVxICdUUE0nKSB7JExvY2FsOkNvdW50VFBNICs9IDF9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIChbYm9vbF0gKCRMb2NhbDpDb3VudFRQTSAtZ2UgMSksW2Jvb2xdICgkTG9jYWw6Q291bnRSZWNQYXNzIC1nZSAxKSkKICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbkdldC1CaXRMb2NrZXJLZXlQcm90ZWN0b3JUeXBlcwoKCiAgICAgICAgI3JlZ2lvbiBHZXQtQXJyYXlSZWNvdmVyeVBhc3N3b3JkcwogICAgICAgICMgUmV0dXJucyBhIEFycmF5TGlzdCB3aXRoIGV4aXN0aW5nIFByb3RlY3Rpb25QYXNzd29yZHMKICAgICAgICBGdW5jdGlvbiBHZXQtQXJyYXlSZWNvdmVyeVBhc3N3b3JkcyB7CiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgICAgICAgICAgW01pY3Jvc29mdC5CaXRMb2NrZXIuU3RydWN0dXJlcy5CaXRMb2NrZXJWb2x1bWVdICRCaXRMb2NrZXJWb2x1bWUKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHZXQgQml0TG9ja2VyIFByb3RlY3Rpb25QYXNzd29yZHMKICAgICAgICAgICAgJExvY2FsOktleVByb3RlY3RvclN0YXR1cyA9ICgkQml0TG9ja2VyVm9sdW1lIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgS2V5UHJvdGVjdG9yKS5LZXlQcm90ZWN0b3IKICAgICAgICAgICAgJExvY2FsOkFycmF5UmVjb3ZlcnlQYXNzd29yZHMgPSBOZXctT2JqZWN0IE1pY3Jvc29mdC5CaXRMb2NrZXIuU3RydWN0dXJlcy5CaXRMb2NrZXJWb2x1bWVLZXlQcm90ZWN0b3JbXSAoJExvY2FsOktleVByb3RlY3RvclN0YXR1cy5Db3VudCAtIDEpCgogICAgICAgICAgICAkTG9jYWw6SW5kZXhDb3VudCA9IFtieXRlXTo6TWluVmFsdWUKICAgICAgICAgICAgJExvY2FsOktleVByb3RlY3RvclN0YXR1cyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkXy5LZXlQcm90ZWN0b3JUeXBlIC1lcSAnUmVjb3ZlcnlQYXNzd29yZCcpIHsKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9ICRMb2NhbDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzWyRMb2NhbDpJbmRleENvdW50KytdID0gJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gKCRMb2NhbDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzKQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIEdldC1BcnJheVJlY292ZXJ5UGFzc3dvcmRzCgoKICAgICAgICAjcmVnaW9uIEdldC1Wb2x1bWVVbmlxdWVJRAogICAgICAgIEZ1bmN0aW9uIEdldC1Wb2x1bWVVbmlxdWVJRCB7CiAgICAgICAgICAgIHBhcmFtKAogICAgICAgICAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyCiAgICAgICAgICAgICkKICAgICAgICAgICAgJExvY2FsOkFEcml2ZUxldHRlciA9ICREcml2ZUxldHRlci5TdWJzdHJpbmcoMCwxKQogICAgICAgICAgICAkTG9jYWw6Vm9sdW1lSUQgPSAoR2V0LVZvbHVtZSAtRHJpdmVMZXR0ZXIgJEFEcml2ZUxldHRlciB8IFNlbGVjdCAqKS5VbmlxdWVJRC5TcGxpdCgneycpWy0xXQogICAgICAgICAgICAkTG9jYWw6Vm9sdW1lSUQgPSAkTG9jYWw6Vm9sdW1lSUQuU3ViU3RyaW5nKDAsKCRMb2NhbDpWb2x1bWVJRC5MZW5ndGggLSAyKSkKCiAgICAgICAgICAgIHJldHVybiAkTG9jYWw6Vm9sdW1lSUQKICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBHZXQtVm9sdW1lVW5pcXVlSUQKCgogICAgICAgICNyZWdpb24gQ2hlY2stSWZCaXRMb2NrZXJQV0hhc0NoYW5nZWQKICAgICAgICBGdW5jdGlvbiBDaGVjay1JZkJpdExvY2tlclBXSGFzQ2hhbmdlZHsKICAgICAgICAgICAgcGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyID0gJE9TRHJpdmUKICAgICAgICAgICAgKQogICAgICAgICAgICBbYm9vbF0gJExvY2FsOkhhc0NoYW5nZWQgPSAkZmFsc2UKCgogICAgICAgICAgICAjIE5hbWUgVmFyaWFibGVzCiAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpOYW1lQXJyYXkgPSAnQXJyYXlSZWNvdmVyeVBhc3N3b3JkcycKICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOk5hbWVGaWxlICA9ICgnezB9LnR4dCcgLWYgKCRWb2x1bWVVbmlxdWVJRCkpCiAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpWb2x1bWVJRCA9ICRTY3JpcHQ6Vm9sdW1lVW5pcXVlSUQKICAgICAgICAgICAgaWYgKCREcml2ZUxldHRlci5TdWJzdHJpbmcoMCwxKSAtbmUgJGVudjpTeXN0ZW1Ecml2ZS5TdWJzdHJpbmcoMCwxKSkgewogICAgICAgICAgICAgICAgJExvY2FsOk5hbWVBcnJheSA9ICd7MH17MX0nIC0gKCRMb2NhbDpWb2x1bWVMZXR0ZXIsJExvY2FsOk5hbWVBcnJheSkKICAgICAgICAgICAgICAgICRMb2NhbDpWb2x1bWVJRCA9IEdldC1Wb2x1bWVVbmlxdWVJRCAtRHJpdmVMZXR0ZXIgJERyaXZlTGV0dGVyCiAgICAgICAgICAgIH0KICAgICAgICAgICAKCiAgICAgICAgICAgICMgR2V0IFZhcmlhYmxlcwogICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6UGF0aERpciA9ICgnezB9ezF9JyAtZiAoJFNjcmlwdDpEaXJJbnN0YWxsLCdCYWNrdXBLZXlzXCcpKQogICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6UGF0aEZpbGUgPSAoJ3swfXsxfScgLWYgKCRMb2NhbDpQYXRoRGlyLCRMb2NhbDpOYW1lRmlsZSkpCiAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpOb3dLZXlQcm90ZWN0b3JJRCA9ICgoR2V0LVZhcmlhYmxlIC1OYW1lICRMb2NhbDpOYW1lQXJyYXkgLVNjb3BlICdTY3JpcHQnKS5WYWx1ZSkuS2V5UHJvdGVjdG9ySUQKICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOk5vd1JlY292ZXJ5UGFzc3dvcmQgPSAoKEdldC1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6TmFtZUFycmF5IC1TY29wZSAnU2NyaXB0JykuVmFsdWUpLlJlY292ZXJ5UGFzc3dvcmQKCgogICAgICAgICAgICAjIEdldCBzdGF0cwogICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpQYXRoRmlsZSkpIHsKICAgICAgICAgICAgICAgIGlmICgtbm90KFRlc3QtUGF0aCAtUGF0aCAkTG9jYWw6UGF0aERpciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSkpIHsKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IE5ldy1JdGVtIC1QYXRoICRMb2NhbDpQYXRoRGlyIC1JdGVtVHlwZSBEaXJlY3RvcnkgLUZvcmNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBbc3RyaW5nW11dICRMb2NhbDpJbnB1dFN0cmluZyA9IChHZXQtQ29udGVudCAtUGF0aCAkTG9jYWw6UGF0aEZpbGUpLlNwbGl0KFtFbnZpcm9ubWVudF06Ok5ld0xpbmUpCiAgICAgICAgICAgICAgICBpZiAoJD8gLWFuZCAkTG9jYWw6SW5wdXRTdHJpbmcuTGVuZ3RoIC1nZSA3KSB7CiAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOlByZXZLZXlQcm90ZWN0b3JJRCA9ICRMb2NhbDpJbnB1dFN0cmluZ1s1XS5UcmltKCkKICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6UHJldlJlY292ZXJ5UGFzc3dvcmQgPSAkTG9jYWw6SW5wdXRTdHJpbmdbN10uVHJpbSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHskTG9jYWw6SGFzQ2hhbmdlZCA9ICR0cnVlfQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBDaGVjayBpZiBjaGFuZ2VkCiAgICAgICAgICAgIGlmICgkTG9jYWw6UHJldktleVByb3RlY3RvcklEKSB7CiAgICAgICAgICAgICAgICBpZiAoJExvY2FsOlByZXZLZXlQcm90ZWN0b3JJRCAtbmUgJExvY2FsOk5vd0tleVByb3RlY3RvcklEKSB7JExvY2FsOkhhc0NoYW5nZWQgPSAkdHJ1ZX0KICAgICAgICAgICAgICAgIGlmICgkTG9jYWw6UHJldlJlY292ZXJ5UGFzc3dvcmQgLW5lICRMb2NhbDpOb3dSZWNvdmVyeVBhc3N3b3JkKSB7JExvY2FsOkhhc0NoYW5nZWQgPSAkdHJ1ZX0KICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICMgV3JpdGUgbmV3IHZhbHVlcyBpZiBjaGFuZ2VkIG9yIGRvZXMgbm90IGV4aXN0CiAgICAgICAgICAgIGlmICgkTG9jYWw6SGFzQ2hhbmdlZCAtb3IgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkTG9jYWw6UGF0aEZpbGUpKSkgewogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciA9IFtzdHJpbmddOjpFbXB0eQogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnRHJpdmUvVm9sdW1lIExldHRlciAoTm90IFVuaXF1ZSBpZGVudGlmaWVyKTp7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnezB9ezF9JyAtZiAkRHJpdmVMZXR0ZXIsImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICdWb2x1bWUgVW5pcXVlSUQgKE5hbWUgb2YgdGhpcyBmaWxlKTp7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnezB9ezF9JyAtZiAkTG9jYWw6Vm9sdW1lSUQsImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICdLZXlQcm90ZWN0b3JJRDp7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnezB9ezF9JyAtZiAkTG9jYWw6Tm93S2V5UHJvdGVjdG9ySUQsImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICdSZWNvdmVyeSBQYXNzd29yZDp7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnezB9ezF9JyAtZiAkTG9jYWw6Tm93UmVjb3ZlcnlQYXNzd29yZCwiYHJgbiIKICAgICAgICAgICAgICAgIE91dC1GaWxlIC1GaWxlUGF0aCAkTG9jYWw6UGF0aEZpbGUgLUVuY29kaW5nIHV0ZjggLUZvcmNlIC1JbnB1dE9iamVjdCAoJExvY2FsOk91dFN0cikKICAgICAgICAgICAgfQoKCgogICAgICAgICAgICAjIFJldHVybiBzdGF0dXMKICAgICAgICAgICAgcmV0dXJuICRMb2NhbDpIYXNDaGFuZ2VkICAgICAgCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gQ2hlY2stSWZCaXRMb2NrZXJQV0hhc0NoYW5nZWQKICAgICNlbmRyZWdpb24gUmV0dXJuIFZhbHVlcyAoVXNlZCBieSBvdGhlciBGdW5jdGlvbnMpCgoKCiAgICAjcmVnaW9uIFNldCBTY3JpcHQgV2lkZSBWYXJpYWJsZXMKICAgICAgICAjcmVnaW9uIEdldC1CaXRMb2NrZXJTdGF0dXMKICAgICAgICAjIEZpbGxzIHR3byBzdHJpbmdzIHdpdGggY3VycmVudCBWb2x1bWUgRW5jcnlwdGlvbiBTdGF0dXMsIGFuZCBWb2x1bWUgUHJvdGVjdGlvbiBTdGF0dXMuIAogICAgICAgICMgQWxzbyBtYWtlcyBhIGJvb2wgYXJyYXkgd2l0aCB0cnVlIGZhbHNlIGZvciB8IDE6IFRQTSBwcmVzZW50IHwgMjogUmVjb3ZlcnkgUGFzc3dvcmQgUHJlc2VudAogICAgICAgIEZ1bmN0aW9uIEdldC1CaXRMb2NrZXJTdGF0dXMgewogICAgICAgICAgICBQYXJhbSgKICAgICAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkRHJpdmVMZXR0ZXIgPSAkT1NEcml2ZQogICAgICAgICAgICApCgogICAgICAgICAgICAjIEhlbHAgdmFyaWFibGVzCiAgICAgICAgICAgICRMb2NhbDpTdHJOYW1lID0gW3N0cmluZ106OkVtcHR5CiAgICAgICAgICAgIGlmICgkRHJpdmVMZXR0ZXIgLW5lICRlbnY6U3lzdGVtRHJpdmUpIHsKICAgICAgICAgICAgICAgICRMb2NhbDpTdHJOYW1lID0gJERyaXZlTGV0dGVyLlN1YnN0cmluZygwLDEpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJExvY2FsOkFkZExldHRlclRvTmFtZSA9IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRMb2NhbDpTdHJOYW1lKQoKICAgICAgICAgICAgIyBHZXQgQml0TG9ja2VyIFN0YXR1cyBmb3IgVm9sdW1lCiAgICAgICAgICAgIFtNaWNyb3NvZnQuQml0TG9ja2VyLlN0cnVjdHVyZXMuQml0TG9ja2VyVm9sdW1lXSAkTG9jYWw6Qml0TG9ja2VyVm9sdW1lU3RhdHVzID0gR2V0LUJpdExvY2tlclZvbHVtZSAtTW91bnRQb2ludCAkRHJpdmVMZXR0ZXIKICAgICAgICAgICAgTmV3LVZhcmlhYmxlIC1OYW1lICgkKElmKC1ub3QoJExvY2FsOkFkZExldHRlclRvTmFtZSkpeyRMb2NhbDpTdHJOYW1lfSkgKyAnQml0TG9ja2VyVm9sdW1lU3RhdHVzJykgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAtVmFsdWUgKFtzdHJpbmddKCRMb2NhbDpCaXRMb2NrZXJWb2x1bWVTdGF0dXMuVm9sdW1lU3RhdHVzKSkgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBWb2x1bWUgRW5jcnlwdGlvbiBTdGF0dXM6IEZ1bGx5RGVjcnlwdGVkIHwgRW5jcnlwdGlvbkluUHJvZ3Jlc3MgfCBGdWxseUVuY3J5cHRlZAogICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgKCQoSWYoLW5vdCgkTG9jYWw6QWRkTGV0dGVyVG9OYW1lKSl7JExvY2FsOlN0ck5hbWV9KSArICdWb2x1bWVFbmNTdGF0dXMnKSAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIGAKICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoW3N0cmluZ10gKCRMb2NhbDpCaXRMb2NrZXJWb2x1bWVTdGF0dXMgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBWb2x1bWVTdGF0dXMpLlZvbHVtZVN0YXR1cykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVm9sdW1lIFByb3RlY3Rpb24gU3RhdHVzOiBPTiBpZiBFbmNyeXB0aW9uIFBlcmNlbnRhZ2UgPSAxMDAlCiAgICAgICAgICAgIE5ldy1WYXJpYWJsZSAtTmFtZSAoJChJZigtbm90KCRMb2NhbDpBZGRMZXR0ZXJUb05hbWUpKXskTG9jYWw6U3RyTmFtZX0pICsgJ1ZvbHVtZVByb3RlY3Rpb25TdGF0dXMnKSAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIGAKICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoW3N0cmluZ10gKCRMb2NhbDpCaXRMb2NrZXJWb2x1bWVTdGF0dXMgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBQcm90ZWN0aW9uU3RhdHVzKS5Qcm90ZWN0aW9uU3RhdHVzKQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICA8IyAgCiAgICAgICAgICAgICAgICAgICAgVm9sdW1lIGNhbiBiZSAnRnVsbHkgRGVjcnlwdGVkJywgYnV0IHN0aWxsIGhhdmUgYSBUUE0gcHJlc2VudC4gCiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c3VhbGx5IHRoZSBjYXNlIHJpZ2h0IGFmdGVyIGVuY3J5cHRpb24gaGFzIHN0YXJ0ZWQuIAogICAgICAgICAgICAjPgoKCiAgICAgICAgICAgICMgSWYgdGhlcmUgaXMgYSBLZXlQcm90ZWN0b3IgZm9yIGdpdmVuIHZvbHVtZSwgZ2V0IHRoZSByZXN0IG9mIHRoZSB2YXJpYWJsZXMKICAgICAgICAgICAgaWYgKCRMb2NhbDpCaXRMb2NrZXJWb2x1bWVTdGF0dXMuS2V5UHJvdGVjdG9yLkNvdW50IC1ndCAwKSB7CiAgICAgICAgICAgICAgICAjIFswfSA9IFZvbHVtZSBoYXMgVFBNPyAgIFsxXSA9IFZvbHVtZSBoYXMgUmVjb3ZlcnkgUGFzc3dvcmQ/CiAgICAgICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgKCQoSWYoLW5vdCgkTG9jYWw6QWRkTGV0dGVyVG9OYW1lKSl7JExvY2FsOlN0ck5hbWV9KSArICdWb2x1bWVIYXNUUE1hbmRQVycpIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoW2Jvb2xbXV0oR2V0LUJvb2xEcml2ZUhhc0JpdExvY2tlclRQTWFuZFBXIC1Ecml2ZUxldHRlciAkRHJpdmVMZXR0ZXIpKSAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBFbmNyeXB0aW9uIFBlcmNlbnRhZ2U6IEhvdyBsb25nIGhhcyB0aGUgZW5jcnlwdGlvbiBwcm9jZXNzIGNvbWUKICAgICAgICAgICAgICAgIE5ldy1WYXJpYWJsZSAtTmFtZSAoJChJZigtbm90KCRMb2NhbDpBZGRMZXR0ZXJUb05hbWUpKXskTG9jYWw6U3RyTmFtZX0pICsgJ1ZvbHVtZUVuY3J5cHRpb25QZXJjZW50YWdlJykgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVZhbHVlICgkTG9jYWw6Qml0TG9ja2VyVm9sdW1lU3RhdHVzLkVuY3J5cHRpb25QZXJjZW50YWdlLlRvU3RyaW5nKCkpICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBJZiBEcml2ZSBoYXMgVFBNIGFuZCBQVwogICAgICAgICAgICAgICAgaWYgKChHZXQtVmFyaWFibGUgLU5hbWUgKCQoSWYoLW5vdChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkTG9jYWw6U3RyTmFtZSkpKXskTG9jYWw6U3RyTmFtZX0pICsgJ1ZvbHVtZUhhc1RQTWFuZFBXJykgLVNjb3BlICdTY3JpcHQnKS5WYWx1ZVsxXSkgewogICAgICAgICAgICAgICAgICAgICMgTmFtZSB0aGUgdmFyaWFibGVzCiAgICAgICAgICAgICAgICAgICAgJExvY2FsOk5hbWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzID0gKCQoSWYoLW5vdChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkTG9jYWw6U3RyTmFtZSkpKXskTG9jYWw6U3RyTmFtZX0pICsgJ0FycmF5UmVjb3ZlcnlQYXNzd29yZHMnKQogICAgICAgICAgICAgICAgICAgICRMb2NhbDpOYW1lQ291bnRSZWNvdmVyeVBhc3N3b3JkcyA9ICgkKElmKC1ub3QoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJExvY2FsOlN0ck5hbWUpKSl7JExvY2FsOlN0ck5hbWV9KSArICdDb3VudFJlY292ZXJ5UGFzc3dvcmRzJykKCiAgICAgICAgICAgICAgICAgICAgIyBHZXQgQXJyYXkgd2l0aCBwcm90ZWN0aW9uIHBhc3N3b3JkcwogICAgICAgICAgICAgICAgICAgIE5ldy1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6TmFtZUFycmF5UmVjb3ZlcnlQYXNzd29yZHMgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoR2V0LUFycmF5UmVjb3ZlcnlQYXNzd29yZHMgLUJpdExvY2tlclZvbHVtZSAkTG9jYWw6Qml0TG9ja2VyVm9sdW1lU3RhdHVzKQoKICAgICAgICAgICAgICAgICAgICAjIENvdW50IEFycmF5UmVjb3ZlcnlQYXNzd29yZHMKICAgICAgICAgICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgJExvY2FsOk5hbWVDb3VudFJlY292ZXJ5UGFzc3dvcmRzIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtVmFsdWUgKChHZXQtVmFyaWFibGUgLU5hbWUgJExvY2FsOk5hbWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzKS5WYWx1ZSkuTGVuZ3RoCgogICAgICAgICAgICAgICAgICAgICMgR2V0IFZvbHVtZSBVbmlxdWUgSUQgKHRvIGNoZWNrIGlmIHByb3RlY3Rpb24gcGFzc3dvcmQgaGFzIGNoYW5nZWQpCiAgICAgICAgICAgICAgICAgICAgTmV3LVZhcmlhYmxlIC1OYW1lICgkKElmKC1ub3QoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJExvY2FsOlN0ck5hbWUpKSl7JExvY2FsOlN0ck5hbWV9KSArICdWb2x1bWVVbmlxdWVJRCcpIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtVmFsdWUgKChHZXQtVm9sdW1lVW5pcXVlSUQgLURyaXZlTGV0dGVyICRMb2NhbDpEcml2ZUxldHRlcikpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBHZXQtQml0TG9ja2VyU3RhdHVzCiAgICAjZW5kcmVnaW9uIFNldCBTY3JpcHQgV2lkZSBWYXJpYWJsZXMKCgoKICAgICNyZWdpb24gUmVnaXN0cnkgRnVuY3Rpb25zCiAgICAgICAgI3JlZ2lvbiBDcmVhdGUtRW52VmFyaWFibGVzCiAgICAgICAgIyBDcmVhdGUtRW52VmFyaWFibGVzOiBDcmVhdGVzIHZhcmlhYmxlcyB1c2VkIGJ5IHRoZSB0cm91Ymxlc2hvb3RlciBhdCB0aGUgYm90dG9tLCB3aGVuIGZhaWxlZCBydW5zIHJlYWNoZXMgYSBnaXZlbiBudW1iZXIuICAKICAgICAgICBGdW5jdGlvbiBDcmVhdGUtRW52VmFyaWFibGVzIHsKICAgICAgICAgICAgIyMjIyBHbG9iYWwgVmFyaWFibGVzCiAgICAgICAgICAgICMjIFRlbmFudAogICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6SUQgPSAoR2V0LUNoaWxkSXRlbSBDZXJ0OlxMb2NhbE1hY2hpbmVcTXlcIHwgV2hlcmUtT2JqZWN0IHsgJF8uSXNzdWVyIC1tYXRjaCAnQ049TVMtT3JnYW5pemF0aW9uLUFjY2VzcycgfSkuU3ViamVjdC5SZXBsYWNlKCdDTj0nLCcnKQogICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0Ok5hbWVUZW5hbnQgPSAoR2V0LUl0ZW1Qcm9wZXJ0eSBIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxDbG91ZERvbWFpbkpvaW5cSm9pbkluZm9cJCgkTG9jYWw6SUQpKS5Vc2VyRW1haWwuU3BsaXQoJ0AnKVsxXQogICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0Ok5hbWVUZW5hbnRTaG9ydCA9ICRHbG9iYWw6TmFtZVRlbmFudC5TcGxpdCgnLicpWzBdCiAgICAgICAgICAgICMjIEhhcmR3YXJlIGFuZCBXaW5kb3dzIGluZm8KICAgICAgICAgICAgW3N0cmluZ10gJFNjcmlwdDpDb21wdXRlck1hbnVmYWN0dXJlciA9IFF1ZXJ5LVJlZ2lzdHJ5IC1EaXIgJ0hLTE06XEhBUkRXQVJFXERFU0NSSVBUSU9OXFN5c3RlbVxCSU9TXFN5c3RlbU1hbnVmYWN0dXJlcicKICAgICAgICAgICAgaWYgKC1ub3QoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFNjcmlwdDpDb21wdXRlck1hbnVmYWN0dXJlcikpKSB7CiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0OkNvbXB1dGVyRmFtaWx5ID0gUXVlcnktUmVnaXN0cnkgLURpciAnSEtMTTpcSEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXEJJT1NcU3lzdGVtRmFtaWx5JwogICAgICAgICAgICAgICAgW3N0cmluZ10gJFNjcmlwdDpDb21wdXRlclByb2R1Y3ROYW1lID0gUXVlcnktUmVnaXN0cnkgLURpciAnSEtMTTpcSEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXEJJT1NcU3lzdGVtUHJvZHVjdE5hbWUnCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0OldpbmRvd3NFZGl0aW9uID0gUXVlcnktUmVnaXN0cnkgLURpciAnSEtMTTpcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cUHJvZHVjdE5hbWUnCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0OldpbmRvd3NWZXJzaW9uID0gUXVlcnktUmVnaXN0cnkgLURpciAnSEtMTTpcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cUmVsZWFzZUlkJwogICAgICAgICAgICAgICAgW3N0cmluZ10gJFNjcmlwdDpXaW5kb3dzVmVyc2lvbiArPSAoJyAoezB9KScgLWYgKFF1ZXJ5LVJlZ2lzdHJ5IC1EaXIgJ0hLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXEN1cnJlbnRCdWlsZCcpKQogICAgICAgICAgICB9IAogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2NhbDpFbnZJbmZvID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQ29tcHV0ZXJTeXN0ZW0gfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSBNYW51ZmFjdHVyZXIsTW9kZWwsU3lzdGVtRmFtaWx5ICAgICAgICAKICAgICAgICAgICAgICAgIFtzdHJpbmddICRTY3JpcHQ6Q29tcHV0ZXJNYW51ZmFjdHVyZXIgPSAkTG9jYWw6RW52SW5mby5NYW51ZmFjdHVyZXIKICAgICAgICAgICAgICAgIFtzdHJpbmddICRTY3JpcHQ6Q29tcHV0ZXJGYW1pbHkgPSAkTG9jYWw6RW52SW5mby5TeXN0ZW1GYW1pbHkKICAgICAgICAgICAgICAgIFtzdHJpbmddICRTY3JpcHQ6Q29tcHV0ZXJQcm9kdWN0TmFtZSA9ICRMb2NhbDpFbnZJbmZvLk1vZGVsCiAgICAgICAgICAgICAgICAkTG9jYWw6T1NJbmZvID0gR2V0LVdtaU9iamVjdCAtQ2xhc3Mgd2luMzJfb3BlcmF0aW5nc3lzdGVtIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgQ2FwdGlvbixWZXJzaW9uCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0OldpbmRvd3NFZGl0aW9uID0gJExvY2FsOk9TSW5mby5DYXB0aW9uCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkU2NyaXB0OldpbmRvd3NWZXJzaW9uID0gJExvY2FsOk9TSW5mby5WZXJzaW9uCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBDcmVhdGUtRW52VmFyaWFibGVzCgoKICAgICAgICAjcmVnaW9uIFF1ZXJ5LVJlZ2lzdHJ5CiAgICAgICAgRnVuY3Rpb24gUXVlcnktUmVnaXN0cnkgewogICAgICAgICAgICBQYXJhbSAoW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXSBbc3RyaW5nXSAkRGlyKQogICAgICAgICAgICAkTG9jYWw6T3V0ID0gW3N0cmluZ106OkVtcHR5CiAgICAgICAgICAgIFtzdHJpbmddICRMb2NhbDpLZXkgPSAkRGlyLlNwbGl0KCd7XH0nKVstMV0KICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOkRpciA9ICREaXIuUmVwbGFjZSgkTG9jYWw6S2V5LCcnKQogICAgICAgIAogICAgICAgICAgICAkTG9jYWw6RXhpc3RzID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAoJ3swfScgLWYgJERpcikgLU5hbWUgKCd7MH0nIC1mICRMb2NhbDpLZXkpIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgICAgIGlmICgkRXhpc3RzKSB7CiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0ID0gJExvY2FsOkV4aXN0cy4kTG9jYWw6S2V5CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICRMb2NhbDpPdXQKICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBRdWVyeS1SZWdpc3RyeQogICAgI2VuZHJlZ2lvbiBSZWdpc3RyeSBGdW5jdGlvbnMKCgoKICAgICNyZWdpb24gICAgRWRpdC1TY2hlZHVsZWRUYXNrCiAgICBmdW5jdGlvbiBFZGl0LVNjaGVkdWxlZFRhc2sgewogICAgICAgIFBhcmFtKAogICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICBbc3RyaW5nXSAkVGFza05hbWUgPSAkU2NyaXB0OlNjaGVkdWxlZFRhc2tOYW1lCiAgICAgICAgKQoKICAgICAgICAkVGFzayA9IEdldC1TY2hlZHVsZWRUYXNrIC1UYXNrTmFtZSAkVGFza05hbWUgLUVycm9yQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJwoKICAgICAgICBpZiAoJFRhc2spIHsKICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Qm9vbFJlbW92ZVNjaGVkdWxlZFRhc2tBZnRlckZpcnN0U3VjY2VzcykgewogICAgICAgICAgICAgICAgJG51bGwgPSBVbnJlZ2lzdGVyLVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICRUYXNrIC1Db25maXJtOiRmYWxzZSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1JlbW92aW5nIHRoZSBTY2hlZHVsZWQgdGFzayAiezB9Ii4gU3VjY2Vzcz8gezF9JyAtZiAoJFRhc2suVGFza05hbWUsJD8uVG9TdHJpbmcoKSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBbRGF0ZVRpbWVdICRMb2NhbDpOZXdTY2hlZFRpbWUgPSBbRGF0ZVRpbWVdOjpUb2RheS5BZGRIb3VycygxMikgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkbnVsbCA9IFNldC1TY2hlZHVsZWRUYXNrIC1UYXNrTmFtZSAkU2NyaXB0OlNjaGVkdWxlZFRhc2tOYW1lIC1UcmlnZ2VyIChOZXctU2NoZWR1bGVkVGFza1RyaWdnZXIgLURhaWx5IC1BdCAkTG9jYWw6TmV3U2NoZWRUaW1lKSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0VkaXRpbmcgU2NoZWR1bGVkIHRhc2sgInswfSIgdG8gc3RhcnQgZGFpbHkgYXQgezF9LiBTdWNjZXNzPyB7Mn0uJyAtZiAoJFNjcmlwdDpTY2hlZHVsZWRUYXNrTmFtZSwkTG9jYWw6TmV3U2NoZWRUaW1lLkhvdXIuVG9TdHJpbmcoKSwkPy5Ub1N0cmluZygpKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdGb3VuZCBubyBTY2hlZHVsZWQgVGFzayB3aXRoIG5hbWUgInswfSIuJyAtZiAoJFRhc2tOYW1lKSkKICAgICAgICB9CiAgICB9CiAgICAjZW5kcmVnaW9uIEVkaXQtU2NoZWR1bGVkVGFzawoKCiAgICAjcmVnaW9uIFByb21wdC1SZWJvb3QKICAgIEZ1bmN0aW9uIFByb21wdC1SZWJvb3QgewogICAgICAgIFt1aW50MTZdICRMb2NhbDpUaW1lVG9SZWJvb3RJbk1pbnV0ZXMgPSA2MCAKICAgICAgICBbc3RyaW5nXSAkTG9jYWw6U3RyU2hvcnRNZXNzYWdlID0gKCdXaW5kb3dzIHdpbGwgcmVzdGFydCBpbiB7MH0gbWludXRlcyB0byBmaW5pc2ggZGV2aWNlIGNvbmZpZ3VyYXRpb24uIFNhdmUgeW91ciB3b3JrIScgLWYgKCRMb2NhbDpUaW1lVG9SZWJvb3RJbk1pbnV0ZXMpKQogICAgICAgICRudWxsID0gY21kLmV4ZSAvYyAoJ3NodXRkb3duIC9yIC90IHswfSAvYyAiezF9IicgLWYgKCRMb2NhbDpUaW1lVG9SZWJvb3RJbk1pbnV0ZXMqNjApLCRMb2NhbDpTdHJTaG9ydE1lc3NhZ2UpIDI+JjEKICAgICAgICBpZiAoLW5vdCgkPykpIHsKICAgICAgICAgICAgJG51bGwgPSBjbWQuZXhlIC9jICgnc2h1dGRvd24gL2EnKSAyPiYxCiAgICAgICAgICAgICRudWxsID0gY21kLmV4ZSAvYyAoJ3NodXRkb3duIC9yIC90IHswfSAvYyAiezF9IicgLWYgKCRMb2NhbDpUaW1lVG9SZWJvb3RJbk1pbnV0ZXMqNjApLCRMb2NhbDpTdHJTaG9ydE1lc3NhZ2UpIDI+JjEKICAgICAgICB9CgogICAgICAgIDwjIEZPUiBGVVRVUkUgRU5IQU5DRU1FTlRTCiAgICAgICAgW3N0cmluZ10gJExvY2FsOlN0ck1lc3NhZ2UgPSAnWW91ciBjb21wdXRlciBhcmUgYXdhaXRpbmcgYSByZXN0YXJ0OicKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9IFlvdXIgb3JnYW5pemF0aW9uIHJlcXVpcmVzIHlvdXIgaGFyZCcgLWYgImByYG4iCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfSBkcml2ZSB0byBiZSBlbmN5cHRlZC4gSW4gb3JkZXIgdG8nIC1mICJgcmBuIgogICAgICAgICRMb2NhbDpTdHJNZXNzYWdlICs9ICd7MH0gZmluaXNoIHRoaXMgcHJvY2VzcywgeW91IG5lZWQgdG8nIC1mICJgcmBuIgogICAgICAgICRMb2NhbDpTdHJNZXNzYWdlICs9ICd7MH0gcmVzdGFydCB5b3VyIGNvbXB1dGVyLiBZb3UgY2FuJyAtZiAiYHJgbiIKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9IGVpdGhlciBkbyBpdCBtYW51YWxseSwgb3IgaXQgd2lsbCcgLWYgImByYG4iCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfSBhdXRvbWF0aWNhbGx5IGhhcHBlbiBpbicgLWYgImByYG4iCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfSB7MX0gbWludXRlcy4nIC1mICJgcmBuIiwkTG9jYWw6VGltZVRvUmVib290SW5NaW51dGVzCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfXswfSBTQVZFIFlPVVIgV09SSyEnIC1mICJgcmBuIgogICAgICAgICM+CiAgICB9CiAgICAjZW5kcmVnaW9uIFByb21wdC1SZWJvb3QgICAgCiNlbmRyZWdpb24gRnVuY3Rpb25zCgoKCiNyZWdpb24gSW5pdGlhbGl6ZQogICAgTG9nV3JpdGUgKCcjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMnKQogICAgTG9nV3JpdGUgKCdTdGFydGluZyBUcmlnZ2VyIEJpdExvY2tlciBzY3JpcHQuJykKICAgIExvZ1dyaXRlICgnIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjJykKICAgIExvZ1dyaXRlICgnIyMjIEdldCBzdGF0cy4nKQogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgIyMgRmV0Y2ggcHJldiBydW4gcmVzdWx0cyAjIwogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAgICAKICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJFNjcmlwdDpGaWxlU3RhdHMpKSB7CiAgICAgICAgW3VpbnQxNl0gJFNjcmlwdDpDb3VudFJ1bnMgPSAwCiAgICAgICAgW2Jvb2xdICRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUgPSBbYm9vbF0gJFNjcmlwdDpJc0VuY3J5cHRlZCA9IFtib29sXSAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gW2Jvb2xdICRTY3JpcHQ6SXNCYWNrdXBPRCA9IFtib29sXSAkU2NyaXB0OklzQmFja3VwQUFEID0gJGZhbHNlCiAgICAgICAgJFNjcmlwdDpPU0RyaXZlS2V5SUQgPSAkU2NyaXB0Ok9TRHJpdmVQcm90ZWN0aW9uUGFzc3dvcmQgPSBbc3RyaW5nXTo6RW1wdHkKICAgICAgICBMb2dXcml0ZSAoJyMgRmlyc3QgcnVuIScpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBbU3RyaW5nW11dICRJbnB1dFN0cmluZyA9IChHZXQtQ29udGVudCAtUGF0aCAkU2NyaXB0OkZpbGVTdGF0cykuU3BsaXQoW0Vudmlyb25tZW50XTo6TmV3TGluZSkKICAgICAgICBbdWludDE2XSAkU2NyaXB0OkNvdW50UnVucyA9IFt1aW50MTZdICRJbnB1dFN0cmluZ1swXQogICAgICAgIFtib29sXSAkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lID0gW3VpbnQxNl0gJElucHV0U3RyaW5nWzFdCiAgICAgICAgW2Jvb2xdICRTY3JpcHQ6SXNFbmNyeXB0ZWQgPSBbdWludDE2XSAkSW5wdXRTdHJpbmdbMl0KICAgICAgICBbYm9vbF0gJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyA9IFt1aW50MTZdICRJbnB1dFN0cmluZ1szXQogICAgICAgIFtib29sXSAkU2NyaXB0OklzQmFja3VwT0QgPSBbdWludDE2XSAkSW5wdXRTdHJpbmdbNF0KICAgICAgICBbYm9vbF0gJFNjcmlwdDpJc0JhY2t1cEFBRCA9IFt1aW50MTZdICRJbnB1dFN0cmluZ1s1XQogICAgICAgIFtzdHJpbmddICRTY3JpcHQ6T1NEcml2ZUtleUlEID0gW3N0cmluZ10gJElucHV0U3RyaW5nWzZdCiAgICAgICAgW3N0cmluZ10gJFNjcmlwdDpPU0RyaXZlUHJvdGVjdGlvblBhc3N3b3JkID0gW3N0cmluZ10gJElucHV0U3RyaW5nWzddCiAgICAgICAgTG9nV3JpdGUgKCcjIFByZXZpb3VzIHJ1biByZXN1bHRzOicpCiAgICAgICAgV3JpdGUtU3RhdHMgLVByZXZpb3VzT25seSAkdHJ1ZQogICAgfQogICAgCgogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgIyMjIyBHZXQgY3VycmVudCBzdGF0dXMgIyMjIwogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAgCiAgICBMb2dXcml0ZSAoJyMgQ3VycmVudCBzdGF0dXM6JykKICAgICMgT1MgRHJpdmUKICAgIEdldC1CaXRMb2NrZXJTdGF0dXMKICAgIGlmICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXKSB7CiAgICAgICAgaWYgKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0pIHsKICAgICAgICAgICAgJFNjcmlwdDpJc0VuY3J5cHRlZCA9ICgkU2NyaXB0OkJpdExvY2tlclZvbHVtZVN0YXR1cyAtZXEgJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMl0pCiAgICAgICAgfQogICAgICAgIGlmICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzFdKSB7CiAgICAgICAgICAgICRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3cgPSAoJFNjcmlwdDpDb3VudFJlY292ZXJ5UGFzc3dvcmRzIC1lcSAxKQogICAgICAgIH0gICAgICAgICAgICAgICAgICAgCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2NyaXB0OklzRW5jcnlwdGVkID0gJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyA9ICRmYWxzZQogICAgfQoKCiAgICAjIE90aGVyIEZpeGVkIERyaXZlcwogICAgI1RPRE8KICAgIDwjCiAgICBbU3RyaW5nW11dICRTY3JpcHQ6Rml4ZWRWb2x1bWVzTGV0dGVycyA9IEAoKEdldC1Wb2x1bWUgfCBgCiAgICAgICAgV2hlcmUtT2JqZWN0IHskXy5Ecml2ZVR5cGUgLWVxICdGaXhlZCcgLWFuZCAoLW5vdChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkXy5Ecml2ZUxldHRlcikpKX0gfCBgCiAgICAgICAgV2hlcmUtT2JqZWN0IHskXy5Ecml2ZUxldHRlciAtbmUgJE9TRHJpdmUuUmVwbGFjZSgnOicsJycpfSkuRHJpdmVMZXR0ZXIpCiAgICAKICAgICRTY3JpcHQ6Rml4ZWRWb2x1bWVzTGV0dGVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICBpZiAoLW5vdChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkXykpKSB7CiAgICAgICAgICAgIEdldC1CaXRsb2NrZXJTdGF0dXMgLURyaXZlTGV0dGVyICRfCiAgICAgICAgICAgIGlmICgoR2V0LVZhcmlhYmxlIC1OYW1lICgnezB9Q291bnRQcm90ZWN0aW9uS2V5cycgLWYgJF8pIC1TY29wZSAnU2NyaXB0JykuTGVuZ3RoIC1ndCAwKSB7CiAgICAgICAgICAgICAgICBbc3RyaW5nW11dICRTY3JpcHQ6T3RoZXJFbmNyeXB0ZWREcml2ZXMgKz0gQCgkXykKICAgICAgICAgICAgfQogICAgICAgIH0gICAgIAogICAgfSM+CgogICAgV3JpdGUtU3RhdHMKI2VuZHJlZ2lvbiBJbml0aWFsaXplCiAgICAKCgojcmVnaW9uIE1haW4KI3JlZ2lvbiBFbmNyeXB0aW9uCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIEJpdExvY2tlciBFbmNyeXB0aW9uICMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCkxvZ1dyaXRlICgnIyMjIEJpdExvY2tlciBFbmNyeXB0aW9uJykKCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIEJpdExvY2tlciBFbmNyeXB0aW9uIG9mIE9TIERyaXZlICAjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI3JlZ2lvbiBCaXRMb2NrZXIgRW5jcnlwdGlvbiBvZiBPUyBEcml2ZQoKTG9nV3JpdGUgKCcjIEJpdExvY2tlciBFbmNyeXB0aW9uIG9mIE9TIERyaXZlJykKaWYgKCRTY3JpcHQ6SXNFbmNyeXB0ZWQpIHsKICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgaXMgYWxyZWFkeSBmdWxseSBlbmNyeXB0ZWQuJykKfQplbHNlIHsKICAgIFtib29sXSAkU2NyaXB0OkJvb2xEaWRBbnl0aGluZ0NoYW5nZVRoaXNSdW50aW1lID0gJHRydWUKICAgIAogICAgIyBJZiAnRnVsbHlFbmNyeXB0ZWQnLCBhbmQgVFBNIHByZXNlbnQKICAgICMgTWVhbnMgdGhhdCBPUyBEcml2ZSBpcyBzdWNjZXNzZnVsbHkgZW5jcnlwdGVkIHdpdGggQml0TG9ja2VyCiAgICBpZiAoKCRTY3JpcHQ6Vm9sdW1lRW5jU3RhdHVzIC1lcSAkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1syXSkgLWFuZCAkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzBdKSB7CiAgICAgICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBpcyBmdWxseSBlbmNyeXB0ZWQhJykKICAgICAgICAkU2NyaXB0OklzRW5jcnlwdGVkID0gJHRydWUKICAgIH0KICAgIAoKICAgICMgSWYgJ0VuY3J5cHRpb25JblByb2dyZXNzJyBhbmQgVFBNIHByZXNlbnQKICAgICMgTWVhbnMgY29tcHV0ZXIgaGFzIHJlc3RhcnRlZCBhZnRlciBCaXRMb2NrZXIgZW5jcnlwdGlvbiB3YXMgZW5hYmxlZC4gV2FpdGluZyBmb3IgdGhlIHZvbHVtZSB0byBnZXQgZW5jcnlwdGVkCiAgICBlbHNlaWYgKCRTY3JpcHQ6Vm9sdW1lRW5jU3RhdHVzIC1lcSAkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1sxXSAtYW5kICRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0pIHsKICAgICAgICBMb2dXcml0ZSAoJ09TIERyaXZlIGVuY3J5cHRpb24gaXMgaW4gcHJvZ3Jlc3M6JykKICAgICAgICBMb2dXcml0ZSAoJ1Jlc3RhcnQgaGF2ZSB0YWtlbiBwbGFjZSwgYW5kIGVuY3J5cHRpb24gaGFzIHN0YXJ0ZWQuJykKICAgICAgICBMb2dXcml0ZSAoJ09TIERyaXZlIEVuY3J5cHRpb24gUGVyY2VudGFnZTogezB9JS4nIC1mICgkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25QZXJjZW50YWdlKSkKICAgICAgICBMb2dXcml0ZSAoJ0NhbiBjb250aW51ZSB0byBjaGVjayBpZiBSZWNvdmVyeSBQYXNzd29yZCBpcyBwcmVzZW50LCBhbmQgYmFja3VwIGl0LicpCiAgICB9CgoKICAgICMgSWYgJ0Z1bGx5RHJlY3R5cHRlZCcgICAgIAogICAgZWxzZWlmICgkVm9sdW1lRW5jU3RhdHVzIC1lcSAkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1swXSkgewogICAgICAgIAogICAgICAgICMgSWYgJ0Z1bGx5RHJlY3R5cHRlZCcgYnV0IHRoZXJlIGV4aXN0cyBhIFRQTQogICAgICAgICMgTWVhbnMgdGhhdCBlbmNyeXB0aW9uIGhhcyBzdGFydGVkLCBidXQgY29tcHV0ZXIgaXMgYXdhaXRpbmcgcmVzdGFydAogICAgICAgIGlmICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXIC1hbmQgJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkgewogICAgICAgICAgICBMb2dXcml0ZSAoJ09TIERyaXZlIEVuY3J5cHRpb24gaGFzIHN0YXJ0ZWQsIGJ1dCBjb21wdXRlciBoYXMgbm90IGJlZW4gcmVzdGFydGVkIHlldC4nKQogICAgICAgICAgICBMb2dXcml0ZSAoJ09TIERyaXZlIEVuY3J5cHRpb24gUGVyY2VudGFnZTogezB9JS4nIC1mICgkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25QZXJjZW50YWdlKSkKICAgICAgICAgICAgTG9nV3JpdGUgKCdDYW4gY29udGludWUgdG8gY2hlY2sgaWYgUmVjb3ZlcnkgUGFzc3dvcmQgaXMgcHJlc2VudCwgYW5kIGJhY2t1cCBpdC4nKQogICAgICAgIH0KICAgICAgICAKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBpcyBub3QgZW5jcnlwdGVkLicpCiAgICAgICAgICAgIExvZ1dyaXRlICgnQXR0ZW1wdGluZyB0byBFbmFibGUgQml0TG9ja2VyIG9uIE9TIGRyaXZlICh7MH0pJyAtZiAoJE9TRHJpdmUpKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgIyBFbmFibGUgQml0TG9ja2VyIHVzaW5nIFRQTQogICAgICAgICAgICAgICAgJG51bGwgPSBFbmFibGUtQml0TG9ja2VyIC1Nb3VudFBvaW50ICRPU0RyaXZlIC1UcG1Qcm90ZWN0b3IgLVVzZWRTcGFjZU9ubHkgLUVycm9yQWN0aW9uIENvbnRpbnVlCiAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1N1Y2Nlc3NmdWxseSBlbmFibGVkIGJpdGxvY2tlci4nKSAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRmFpbGVkIEVuYWJsaW5nIEJpdGxvY2tlciBUcG1Qcm90ZWN0b3IsIGl0YHMgcHJvYmFibHkgYWxyZWFkeSBlbmFibGVkJykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSAKICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgTG9nRXJyb3JzCiAgICAgICAgICAgICAgICBFbmFibGUtQml0TG9ja2VyIC1Nb3VudFBvaW50ICRPU0RyaXZlIC1UcG1Qcm90ZWN0b3IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnV2lsbCBhdHRlbXB0IHRvIEVuYWJsZSBCaXRMb2NrZXIgYW55d2F5IGFuZCB0aGVuIGNvbnRpbnVlLiBTdWNjZXNzPyB7MH0nIC1mICgkPykpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0RpZCB3ZSBhY3R1YWxseSBlbmFibGUgQml0TG9ja2VyPycpCiAgICAgICAgICAgICAgICBHZXQtQml0TG9ja2VyU3RhdHVzCiAgICAgICAgICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQVyAtYW5kICRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0pIHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1RQTSBwcmVzZW50IGZvciBPUyBEcml2ZT8gezB9JyAtZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkpCiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdQcm9tcHRpbmcgcmVib290LicpCiAgICAgICAgICAgICAgICAgICAgUHJvbXB0LVJlYm9vdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdFUlJPUiwgbm90IGVuY3J5cHRlZC4gVFBNIG5vdCBwcmVzZW50IGZvciBPUyBEcml2ZScpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAjIElmIHNjZW5hcmlvIGZpdHMgbm9uZSBvZiB0aGUgY2FzZXMgYWJvdmUuLgogICAgZWxzZSB7CiAgICAgICAgTG9nV3JpdGUgKCdOZWl0aGVyICJ7MH0iLCAiezF9IiBvciAiezJ9Ii4nIC1mICgkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1swXSwkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1sxXSwkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1syXSkpCiAgICB9Cn0KI2VuZHJlZ2lvbiBCaXRMb2NrZXIgRW5jcnlwdGlvbiBvZiBPUyBEcml2ZQoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgUHJvdGVjdGlvbiBQYXNzd29yZCBmb3IgT1MgRHJpdmUgICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojcmVnaW9uIFByb3RlY3Rpb24gUGFzc3dvcmQgZm9yIE9TIERyaXZlCgpMb2dXcml0ZSAoJyMgQml0TG9ja2VyIFByb3RlY3Rpb24gUGFzc3dvcmQgZm9yIE9TIERyaXZlJykKIyBJZiAnRnVsbHlFbmNyeXB0ZWQnLCBvciBUTVAgaXMgcHJlc2VudAppZiAoJFNjcmlwdDpJc0VuY3J5cHRlZCAtb3IgKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFcgLWFuZCAkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzBdKSkgewogICAgCiAgICAKICAgICMgSWYgd2UncmUgZG9uZSB3aXRoIHJlY292ZXJ5IHBhc3N3b3JkKHMpIGFscmVhZHkKICAgIGlmICgkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3IC1hbmQgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZXEgMSkpIHsKICAgICAgICBMb2dXcml0ZSAnUmVjb3ZlcnkgUGFzc3dvcmQgZm9yIE9TIERyaXZlIGlzIGFscmVhZHkgcHJlc2VudCcKICAgIH0KICAgIAoKICAgICMgSWYgd2UncmUgbm90IGRvbmUgd2l0aCByZWNvdmVyeSBwYXNzd29yZChzKQogICAgZWxzZSB7ICAgICAgICAKICAgICAgICBbYm9vbF0gJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9ICR0cnVlCiAgICAgICAgW2Jvb2xdICRMb2NhbDpTdWNjZXNzID0gJGZhbHNlCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgIyBJZiB0aGVyZSBleGlzdHMgQml0TG9ja2VyIEVuY3J5cHRpb24gUmVjb3ZlcnkgUGFzc3dvcmQgICAgICAgCiAgICAgICAgaWYgKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMV0pIHsKICAgICAgICAgICAgCgogICAgICAgICAgICAjIElmIHRoZXJlcyBpcyBfYV8gUHJvdGVjdGlvblBhc3N3b3JkLCB3ZSdyZSBkb25lCiAgICAgICAgICAgIGlmICgkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMgLWVxIDEpIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICdPbmx5IGEgcGFzc3dvcmQgcHJlc2VudCcKICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3cgPSAkdHJ1ZQogICAgICAgICAgICAgICAgJExvY2FsOlN1Y2Nlc3MgPSAkdHJ1ZQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBJZiB0aGVyZSBpcyBtdWx0aXBsZSBSZWNvdmVyeVBhc3N3b3Jkcywgd2UgbmVlZCB0byByZW1vdmUgYWxsIGJ1dCBvbmUKICAgICAgICAgICAgZWxzZWlmICgkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMgLWd0IDEpIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICdNdWx0aXBsZSBwYXNzd29yZHMgcHJlc2VudCcKICAgICAgICAgICAgICAgIFdyaXRlLVJlY292ZXJ5UGFzc3dvcmQKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnV2lsbCByZW1vdmUgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lJykKICAgICAgICAgICAgICAgICRTY3JpcHQ6QXJyYXlSZWNvdmVyeVBhc3N3b3JkcyB8IEZvckVhY2gtT2JqZWN0IHsgCiAgICAgICAgICAgICAgICAgICAgaWYgKCRfLktleVByb3RlY3RvcklkIC1uZSAkU2NyaXB0OkFycmF5UmVjb3ZlcnlQYXNzd29yZHNbMF0uS2V5UHJvdGVjdG9ySWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG51bGwgPSBSZW1vdmUtQml0TG9ja2VyS2V5UHJvdGVjdG9yIC1Nb3VudFBvaW50ICRPU0RyaXZlIC1LZXlQcm90ZWN0b3JJZCAkXy5LZXlQcm90ZWN0b3JJRAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU3VjY2Vzc2Z1bGx5IHJlbW92ZWQgfCBLZXlQcm90ZWN0b3JJZCAiezB9IiB8IFJlY292ZXJ5UGFzc3dvcmQgInsxfSInIC1mICgkXy5LZXlQcm90ZWN0b3JJZCwkXy5SZWNvdmVyeVBhc3N3b3JkKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzZnVsbHkgc2tpcHBlZCB0aGUgZmlyc3Qga2V5LiB8IEtleVByb3RlY3RvcklkICJ7MH0iIHwgUmVjb3ZlcnlQYXNzd29yZCAiezF9IicgLWYgKCRfLktleVByb3RlY3RvcklkLCRfLlJlY292ZXJ5UGFzc3dvcmQpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBHZXQtQml0TG9ja2VyU3RhdHVzCiAgICAgICAgICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQVyAtYW5kICRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMV0gLWFuZCAoJFNjcmlwdDpDb3VudFJlY292ZXJ5UGFzc3dvcmRzIC1lcSAxKSkgewogICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgIAogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBUaGlzIHNob3VsZCBub3QgYmUgcG9zc2libGUKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAnRVJST1I6IFJlY292ZXJ5UGFzc3dvcmQgcHJlc2VudCwgYnV0IGNvdW50IDwgMScKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgCiAgICAgICAgI3JlZ2lvbiBBZGQgUHJvdGVjdGlvbiBQYXNzd29yZCBJZiBOb25lIFByZXNlbnQKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdObyBCaXRMb2NrZXIgUmVjb3ZlcnkgUGFzc3dvcmRzIGZvdW5kIGZvciBPUyBEcml2ZSB7MH0sIGNyZWF0aW5nIG9uZS4nIC1mICRPU0RyaXZlKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJG51bGwgPSBBZGQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIC1Nb3VudFBvaW50ICRPU0RyaXZlIC1SZWNvdmVyeVBhc3N3b3JkUHJvdGVjdG9yIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIC1XYXJuaW5nQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgIGlmICgkPykgewogICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRudWxsID0gRW5hYmxlLUJpdExvY2tlciAtTW91bnRQb2ludCAkT1NEcml2ZSAtUmVjb3ZlcnlQYXNzd29yZFByb3RlY3RvciAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgICAgICAgICAgICAgIGlmICgkPykgewogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgfSAKICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgTG9nRXJyb3JzCiAgICAgICAgICAgICAgICAkbnVsbCA9IEFkZC1CaXRMb2NrZXJLZXlQcm90ZWN0b3IgLU1vdW50UG9pbnQgJE9TRHJpdmUgLVJlY292ZXJ5UGFzc3dvcmRQcm90ZWN0b3IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgLVdhcm5pbmdBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgICAgICAgICAgaWYgKCRMYXN0RXhpdENvZGUgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IEVuYWJsZS1CaXRMb2NrZXIgLU1vdW50UG9pbnQgJE9TRHJpdmUgLVJlY292ZXJ5UGFzc3dvcmRQcm90ZWN0b3IgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN1Y2Nlc3MgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnVHJpZWQgdG8gYWRkIEJpdExvY2tlciBSZWNvdmVyeVBhc3N3b3JkUHJvdGVjdG9yLiBTdWNjZXNzPyB7MH0uJyAtZiAoJExvY2FsOlN1Y2Nlc3MpKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIEFkZCBQcm90ZWN0aW9uIFBhc3N3b3JkIElmIE5vbmUgUHJlc2VudAoKICAgICAgICAKCiAgICAgICAgIyBDb3VudCBhbmQgbGlzdCBleGlzdGluZyBSZWNvdmVyeVBhc3N3b3JkLCBvbmx5IHdyaXRlIHN1Y2Nlc3MgaWYgdGhlcmVzIG9uZSAgICAgICAgCiAgICAgICAgaWYgKCRMb2NhbDpTdWNjZXNzKSB7CiAgICAgICAgICAgIExvZ1dyaXRlICdDaGVja2luZyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBQcm90ZWN0aW9uIFBhc3N3b3JkLicKICAgICAgICAgICAgR2V0LUJpdExvY2tlclN0YXR1cwogICAgICAgICAgICAkTG9jYWw6Qm9vbFRlbXAgPSAkKElmKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFcpeygkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzFdKX1FbHNleyRmYWxzZX0pCiAgICAgICAgICAgIExvZ1dyaXRlICgnUHJvdGVjdGlvbiBQYXNzd29yZCBQcmVzZW50PyB7MH0nIC1mICgkTG9jYWw6Qm9vbFRlbXApKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBJZigkTG9jYWw6Qm9vbFRlbXApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZXEgMSkgeyAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1NVQ0NFU1MsIGtleXMgbGVmdDogMS4nKQogICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3cgPSAkdHJ1ZQogICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgJ0ZBSUwsIGtleXMgbGVmdDogezB9LicgLWYgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcykKICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gJGZhbHNlCiAgICAgICAgICAgICAgICB9ICAKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRkFJTCwgbm8gUHJvdGVjdGlvbiBQYXNzd29yZCBmb3VuZCcpCiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIAogICAgICAgIH0gICAgICAgICAgICAgICAgICAgIAogICAgICAgIGVsc2UgewogICAgICAgICAgICBMb2dXcml0ZSAoJ1NvbWV0aGluZyBmYWlsZWQnKQogICAgICAgIH0gICAgICAgICAgICAgICAgICAgIAogICAgfQogICAgI2VuZHJlZ2lvbiBJZiB0aGVyZXMgMCBvciBtdWx0aXBsZSBQcm90ZWN0aW9uc1Bhc3N3b3JkKHMpIAp9CgoKIyBOb3QgZW5jcnlwdGVkID0gTm8gbWFraW5nIG9mIFJlY292ZXJ5UGFzc3dvcmQKZWxzZSB7CiAgICBMb2dXcml0ZSAoJ09TIERyaXZlIGlzICJGdWxseURlY3J5cHRlZCIgYW5kIHRoZXJlIGV4aXN0cyBubyAiVFBNIi4nKQogICAgTG9nV3JpdGUgKCdCaXRMb2NrZXIgUmVjb3ZlcnlQYXNzd29yZCBjYW4gbm90IGJlIGFkZGVkIGF0IHRoaXMgdGltZS4nKQogICAgTG9nV3JpdGUgKCdSZWNvdmVyeSBQYXNzd29yZCBwcmVzZW50PyB7MH0nIC1mICgkKElmKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFcpeyRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF19RWxzZXskZmFsc2V9KSkpCiAgICAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gJGZhbHNlCn0KCiMgV3JpdGUgcmVjb3ZlcnkgcGFzc3dvcmQocykgaWYgYW55dGhpbmcgY2hhbmdlZCB0aGlzIHJ1bnRpbWUKaWYgKCRTY3JpcHQ6Qm9vbERpZEFueXRoaW5nQ2hhbmdlVGhpc1J1bnRpbWUgLWFuZCAkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzFdKSB7CiAgICBXcml0ZS1SZWNvdmVyeVBhc3N3b3JkCn0KI2VuZHJlZ2lvbiBQcm90ZWN0aW9uIFBhc3N3b3JkIGZvciBPUyBEcml2ZQojZW5kcmVnaW9uIEVuY3J5cHRpb24KCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyMjIEJBQ0tVUCAjIyMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMKI3JlZ2lvbiBCYWNrdXAKCgpMb2dXcml0ZSAoJyMjIyBCYWNrdXAgUHJvdGVjdGlvbiBQYXNzd29yZCB0byBBenVyZUFBRCBhbmQgT25lRHJpdmU0QicpCgojIENoZWNrIGZvciBjaGFuZ2VzIGlmIEZpbmlzaGVkMXN0VGltZQppZiAoJFNjcmlwdDpJc0ZpbmlzaGVkMXN0VGltZSkgewogICAgTG9nV3JpdGUgKCdXaWxsIGNoZWNrIGlmIGFueXRoaW5nIGhhcyBjaGFuZ2VkLicpCgogICAgaWYgKENoZWNrLUlmQml0TG9ja2VyUFdIYXNDaGFuZ2VkKSB7CiAgICAgICAgTG9nV3JpdGUgJ1NvbWV0aGluZyBoYXMgY2hhbmdlZCwgQml0TG9ja2VyIFJlY292ZXJ5IFByb3RlY3Rpb24gUGFzc3dvcmQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSBvbmUgYmFja2VkIHVwLicKICAgICAgICAkU2NyaXB0OklzQmFja3VwQUFEID0gJFNjcmlwdDpJc0JhY2t1cE9EID0gJGZhbHNlCiAgICAgICAgJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9ICR0cnVlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBMb2dXcml0ZSAnTm90aGluZyBoYXMgY2hhbmdlZCwgQml0TG9ja2VyIFJlY292ZXJ5IFByb3RlY3Rpb24gUGFzc3dvcmQgaXMgdGhlIHNhbWUgYXMgdGhlIG9uZSBwcmV2aW91c2x5IGJhY2tlZCB1cC4nCiAgICB9Cn0KCiMgSWYgJElzQmFja3VwQUFEIC1hbmQgJElzQmFja3VwT0QKaWYgKCRTY3JpcHQ6SXNCYWNrdXBBQUQgLWFuZCAkU2NyaXB0OklzQmFja3VwT0QpIHsKICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgaXMgYWxyZWFkeSBiYWNrZWQgdXAuJykKfQoKCiMgSWYgbm8gYmFja3VwcwplbHNlIHsKICAgICMgSWYgUHJvdGVjdGlvblBhc3N3b3JkKHMpIGV4aXN0CiAgICBpZiAoJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdykgewogICAgICAgICAgICAKICAgICAgICBMb2dXcml0ZSAoJ09TIERyaXZlIGlzIGVuY3J5cHRlZCwgYW5kIHRoZXJlIGFyZSB7MH0gUHJvdGVjdGlvblBhc3N3b3JkKHMpIHByZXNlbnQuJyAtZiAoJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzLkxlbmd0aCkpCiAgICAgICAgTG9nV3JpdGUgKCdDb250aW51aW5nIHdpdGggYmFja3VwLicpCgogICAgCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIyBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgYmFja3VwCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgI3JlZ2lvbiBCYWNrdXAgT25lRHJpdmUgZm9yIEJ1c2luZXNzCiAgICAKICAgICAgICBMb2dXcml0ZSAoJyMgQmFja3VwIHRvIE9uZURyaXZlJykKICAgICAgICBpZiAoJFNjcmlwdDpJc0JhY2t1cE9EKSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnQWxyZWFkeSBkb25lJykKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRTY3JpcHQ6Qm9vbERpZEFueXRoaW5nQ2hhbmdlVGhpc1J1bnRpbWUgPSAkdHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICMgR2V0IEN1cnJlbnQgVXNlciBhcyBTZWN1cml0eUlkZW50aWZpZXIKICAgICAgICAgICAgICAgIFtzdHJpbmddICRQYXRoRGlyUm9vdENVID0gKCdIS1U6XHswfVwnIC1mIChbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnRdOjpuZXcoKEdldC1Qcm9jZXNzIC1OYW1lICdFeHBsb3JlcicgLUluY2x1ZGVVc2VyTmFtZSkuVXNlck5hbWUpLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZSkpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQWRkIEhLVTpcIGFzIFBTRHJpdmUgaWYgbm90IGFscmVhZHkKICAgICAgICAgICAgICAgIGlmICgoR2V0LVBTRHJpdmUgLU5hbWUgJ0hLVScgLUVycm9yQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJykgLWVxICRudWxsKSB7JG51bGwgPSBOZXctUFNEcml2ZSAtUFNQcm92aWRlciAnUmVnaXN0cnknIC1OYW1lICdIS1UnIC1Sb290ICdIS0VZX1VTRVJTJ30KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBHZXQgT25lRHJpdmUgZm9yIEJ1c2luZXNzIHBhdGggZnJvbSByZWdpc3RyeSAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkUmVnVmFsdWVzID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAoJ3swfVxTT0ZUV0FSRVxNaWNyb3NvZnRcT25lRHJpdmVcQWNjb3VudHNcJyAtZiAoJFBhdGhEaXJSb290Q1UpKQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJFJlZ1ZhbHVlIGluICRSZWdWYWx1ZXMpIHsKICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6T0Q0QkFjY1R5cGUgPSAoJFJlZ1ZhbHVlIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJ05hbWUnKS5TcGxpdCgne1x9JylbLTFdCiAgICAgICAgICAgICAgICAgICAgaWYgKCRMb2NhbDpPRDRCQWNjVHlwZSAtbGlrZSAnQnVzaW5lc3MqJykgewogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0ZvdW5kIGEgT25lRHJpdmUgZm9yIEJ1c2luZXNzIGFjY291bnQuJykKICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOlBhdGhEaXJPRDRCID0gKEdldC1JdGVtUHJvcGVydHkgLVBhdGggJFJlZ1ZhbHVlLk5hbWUuUmVwbGFjZSgnSEtFWV9VU0VSU1wnLCdIS1U6XCcpIC1OYW1lICdVc2VyRm9sZGVyJykuVXNlckZvbGRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJExvY2FsOlBhdGhEaXJPRDRCIC1ub3RsaWtlICgnezB9XFVzZXJzXCpcT25lRHJpdmUgLSonIC1mICgkT1NEcml2ZSkpIC1hbmQgKC1ub3QoVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QikpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0ZhaWxlZCB0byBidWlsZCBPbmVEcml2ZSBwYXRoOiAiezB9Iiwgb3IgaXQgZG9lcyBub3QgZXhpc3QuJyAtZiAoJExvY2FsOlBhdGgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNjcmlwdDpJc0JhY2t1cE9EID0gJGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCgkU2NyaXB0OkNvbXB1dGVyUHJvZHVjdE5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlLUVudlZhcmlhYmxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFJ1bnRpbWUgdmFyaWFibGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtib29sXSAkTG9jYWw6Qm9vbEZvbGRlckV4aXN0cyA9ICRmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDcmVhdGluZyBwYXRocwogICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50ID0gKCd7MH1cQml0TG9ja2VyIFJlY292ZXJ5XCcgLWYgKCRMb2NhbDpQYXRoRGlyT0Q0QikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXAgPSAoJ3swfXsxfSAoezJ9IHszfSlcJyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50LCRTY3JpcHQ6Q29tcHV0ZXJOYW1lLCRTY3JpcHQ6Q29tcHV0ZXJNYW51ZmFjdHVyZXIsJFNjcmlwdDpDb21wdXRlclByb2R1Y3ROYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnT25lRHJpdmUgZm9yIEJ1c2luZXNzIFBhdGg6IHswfScgLWYgKCRMb2NhbDpQYXRoRGlyT0Q0QikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0JhY2t1cCBQYXRoIFBhcmVudDogICAgICAgICB7MH0nIC1mICgkTG9jYWw6UGF0aERpck9ENEJCYWNrdXBQYXJlbnQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdCYWNrdXAgUGF0aCBmb3IgQml0bG9ja2VyIFJlY292ZXJ5IEtleShzKTogezB9JyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwKSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjVGVzdGluZyBpZiBSZWNvdmVyeSBmb2xkZXIgZXhpc3RzIGlmIG5vdCBjcmVhdGUgb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1Rlc3RpbmcgaWYgYmFja3VwIGZvbGRlciBleGlzdHMsIGNyZWF0ZSBpdCBpZiBub3QuJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6Qm9vbEZvbGRlckV4aXN0cyA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAnQ3JlYXRpbmcgT25lRHJpdmUgZm9yIEJ1c2luZXNzIGZvbGRlciBmb3IgYmFja3VwLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IE5ldy1JdGVtIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cCAtSXRlbVR5cGUgJ0RpcmVjdG9yeScgLUZvcmNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpCb29sRm9sZGVyRXhpc3RzID0gVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnezB9JyAtZiAkKElmKCRMb2NhbDpCb29sRm9sZGVyRXhpc3RzKXsnU3VjY2Vzcy4nfUVsc2V7J0ZhaWxlZC4nfSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENyZWF0ZSBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgQmFja3VwIGlmIHRoZSBmb2xkZXIgZXhpc3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLW5vdCgkTG9jYWw6Qm9vbEZvbGRlckV4aXN0cykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAnRmFpbGVkIHRvIGNoZWNrIG9yIGNyZWF0ZSBmb2xkZXIuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNYWtlIHN1cmUgJ0JpdExvY2tlciBSZWNvdmVyeScgZm9sZGVyIGlzIGhpZGRlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnTWFraW5nIHN1cmUgInswfSIgaXMgaGlkZGVuLicgLWYgKCRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cFBhcmVudCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChHZXQtSXRlbSAtUGF0aCAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXBQYXJlbnQgLUZvcmNlKS5BdHRyaWJ1dGVzIC1ub3RsaWtlICcqaGlkZGVuKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEdldC1JdGVtIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cFBhcmVudCAtRm9yY2UpLkF0dHJpYnV0ZXMgPSAoR2V0LUl0ZW0gLVBhdGggJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50IC1Gb3JjZSkuQXR0cmlidXRlcyAtYm9yICdIaWRkZW4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU3VjY2Vzc2Z1bGx5IGhpZGRlbj8gezB9LicgLWYgKCQ/KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnQWxyZWFkeSBoaWRkZW4uJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDcmVhdGUgc3RyaW5nIGZvciBCaXRMb2NrZXJSZWNvdmVyeVBhc3N3b3JkLnR4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzID0gW3N0cmluZ106OkVtcHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gKCdCaXRMb2NrZXIgUmVjb3ZlcnlQYXNzd29yZCBmb3IgT1MgRHJpdmUgKHswfSl7MX0nIC1mICgkZW52OlN5c3RlbURyaXZlLCJgcmBuIikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gR2V0LVN0cmluZ1JlY292ZXJ5UGFzc3dvcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gImByYG5gcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdCaXRMb2NrZXIgRHJpdmUgRW5jcnlwdGlvbiByZWNvdmVyeSBrZXl7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdUbyB2ZXJpZnkgdGhhdCB0aGlzIGlzIHRoZSBjb3JyZWN0IHJlY292ZXJ5IGtleSwgY29tcGFyZSB0aGUgc3RhcnQgb2YgdGhlIGZvbGxvd2luZ3swfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ2lkZW50aWZpZXIgd2l0aCB0aGUgaWRlbnRpZmllciB2YWx1ZSBkaXNwbGF5ZWQgb24geW91ciBQQy4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gImByYG5gcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICgnSWRlbnRpZmllcjogezB9JyAtZiAoJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLktleVByb3RlY3RvcklkKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAiYHJgbmByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ0lmIHRoZSBhYm92ZSBpZGVudGlmaWVyIG1hdGNoZXMgdGhlIG9uZSBkaXNwbGF5ZWQgYnkgeW91ciBQQyx7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICd0aGVuIHVzZSB0aGUgZm9sbG93aW5nIGtleSB0byAgdW5sb2NrIHlvdXIgZHJpdmU6JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICJgcmBuYHJgbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAoJ1JlY292ZXJ5IEtleTogezB9JyAtZiAoJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLlJlY292ZXJ5UGFzc3dvcmQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICJgcmBuYHJgbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAnSWYgdGhlIGFib3ZlIGlkZW50aWZpZXIgZG9lc25gdCBtYXRjaCB0aGUgb25lIGRpc3BsYXllZCBieSB5b3VyIFBDLHswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ3RoZW4gdGhpcyBpc25gdCB0aGUgcmlnaHQga2V5IHRvIHVubG9jayB5b3VyIGRyaXZlLnswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ1RyeSBhbm90aGVyIHJlY292ZXJ5IGtleSwgb3IgcmVmZXIgdG97MH0nIC1mICJgcmBuIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAnaHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/TGlua0lEPTI2MDU4OSBmb3IgYWRkaXRpb25hbCBhc3Npc3RhbmNlLicKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgT3V0LUZpbGUgdGhlIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICdDcmVhdGluZyBiYWNrdXAgaW4gT25lRHJpdmUgZm9yIEJ1c2luZXNzLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6T0Q0QkJhY2t1cEZpbGVQYXRoID0gKCd7MH1CaXRsb2NrZXJSZWNvdmVyeVBhc3N3b3JkLXsxfS50eHQnIC1mICgkTG9jYWw6UGF0aERpck9ENEJCYWNrdXAsKEdldC1EYXRlIC1Gb3JtYXQgJ3l5TU1kZGhobW1zcycpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdXQtRmlsZSAtRmlsZVBhdGggJExvY2FsOk9ENEJCYWNrdXBGaWxlUGF0aCAtRW5jb2RpbmcgJ3V0ZjgnIC1Gb3JjZSAtSW5wdXRPYmplY3QgKCRMb2NhbDpTdHJSZWNQYXNzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJExvY2FsOk9ENEJCYWNrdXBGaWxlUGF0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzQmFja3VwT0QgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgQmFja3VwIFN1Y2Nlc3M/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1N1Y2Nlc3M/IHswfScgLWYgKCRTY3JpcHQ6SXNCYWNrdXBPRCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU2tpcHBpbmcgcGVyc29uYWwgT25lRHJpdmUgZm9yIEJ1c2luZXNzIGZvbGRlcnMuJykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdFcnJvciB3aGlsZSBiYWNrdXAgdG8gT25lRHJpdmUsIG1ha2Ugc3VyZSB0aGF0IHlvdSBhcmUgQUFEIGpvaW5lZCBhbmQgYXJlIHJ1bm5pbmcgdGhlIGNtZGxldCBhcyBhbiBhZG1pbi4nKQogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdFcnJvciBtZXNzYWdlOicgKyAiYHJgbiIgKyAoJF8pKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdEaWQgYmFja3VwIHRvIE9uZURyaXZlIHN1Y2NlZWQ/IHswfScgLWYgKCRTY3JpcHQ6SXNCYWNrdXBPRCkpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBCYWNrdXAgT25lRHJpdmUgZm9yIEJ1c2luZXNzCiAgICAKCgogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIyBBenVyZSBBRCBCYWNrdXAKICAgICAgICAjIyMjIyMjIyMjIyMjIyMjIwogICAgICAgICNyZWdpb24gQmFja3VwIEF6dXJlIEFBRAoKICAgICAgICBMb2dXcml0ZSAoJyMgQmFja3VwIHRvIEF6dXJlIEFEJykKICAgICAgICBpZiAoJFNjcmlwdDpJc0JhY2t1cEFBRCkgewogICAgICAgICAgICBMb2dXcml0ZSAoJ0FscmVhZHkgZG9uZScpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGVsc2UgewogICAgICAgICAgICAkU2NyaXB0OkJvb2xEaWRBbnl0aGluZ0NoYW5nZVRoaXNSdW50aW1lID0gJHRydWUKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAjQ2hlY2sgaWYgd2UgY2FuIHVzZSBCYWNrdXBUb0FBRC1CaXRMb2NrZXJLZXlQcm90ZWN0b3IgY29tbWFuZGxldAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgJ0NoZWNraW5nIGlmIHdlIGNhbiB1c2UgQmFja3VwVG9BQUQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIGNvbW1hbmRsZXQuJwogICAgICAgICAgICAgICAgJGNtZE5hbWUgPSAnQmFja3VwVG9BQUQtQml0TG9ja2VyS2V5UHJvdGVjdG9yJwogICAgICAgICAgICAgICAgaWYgKEdldC1Db21tYW5kICRjbWROYW1lIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScpIHsKICAgICAgICAgICAgICAgICAgICAjQmFja3VwVG9BQUQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIGNvbW1hbmRsZXQgZXhpc3RzCiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCd7MH0gY29tbWFuZGxldCBleGlzdHMhJyAtZiAoJGNtZE5hbWUpKSAKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IEJhY2t1cFRvQUFELUJpdExvY2tlcktleVByb3RlY3RvciAtTW91bnRQb2ludCAkT1NEcml2ZSAtS2V5UHJvdGVjdG9ySWQgJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLktleVByb3RlY3RvcklkIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaWYgKCQ/KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNCYWNrdXBBQUQgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOkJMViA9IEdldC1CaXRMb2NrZXJWb2x1bWUgLU1vdW50UG9pbnQgJE9TRHJpdmUKICAgICAgICAgICAgICAgICAgICAgICAgJG51bGwgPSBCYWNrdXBUb0FBRC1CaXRMb2NrZXJLZXlQcm90ZWN0b3IgLU1vdW50UG9pbnQgJE9TRHJpdmUgLUtleVByb3RlY3RvcklkICRMb2NhbDpCTFYuS2V5UHJvdGVjdG9yWzBdLktleVByb3RlY3RvcklkIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkPykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNjcmlwdDpJc0JhY2t1cEFBRCA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzPyB7MH0nIC1mICgkU2NyaXB0OklzQmFja3VwQUFEKSkKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgICAgICBlbHNlIHsgCiAgICAgICAgICAgICAgICAgICAgIyBCYWNrdXBUb0FBRC1CaXRMb2NrZXJLZXlQcm90ZWN0b3IgY29tbWFuZGxldCBub3QgYXZhaWxhYmxlLCB1c2luZyBvdGhlciBtZWNoYW5pc20gCiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgJ0JhY2t1cFRvQUFELUJpdExvY2tlcktleVByb3RlY3RvciBjb21tYW5kbGV0IG5vdCBhdmFpbGFibGUsIHVzaW5nIG90aGVyIG1lY2hhbmlzbS4nIAogICAgICAgICAgICAgICAgICAgICMgR2V0IHRoZSBBQUQgTWFjaGluZSBDZXJ0aWZpY2F0ZQogICAgICAgICAgICAgICAgICAgICRjZXJ0ID0gR2V0LUNoaWxkSXRlbSBDZXJ0OlxMb2NhbE1hY2hpbmVcTXlcIHwgV2hlcmUtT2JqZWN0IHsgJF8uSXNzdWVyIC1tYXRjaCAnQ049TVMtT3JnYW5pemF0aW9uLUFjY2VzcycgfQoKICAgICAgICAgICAgICAgICAgICAjIE9idGFpbiB0aGUgQUFEIERldmljZSBJRCBmcm9tIHRoZSBjZXJ0aWZpY2F0ZQogICAgICAgICAgICAgICAgICAgICRpZCA9ICRjZXJ0LlN1YmplY3QuUmVwbGFjZSgnQ049JywnJykKCiAgICAgICAgICAgICAgICAgICAgIyBHZXQgdGhlIHRlbmFudCBuYW1lIGZyb20gdGhlIHJlZ2lzdHJ5CiAgICAgICAgICAgICAgICAgICAgJHRlbmFudCA9IChHZXQtSXRlbVByb3BlcnR5IEhLTE06XFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxDb250cm9sXENsb3VkRG9tYWluSm9pblxKb2luSW5mb1wkKCRpZCkpLlVzZXJFbWFpbC5TcGxpdCgnQCcpWzFdCiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgJHRlbmFudAogICAgICAgICAgICAgICAgICAgICMgR2VuZXJhdGUgdGhlIGJvZHkgdG8gc2VuZCB0byBBQUQgY29udGFpbmluZyB0aGUgcmVjb3ZlcnkgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICAjIEdldCB0aGUgQml0TG9ja2VyIGtleSBpbmZvcm1hdGlvbiBmcm9tIFdNSQogICAgICAgICAgICAgICAgICAgIChHZXQtQml0TG9ja2VyVm9sdW1lIC1Nb3VudFBvaW50ICRPU0RyaXZlKS5LZXlQcm90ZWN0b3J8IFdoZXJlLU9iamVjdCB7JF8uS2V5UHJvdGVjdG9yVHlwZSAtZXEgJ1JlY292ZXJ5UGFzc3dvcmQnfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJGtleSA9ICRfCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlLXZlcmJvc2UgImtpZCA6ICQoJGtleS5LZXlQcm90ZWN0b3JJZCkga2V5OiAkKCRrZXkuUmVjb3ZlcnlQYXNzd29yZCkiCiAgICAgICAgICAgICAgICAgICAgICAgICRib2R5ID0gInsiImtleSIiOiIiJCgka2V5LlJlY292ZXJ5UGFzc3dvcmQpIiIsIiJraWQiIjoiIiQoJGtleS5LZXlQcm90ZWN0b3JJZC5yZXBsYWNlKCd7JywnJykuUmVwbGFjZSgnfScsJycpKSIiLCIidm9sIiI6IiJPU1YiIn0iCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ3JlYXRlIHRoZSBVUkwgdG8gcG9zdCB0aGUgZGF0YSB0byBiYXNlZCBvbiB0aGUgdGVuYW50IGFuZCBkZXZpY2UgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgJHVybCA9ICJodHRwczovL2VudGVycHJpc2VyZWdpc3RyYXRpb24ud2luZG93cy5uZXQvbWFuYWdlLyR0ZW5hbnQvZGV2aWNlLyQoJGlkKT9hcGktdmVyc2lvbj0xLjAiCiAgICAgICAgICAgICAgICAgICAgICAgIExvZ3N0cmluZyAiQ3JlYXRpbmcgdXJsLi4uJHVybCIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBQb3N0IHRoZSBkYXRhIHRvIHRoZSBVUkwgYW5kIHNpZ24gaXQgd2l0aCB0aGUgQUFEIE1hY2hpbmUgQ2VydGlmaWNhdGUKICAgICAgICAgICAgICAgICAgICAgICAgJHJlcSA9IEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJHVybCAtQm9keSAkYm9keSAtVXNlQmFzaWNQYXJzaW5nIC1NZXRob2QgUG9zdCAtVXNlRGVmYXVsdENyZWRlbnRpYWxzIC1DZXJ0aWZpY2F0ZSAkY2VydAogICAgICAgICAgICAgICAgICAgICAgICAkcmVxLlJhd0NvbnRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQ/KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzQmFja3VwQUFEID0gJHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAKICAgICAgICAgICAgICAgICAgICAgICAgTG9nU3RyaW5nICgnUG9zdCB0aGUgZGF0YSB0byB0aGUgVVJMIGFuZCBzaWduIGl0IHdpdGggdGhlIEFBRCBNYWNoaW5lIENlcnRpZmljYXRlLiBTdWNjZXNzPyB7MH0nIC1mICgkU2NyaXB0OklzQmFja3VwQUFEKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRXJyb3Igd2hpbGUgYmFja3VwIHRvIEF6dXJlIEFELCBtYWtlIHN1cmUgdGhhdCB5b3UgYXJlIEFBRCBqb2luZWQgYW5kIGFyZSBydW5uaW5nIHRoZSBjbWRsZXQgYXMgYW4gYWRtaW4uJykKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRXJyb3IgbWVzc2FnZTonICsgImByYG4iICsgKCRfKSkKICAgICAgICAgICAgICAgICRJc0JhY2t1cEFBRCA9ICRmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdEaWQgYmFja3VwIHRvIEF6dXJlIEFEIFN1Y2NlZWQ/IHswfScgLWYgKCRTY3JpcHQ6SXNCYWNrdXBBQUQpKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gQmFja3VwIEF6dXJlIEFBRAogICAgICAgIAogICAgICAgIAogICAgICAgICMgSWYgbm8gYmFja3VwIGFuZCBubyBSZWNvdmVyeSBQYXNzd29yZHMgcHJlc2VudAogICAgICAgIAogICAgfQogICAgZWxzZSB7CiAgICAgICAgTG9nV3JpdGUgJ09TIERyaXZlIGlzIG5vdCBlbmNyeXB0ZXQsIHRoZXJlIGFyZSBubyBSZWNvdmVyeSBQYXNzd29yZHMsIGFuZCB0aGVyZSBhcmUgbm8gYmFja3Vwcy4nCiAgICB9Cn0KI2VuZHJlZ2lvbiBCYWNrdXAKI2VuZHJlZ2lvbiBNYWluCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyAgRyBVIEkgIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiNyZWdpb24gR1VJCmlmICgkU2NyaXB0OklzRW5jcnlwdGVkIC1hbmQgJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyAtYW5kICRHVUkpIHsKICAgICMgU2hvdyByZWJvb3QgcHJvbXB0IHRvIHVzZXIKICAgIExvZ1dyaXRlICJQcm9tcHRpbmcgdXNlciB0byBSZWJvb3QgY29tcHV0ZXIuIgogICAgICAgICAgIAoKICAgIFt2b2lkXVtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoIOKAnFN5c3RlbS5XaW5kb3dzLkZvcm1z4oCdKQogICAgW3ZvaWRdW1N5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5XTo6TG9hZFdpdGhQYXJ0aWFsTmFtZSgg4oCcTWljcm9zb2Z0LlZpc3VhbEJhc2lj4oCdKQoKICAgICRmb3JtID0gTmV3LU9iamVjdCDigJxTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3Jt4oCdOwogICAgJGZvcm0uV2lkdGggPSA1MDA7CiAgICAkZm9ybS5IZWlnaHQgPSAxNTA7CiAgICAkZm9ybS5UZXh0ID0gIkJpdExvY2tlciByZXF1aXJlcyBhIHJlYm9vdCAhIjsKICAgICRmb3JtLlN0YXJ0UG9zaXRpb24gPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybVN0YXJ0UG9zaXRpb25dOjpDZW50ZXJTY3JlZW47CgogICAgJERyb3BEb3duQXJyYXkgPSBAKCI0OkhvdXJzIiwgIjg6SG91cnMiLCAiMTI6SG91cnMiLCAiMjQ6SG91cnMiKQogICAgJERETCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQ29tYm9Cb3gKICAgICREREwuTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoMTQwLCAxMCkKICAgICREREwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMzAsIDMwKQogICAgRm9yRWFjaCAoJEl0ZW0gaW4gJERyb3BEb3duQXJyYXkpIHsKICAgICAgICAkRERMLkl0ZW1zLkFkZCgkSXRlbSkgfCBPdXQtTnVsbAogICAgfQogICAgJERETC5TZWxlY3RlZEluZGV4ID0gMAoKICAgICRidXR0b24xID0gTmV3LU9iamVjdCDigJxTeXN0ZW0uV2luZG93cy5Gb3Jtcy5idXR0b27igJ07CiAgICAkYnV0dG9uMS5MZWZ0ID0gNDA7CiAgICAkYnV0dG9uMS5Ub3AgPSA4NTsKICAgICRidXR0b24xLldpZHRoID0gMTAwOwogICAgJGJ1dHRvbjEuVGV4dCA9IOKAnFJlYm9vdCBOb3figJ07CiAgICAkYnV0dG9uMS5BZGRfQ2xpY2soIHskZ2xvYmFsOnhpbnB1dCA9ICJSZWJvb3QiOyAkRm9ybS5DbG9zZSgpfSkKCiAgICAkYnV0dG9uMiA9IE5ldy1PYmplY3Qg4oCcU3lzdGVtLldpbmRvd3MuRm9ybXMuYnV0dG9u4oCdOwogICAgJGJ1dHRvbjIuTGVmdCA9IDE3MDsKICAgICRidXR0b24yLlRvcCA9IDg1OwogICAgJGJ1dHRvbjIuV2lkdGggPSAxMDA7CiAgICAkYnV0dG9uMi5UZXh0ID0g4oCcUG9zdHBvbmXigJ07CiAgICAkYnV0dG9uMi5BZGRfQ2xpY2soIHskZ2xvYmFsOnhpbnB1dCA9ICJQb3N0cG9uZToiICsgJERETC5UZXh0OyAkRm9ybS5DbG9zZSgpfSkKCiAgICAkYnV0dG9uMyA9IE5ldy1PYmplY3Qg4oCcU3lzdGVtLldpbmRvd3MuRm9ybXMuYnV0dG9u4oCdOwogICAgJGJ1dHRvbjMuTGVmdCA9IDI5MDsKICAgICRidXR0b24zLlRvcCA9IDg1OwogICAgJGJ1dHRvbjMuV2lkdGggPSAxMDA7CiAgICAkYnV0dG9uMy5UZXh0ID0g4oCcQ2FuY2Vs4oCdOwogICAgJGJ1dHRvbjMuQWRkX0NsaWNrKCB7JGdsb2JhbDp4aW5wdXQgPSAiUG9zdHBvbmUyNCI7ICRGb3JtLkNsb3NlKCl9KQoKCiAgICAkZm9ybS5LZXlQcmV2aWV3ID0gJFRydWUKICAgICRmb3JtLkFkZF9LZXlEb3duKCB7aWYgKCRfLktleUNvZGUgLWVxICJFbnRlciIpIAogICAgICAgIHskeCA9ICR0ZXh0Qm94MS5UZXh0OyAkZm9ybS5DbG9zZSgpfX0pCiAgICAkZm9ybS5BZGRfS2V5RG93bigge2lmICgkXy5LZXlDb2RlIC1lcSAiRXNjYXBlIikgCiAgICAgICAgeyRmb3JtLkNsb3NlKCl9fSkKCiAgICAkZXZlbnRIYW5kbGVyID0gW1N5c3RlbS5FdmVudEhhbmRsZXJdIHsgCiAgICAgICAgJGJ1dHRvbjEuQ2xpY2s7CiAgICAgICAgJERyb3BEb3duQXJyYXkuVGV4dDsKICAgICAgICAkZm9ybS5DbG9zZSgpOyB9OwoKICAgICMkYnV0dG9uLkFkZF9DbGljaygkZXZlbnRIYW5kbGVyKSA7CiAgICAkZm9ybS5Db250cm9scy5BZGQoJGJ1dHRvbjEpOwogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRidXR0b24yKTsKICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkYnV0dG9uMyk7CiAgICAkZm9ybS5Db250cm9scy5BZGQoJERETCk7CiAgICAkZm9ybS5Db250cm9scy5BZGQoJHRleHRMYWJlbDEpCiAgICAkcmV0ID0gJGZvcm0uU2hvd0RpYWxvZygpOwoKICAgIGlmICgkZ2xvYmFsOnhpbnB1dCAtZXEgIlJlYm9vdCIpIHtzaHV0ZG93biAtciAtZiAvdCA2MDB9CiAgICBpZiAoJGdsb2JhbDp4aW5wdXQgLWxpa2UgIlBvc3Rwb25lOio6SG91cnMiKSB7CiAgICAgICAgJGh2YWwgPSAoKFtpbnRdJGdsb2JhbDp4aW5wdXQuc3BsaXQoIjoiKVsxXSkgKiA2MCAqIDYwKQogICAgICAgIHNodXRkb3duIC1yIC1mIC90ICRodmFsCiAgICB9CiAgICBpZiAoJGdsb2JhbDp4aW5wdXQgLWVxICJQb3N0cG9uZTI0Iikge3NodXRkb3duIC1yIC1mIC90IDg2NDAwfQp9CiNlbmRyZWdpb24gR1VJCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMgRU5EIFJFU1VMVFMgIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiNyZWdpb24gRW5kIFJlc3VsdHMgCkxvZ1dyaXRlICgnIyMjIEVuZCByZXN1bHRzJykKIyBDbGVhbmluZyB1cCBpZiBzdWNjZXNzCmlmICgkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKSB7CiAgICBMb2dXcml0ZSAnRmluaXNoZWQgZmlyc3QgdGltZSA9IFRydWUgfCBKdXN0IGNoZWNrZWQgd2VhdGhlciBCaXRMb2NrZXIgUmVjb3ZlcnkgUGFzc3dvcmQgaGFkIGNoYW5nZWQuJwp9CgplbHNlIHsKICAgIGlmICgkU2NyaXB0OklzRW5jcnlwdGVkIC1hbmQgJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyAtYW5kICRTY3JpcHQ6SXNCYWNrdXBBQUQgLWFuZCAkU2NyaXB0OklzQmFja3VwT0QpIHsKICAgICAgICBHZXQtQml0TG9ja2VyU3RhdHVzCiAgICAgICAgaWYgKCgkU2NyaXB0OlZvbHVtZUVuY1N0YXR1cyAtZXEgJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMl0pIC1hbmQgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZXEgMSkpIHsKICAgICAgICAKICAgICAgICAgICAgIyBGaXJzdCBzdWNjZXNzZnVsbCBydW4KICAgICAgICAgICAgJFNjcmlwdDpJc0ZpbmlzaGVkMXN0VGltZSA9ICR0cnVlIAogICAgICAgICAgICAKICAgICAgICAgICAgIyBTY2hlZHVsZWRUYXNrCiAgICAgICAgICAgIEVkaXQtU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJFNjcmlwdDpTY2hlZHVsZWRUYXNrTmFtZQoKICAgICAgICAgICAgIyBGaWxlcwogICAgICAgICAgICAjcmVnaW9uIFJlbW92ZSBmaWxlcwogICAgICAgICAgICBpZiAoJFNjcmlwdDpCb29sUmVtb3ZlRmlsZXNBZnRlclN1Y2Nlc3MgLWFuZCAkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKSB7ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkbnVsbCA9IFN0YXJ0LUpvYiAtQXJndW1lbnRMaXN0ICRTY3JpcHQ6RmlsZUxvZyAtU2NyaXB0QmxvY2sgewogICAgICAgICAgICAgICAgICAgIFBhcmFtKFtzdHJpbmddICRGaWxlTG9nKQogICAgICAgIAogICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uIExvZ1dyaXRlIHsKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW0gKFtzdHJpbmddJExvZ1N0cmluZykKICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJGEgPSBHZXQtRGF0ZQogICAgICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9nU3RyaW5nID0gJGEsICRMb2dTdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgQWRkLWNvbnRlbnQgLVBhdGggJEZpbGVMb2cgLVZhbHVlICRMb2dTdHJpbmcKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOlJlbURpclBhdGggPSAoJHtlbnY6UHJvZ3JhbUZpbGVzKHg4Nil9ICsgJ1xCaXRMb2NrZXJUcmlnZ2VyXCcpCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyA1CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdGFydGVkIHRoZSBqb2IgdG8gcmVtb3ZlICJ7MH0iJyAtZiAoJExvY2FsOlJlbURpclBhdGgpKQogICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LVBhdGggJExvY2FsOlJlbURpclBhdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggJExvY2FsOlJlbURpclBhdGggLVJlY3Vyc2UgLUZvcmNlCiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnUmVtb3ZpbmcgdGhlIGZvbGRlciAocmVjdXJzZSwgZm9yY2UpLiBTdWNjZXNzPyB7MH0nIC1mICgkPykpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0ZvbGRlciBkb2VzIG5vdCBleGlzdCcpCiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgICAgICAjZW5kcmVnaW9uIFJlbW92ZSBGaWxlcwogICAgICAgIH0gICAgCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBMb2dXcml0ZSAnVGhlcmUgYXJlIHN0aWxsIHRoaW5ncyB0byBkby4gVHJ5aW5nIGFnYWluIGxhdGVyLicKICAgIH0KfQojZW5kcmVnaW9uIEVuZCBSZXN1bHRzCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMgUyBUIEEgVCBTICMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCkxvZ1dyaXRlICgnIyMjIFNUQVRTJykKJFNjcmlwdDpDb3VudFJ1bnMgKz0gMQoKaWYgKC1ub3QoJFNjcmlwdDpCb29sUmVtb3ZlRmlsZXNBZnRlclN1Y2Nlc3MpKSB7CiAgICBpZiAoLW5vdChUZXN0LVBhdGggJFNjcmlwdDpEaXJJbnN0YWxsKSkgewogICAgICAgICRudWxsID0gTmV3LUl0ZW0gLVBhdGggJFNjcmlwdDpEaXJJbnN0YWxsIC1JdGVtVHlwZSBEaXJlY3RvcnkgLUZvcmNlCiAgICB9CiAgICAKICAgIFtzdHJpbmddICRPdXRTdHJpbmcgPSAoKCRTY3JpcHQ6Q291bnRSdW5zKS5Ub1N0cmluZygpICsgImByYG4iKSAgICAgICAgICAgICAgICAgICAjIDAKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc0ZpbmlzaGVkMXN0VGltZSkuVG9TdHJpbmcoKSArICJgcmBuIikgICAgICAgICAgICAjIDEKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc0VuY3J5cHRlZCkuVG9TdHJpbmcoKSArICJgcmBuIikgICAgICAgICAgICAgICAgICAjIDIKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdykuVG9TdHJpbmcoKSArICJgcmBuIikgICAgICAgICAgICAjIDMKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc0JhY2t1cE9EKS5Ub1N0cmluZygpICsgImByYG4iKSAgICAgICAgICAgICAgICAgICAjIDQKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc0JhY2t1cEFBRCkuVG9TdHJpbmcoKSArICJgcmBuIikgICAgICAgICAgICAgICAgICAjIDUKICAgICRPdXRTdHJpbmcgKz0gKChbc3RyaW5nXSAkU2NyaXB0Ok9TRHJpdmVLZXlJRCkgKyAiYHJgbiIpICAgICAgICAgICAgICAgICAgICAgICAgICAjIDYKICAgICRPdXRTdHJpbmcgKz0gKChbc3RyaW5nXSAkU2NyaXB0Ok9TRHJpdmVQcm90ZWN0aW9uUGFzc3dvcmQpICsgImByYG4iKSAgICAgICAgICAgICAjIDcKICAgCiAgICBPdXQtRmlsZSAtRmlsZVBhdGggJFNjcmlwdDpGaWxlU3RhdHMgLUVuY29kaW5nIHV0ZjggLUZvcmNlIC1JbnB1dE9iamVjdCAoJE91dFN0cmluZykKfQpMb2dXcml0ZSAoJ1J1bnMgc28gZmFyOiB7MH0nIC1mICgkU2NyaXB0OkNvdW50UnVucykpCgppZiAoJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSkgewogICAgV3JpdGUtU3RhdHMgCn0KCgoKIyMjIEdpdmUgdXAgYWZ0ZXIgWCBydW5zIGFuZCBJc0ZpbmlzaGVkMXN0VGltZSAtZXEgJGZhbHNlCmlmICgkU2NyaXB0OkNvdW50UnVucyAtZXEgMzAgLWFuZCAoLW5vdCgkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKSkpIHsKICAgIExvZ1dyaXRlICgnU2hvdWxkIGhhdmUgYmVlbiBkb25lIGJ5IG5vdy4nKQogICAgRWRpdC1TY2hlZHVsZWRUYXNrIC1UYXNrTmFtZSAkU2NyaXB0OlNjaGVkdWxlZFRhc2tOYW1lCgogICAgaWYgKCRmYWxzZSkgewogICAgICAgICMjIyBHYXRoZXJpbmcgaW5mbyBmb3IgdGhlIGVtYWlsCiAgICAgICAgaWYgKC1ub3QoJFNjcmlwdDpXaW5kb3dzVmVyc2lvbikpIHsKICAgICAgICAgICAgQ3JlYXRlLUVudlZhcmlhYmxlcwogICAgICAgIH0KICAgICAgICAjIyMgQnVpbGRpbmcgZW1haWwgc3RyaW5nCiAgICAgICAgW3N0cmluZ10gJExvY2FsOlN0clN1YmplY3QgPSAoJ0JpdExvY2tlclRyaWdnZXIgZmFpbGVkIHswfSB0aW1lcyBmb3IgdGVuYW50ICJ7MX0iLCBkZXZpY2U6ICJ7Mn0iJyAtZiAoJENvdW50UnVucy5Ub1N0cmluZygpLCRMb2NhbDpOYW1lVGVuYW50LCRMb2NhbDpOYW1lQ29tcHV0ZXIpKQogICAgICAgIFtzdHJpbmddICRMb2NhbDpTdHJFbWFpbCA9IFtzdHJpbmddOjpFbXB0eQogICAgICAgICRMb2NhbDpTdHJFbWFpbCArPSAoJExvY2FsOlN0clN1YmplY3QpCiAgICAgICAgJExvY2FsOlN0ckVtYWlsICs9ICgiYHJgbiIpCiAgICAgICAgJExvY2FsOlN0ckVtYWlsICs9ICgiYHJgbiIgKyAnIyMgRW52aXJvbm1lbnQgaW5mbycpCiAgICAgICAgJExvY2FsOlN0ckVtYWlsICs9ICgiYHJgbiIgKyAnRGV2aWNlIG5hbWU6ICcgKyAkU2NyaXB0OkNvbXB1dGVyTmFtZSArICcgfCBNYW51ZmFjdHVyZXI6ICcgKyAkU2NyaXB0OkNvbXB1dGVyTWFudWZhY3R1cmVyICsgJyB8IE1vZGVsOiAnICsgJFNjcmlwdDpDb21wdXRlclByb2R1Y3ROYW1lKSAKICAgICAgICAkTG9jYWw6U3RyRW1haWwgKz0gKCJgcmBuIiArICdXaW5kb3dzIEVkaXRpb246ICcgKyAkU2NyaXB0OldpbmRvd3NFZGl0aW9uICsgJyB8IFdpbmRvd3MgVmVyc2lvbicgKyAkU2NyaXB0OldpbmRvd3NWZXJzaW9uKQogICAgICAgICRMb2NhbDpTdHJFbWFpbCArPSAoImByYG5gcmBuIiArICdUaGVyZSBoYXZlIG5vdyBiZWVuIHswfSBydW5zLCBidXQgQml0TG9ja2VyVHJpZ2dlciBTVElMTCBmYWlscy4nIC1mICgkU2NyaXB0OkNvdW50UnVucykpCiAgICAgICAgJExvY2FsOlN0ckVtYWlsICs9ICgiYHJgbiIgKyAnU3VjY2VzcyBzdGF0dXMgfCBFbmNyeXB0ZWQgOiB7MH0gfCBQcm90ZWN0aW9uIFBhc3N3b3JkcyBwcmVzZW50IDogezF9IHwgQmFja3VwIHRvIEF6dXJlQUQgOiB7Mn0gfCBCYWNrdXAgdG8gT25lRHJpdmUgOiB7M30nIC1mICgkU2NyaXB0OklzRW5jcnlwdGVkLCRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3csJFNjcmlwdDpJc0JhY2t1cEFBRCwkU2NyaXB0OklzQmFja3VwT0QpKQogICAgICAgIExvZ1dyaXRlICgkTG9jYWw6U3RyRW1haWwpCiAgICAgICAgPCMjIyBTZW5kIGVtYWlsCiAgICAgICAgIyMgTWFpbCBhZGRyZXNzKGVzKQogICAgICAgIFtzdHJpbmddICRMb2NhbDpTdHJUb0VtYWlsQWRkcmVzcyA9ICdPbGF2IFIuIEJpcmtlbGFuZCA8b2xhdmJAaXJvbnN0b2VpdC5jb20+OycKICAgICAgICAjJFN0ckVtYWlsQWRkcmVzcyArPSAnSXJvbnN0b25lIFNlcnZpY2VkZXNrIDxzZXJ2aWNlZGVrc0Bpcm9uc3RvbmVpdC5jb20+JwogICAgICAgIFtzdHJpbmddICRMb2NhbDpTdHJGcm9tRW1haWxBZGRyZXNzID0gKCdCaXRMb2NrZXJUcmlnZ2VyRmFpbEB7MH0nIC1mICgkU2NyaXB0Ok5hbWVUZW5hbnQpKQogICAgICAgICNTZW5kLU1haWxNZXNzYWdlIC1UbyAkTG9jYWw6U3RyVG9FbWFpbEFkZHJlc3MgLVNtdHBTZXJ2ZXIgIC1Gcm9tICRMb2NhbDpTdHJGcm9tRW1haWxBZGRyZXNzIC1TdWJqZWN0ICRMb2NhbDpTdHJTdWJqZWN0IC1Cb2R5ICRMb2NhbDpTdHJFbWFpbAogICAgICAgICM+CiAgICB9Cn0KCgoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjICBEIE8gTiBFICAjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIwpMb2dXcml0ZSAoJ0FsbCBkb25lLCBleGl0aW5nIHNjcmlwdC4uLicpCiNlbmRyZWdpb24gTWFpbg==')
        #endregion FilePS1
    #endregion Files
#endregion Variables



#region Functions
    #region Check-CreateDir
    function Check-CreateDir {
        [CMDletBinding()]
        Param(
            [Parameter(Mandatory=$true, Position=0)]
            [String] $Dir
        )

        Write-Verbose -Message ('Check-CreateDir -Dir {0}' -f ($Dir))
        if (-not(Test-Path $Dir)) {
                Write-Verbose -Message ('   Reg dir does not exist, trying to create')
                if(-not($Script:ReadOnly)) {
                    $null = New-Item -ItemType 'Directory' -Force -Path $Dir 2>&1
                    if (-not($?)) {
                        Write-Verbose -Message ('      ERROR: Dir could not be created')
                    }
                    else {
                        Write-Verbose -Message ('      SUCCESS: Dir was created')
                    }
                }
                else {Write-Verbose -Message ('      ReadOnly mode')}
            } 
        else {
            Write-Verbose -Message ('   Reg dir does already exist')
        } 
    }
    #endregion Check-CreateDir



    #region    FileOut-FromBase64
        Function FileOut-FromBase64 {
            [CmdLetBinding()]

            # Parameters
            Param(
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $InstallDir,
            
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $FileName,
            
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $FileContent, 
            
                [Parameter(Mandatory=$true)]
                [ValidateSet('utf8','default')]
                [string] $OutputEncoding,

                [Parameter(Mandatory=$false)]
                [Switch] $Force
            )

            # Do
            [byte] $SubstringLength = $(If($FileContent.Count -lt 10){$FileContent.Count}Else{10})
            Write-Verbose -Message ('FileOut-FromBase64 -FilePath ' + $InstallDir + ' -FileName ' + $FileName + ' -File ' + ($FileContent.Substring(0,$SubstringLength) + '...'))
            [string] $Local:FilePath = $InstallDir + $FileName

            if (Test-Path -Path $InstallDir) {
                Write-Verbose -Message ('   Path exists, trying to write the file (File alrady exists? {0}).' -f (Test-Path -Path $Local:FilePath))
                if (-not($ReadOnly)) {
                    Out-File -FilePath $Local:FilePath -Encoding $OutputEncoding -InputObject ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($FileContent))) -Force:$Force
                    Write-Verbose -Message ('      Success? {0}.' -f ($?))
                    Write-Verbose -Message ('         Does file exist after deletion? {0}.' -f (Test-Path -Path $Local:FilePath -ErrorAction 'SilentlyContinue'))
                }
            }
            else {
                Write-Verbose -Message ('   ERROR: Path does not exist.')
            }
        }
    #endregion FileOut-FromBase64
#endregion Functions



#region Main
    Write-Output -InputObject ("`r`n`r`n" + '### {0}' -f ($NameScript))



    ###########################################################
    ### 1. Clean up BitLockerTrigger and IronTrigger
    Write-Output -InputObject ("`r`n`r`n" + '# 1. Clean up previous install paths.')
    
    # Paths
    Write-Verbose -Message ('Remove previous install path(s) if present')
    # Get Directory Paths
    [string[]] $Local:RemPaths = @(
        # Install Directory used in this script
        ($Script:PathDirInstall),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x64
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f ($env:ProgramW6432)) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName'),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x86
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f (${env:ProgramFiles(x86)})) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName')
    )
    # Remove Directory Paths
    $Local:RemPaths | ForEach-Object {
        if (-not([string]::IsNullOrEmpty($_.Trim()))) {
            Write-Verbose -Message ('   Removing "{0}" if it exists.' -f ($_))
            if (Test-Path -Path "$_") {
                Remove-Item -Path "$_" -Force -Recurse
                Write-Verbose -Message ('      Directory does exist. Removing. Success? {0}' -f ($?))
            }
            else {
                Write-Verbose -Message ('      Directory does not exist')
            }
        }
    }
    
    # Stats and Logs
    Write-Verbose -Message ('Remove previous files: Stats and Logs')
    @(Get-ChildItem -Path ('{0}\Temp' -f ($env:windir)) -File -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*'} | Select-Object -ExpandProperty 'FullName') | ForEach-Object {
        Remove-Item -Path $_ -Force
        Write-Verbose -Message ('Removing "{0}". Success? {1}.' -f ($_,$?.ToString()))
    }
    Get-ChildItem -Path $PathDirLog -Name '*EnableBitLocker.log' -File -Force -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'PSChildName' | ForEach-Object {Remove-Item -Path ('{0}{1}' -f ($PathDirLog,$_)) -Force}

    # Scheduled tasks
    Write-Output -InputObject ('Remove previous ScheduledTask(s)')
    $Local:ScheduledTasks = Get-ScheduledTask | Where-Object {
        # Exact Name
        @($Script:NameScheduledTask,'IronTrigger','Enable_BitLocker').Contains($_.TaskName) -or `
        # Regex
        $_.TaskName -like '*BitLocker' -or $_.TaskName -like '*IronTrigger*'
    }
    
    if ($Local:ScheduledTasks.length -gt 0) {
        $Local:ScheduledTasks | ForEach-Object {             
            $null = Unregister-ScheduledTask -TaskName $_.TaskName -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($_.TaskName,$?))
        }
    }
    else {
        if (Get-ScheduledTask -TaskName $Script:NameScheduledTask -ErrorAction 'SilentlyContinue') {            
            $null = Unregister-ScheduledTask -TaskName $Script:NameScheduledTask -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($Script:NameScheduledTask,$?))
        }
        else {
            Write-Verbose -Message ('  Scheduled task "{0}" does not exist.' -f ($Script:ScheduledTaskName))
        }
    }




    ###########################################################
    ### 2. Install Files
    Write-Output -InputObject ("`r`n`r`n" + '# 2. Install files.')
    Check-CreateDir -Dir $Script:PathDirInstall
    FileOut-FromBase64 -InstallDir $Script:PathDirInstall -FileName $Script:NameFilePS1 -FileContent $Script:ContentFilePS1 -OutputEncoding 'utf8'    



    
    ###########################################################
    ### 3. Surpress BitLocker Toast Notifications
    Write-Output -InputObject ("`r`n`r`n" + '# 3. Surpress BitLocker Toast Notifications.')
    # Get Current User as SecurityIdentifier
    [string] $PathDirRootCU = ('HKU:\{0}\' -f ([System.Security.Principal.NTAccount]::new((Get-Process -Name 'Explorer' -IncludeUserName).UserName).Translate([System.Security.Principal.SecurityIdentifier]).Value))
    # Add HKU:\ as PSDrive if not already
    if ((Get-PSDrive -Name 'HKU' -ErrorAction 'SilentlyContinue') -eq $null) {$null = New-PSDrive -PSProvider 'Registry' -Name 'HKU' -Root 'HKEY_USERS'}
    # Set REG value
    [string] $RegDir = ('{0}\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Windows.SystemToast.BitLockerPolicyRefresh' -f ($PathDirRootCU))
    if (-not(Test-Path -Path $RegDir)) {New-Item -Path $RegDir -ItemType 'Directory' -Force}
    $null = Set-ItemProperty -Path $RegDir -Name 'Enabled' -Value 0 -Type 'DWord' -Force
    Write-Verbose -Message ('   Success? {0}' -f ($?))




    ###########################################################
    ### 4. Create ScheduledTask and run it if success
    Write-Output -InputObject ("`r`n`r`n" + '# 4. Create Scheduled Task "{0}", run it if success.' -f ($Script:NameScheduledTask))
    # Get path of PowerShell.exe and the .PS1 file
    [string] $PathFilePowerShell = ('{0}\{1}\WindowsPowerShell\v1.0\powershell.exe' -f ($env:windir,$(if([System.Environment]::Is64BitOperatingSystem){'SysWOW64'}else{'System32'})))
    [string] $PathFilePS1        = ('{0}\{1}' -f ($Script:PathDirInstall,$Script:NameFilePS1))
    # Create Scheduled Task
    $ScheduledTask = New-ScheduledTask                                                    `
        -Action    (New-ScheduledTaskAction -Execute ('"{0}"' -f ($PathFilePowerShell)) -Argument ('-ExecutionPolicy ByPass -NonInteractive -NoProfile -File "{0}"' -f ($PathFilePS1)))    `
        -Principal (New-ScheduledTaskPrincipal ($(if($DeviceContext){'NT AUTHORITY\SYSTEM'}else{[System.Security.Principal.WindowsIdentity]::GetCurrent().Name}))) `
        -Trigger   (New-ScheduledTaskTrigger -Once -At ([DateTime]::Today.AddHours(12)) -RepetitionInterval ([TimeSpan]::FromMinutes(15)))                                                                                                      `
        -Settings  (New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -ExecutionTimeLimit ([TimeSpan]::FromMinutes(10)) -Compatibility 4 -StartWhenAvailable)
    $ScheduledTask.Author      = 'Ironstone'
    $ScheduledTask.Description = ('Runs a PowerShell script.{0} "{1}" -NonInteractive -NoProfile -File "{2}".' -f ("`r`n",$PathFilePowerShell,$PathFilePS1))
    $null = Register-ScheduledTask -TaskName $Script:NameScheduledTask -InputObject $ScheduledTask -Force -Verbose:$false -Debug:$false
    if ($?) {$null = Start-ScheduledTask -TaskName $NameScheduledTask}
    Write-Verbose -Message ('Success? {0}.' -f ($?))




    ###########################################################
    ### Done
    Write-Output -InputObject ("`r`n`r`n" + 'Done.')    
#endregion Main



################################################
#endregion Your Code Here
################################################   




#region    Don't touch this
}
Catch {
    # Construct Message
    $ErrorMessage = ('{0} finished with errors:' -f ($NameScriptFull))
    $ErrorMessage += " `n"
    $ErrorMessage += 'Exception: '
    $ErrorMessage += $_.Exception
    $ErrorMessage += " `n"
    $ErrorMessage += 'Activity: '
    $ErrorMessage += $_.CategoryInfo.Activity
    $ErrorMessage += " `n"
    $ErrorMessage += 'Error Category: '
    $ErrorMessage += $_.CategoryInfo.Category
    $ErrorMessage += " `n"
    $ErrorMessage += 'Error Reason: '
    $ErrorMessage += $_.CategoryInfo.Reason
    Write-Error -Message $ErrorMessage
}
Finally {
    Stop-Transcript
}
#endregion Don't touch this