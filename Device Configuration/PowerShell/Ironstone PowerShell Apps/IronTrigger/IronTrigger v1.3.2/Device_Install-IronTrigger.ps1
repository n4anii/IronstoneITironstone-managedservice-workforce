<#

.SYNOPSIS


.DESCRIPTION


.NOTES
    * In Intune, remember to set "Run this script using the logged in credentials"  according to the $DeviceContext variable.
        * Intune -> Device Configuration -> PowerShell Scripts -> $NameScriptFull -> Properties -> "Run this script using the logged in credentials"
        * DEVICE (Local System) or USER (Logged in user).
    * Only edit $NameScript and add your code in the #region Your Code Here.
    * You might want to touch "Settings - PowerShell - Output Preferences" for testing / development. 
        * $VerbosePreference, eventually $DebugPreference, to 'Continue' will print much more details.

#>


# Script Variables
[bool]   $DeviceContext = $true
[string] $NameScript    = 'Install-IronTrigger'

# Settings - PowerShell - Output Preferences
$DebugPreference       = 'SilentlyContinue'
$InformationPreference = 'SilentlyContinue'
$VerbosePreference     = 'SilentlyContinue'
$WarningPreference     = 'Continue'



#region    Don't Touch This
# Settings - PowerShell - Interaction
$ConfirmPreference     = 'None'
$ProgressPreference    = 'SilentlyContinue'

# Settings - PowerShell - Behaviour
$ErrorActionPreference = 'Continue'

# Dynamic Variables - Process & Environment
[string] $NameScriptFull      = ('{0}_{1}' -f ($(if($DeviceContext){'Device'}Else{'User'}),$NameScript))
[string] $NameScriptVerb      = $NameScript.Split('-')[0]
[string] $NameScriptNoun      = $NameScript.Split('-')[-1]
[string] $ProcessArchitecture = $(if([System.Environment]::Is64BitProcess){'64'}Else{'32'})
[string] $OSArchitecture      = $(if([System.Environment]::Is64BitOperatingSystem){'64'}Else{'32'})

# Dynamic Variables - User
[string] $StrIsAdmin       = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
[string] $StrUserName      = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[string] $SidCurrentUser   = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
[string] $SidSystemUser    = 'S-1-5-18'
[bool] $CurrentUserCorrect = $(
    if($DeviceContext -and $SIDCurrentUser -eq $SIDSystemUser){$true}
    elseif (-not($DeviceContext) -and $SIDCurrentUser -ne $SIDSystemUser){$true}
    else {$false}
)

# Dynamic Logging Variables
$Timestamp    = [DateTime]::Now.ToString('yyMMdd-HHmmssffff')
$PathDirLog   = ('{0}\IronstoneIT\Intune\DeviceConfiguration\' -f ($(if($DeviceContext -and $CurrentUserCorrect){$env:ProgramW6432}else{$env:APPDATA})))
$PathFileLog  = ('{0}{1}-{2}bit-{3}.txt' -f ($PathDirLog,$NameScriptFull,$ProcessArchitecture,$Timestamp))

# Start Transcript
if (-not(Test-Path -Path $PathDirLog)) {New-Item -ItemType 'Directory' -Path $PathDirLog -ErrorAction 'Stop'}
Start-Transcript -Path $PathFileLog

# Output User Info, Exit if not $CurrentUserCorrect
Write-Output -InputObject ('Running as user "{0}". Has admin privileges? {1}. $DeviceContext = {2}. Running as correct user? {3}.' -f ($StrUserName,$StrIsAdmin,$DeviceContext.ToString(),$CurrentUserCorrect.ToString()))
if (-not($CurrentUserCorrect)){Throw 'Not running as correct user!'} 

# Output Process and OS Architecture Info
Write-Output -InputObject ('PowerShell is running as a {0} bit process on a {1} bit OS.' -f ($ProcessArchitecture,$OSArchitecture))


# Wrap in Try/Catch, so we can always end the transcript
Try {    
    # If OS is 64 bit, and PowerShell got launched as x86, relaunch as x64
    if ( (-not([System.Environment]::Is64BitProcess))  -and [System.Environment]::Is64BitOperatingSystem) {
        write-Output -InputObject (' * Will restart this PowerShell session as x64.')
        if ($myInvocation.Line) {
            &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile $myInvocation.Line
        }
        else {
            &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile -File ('{0}' -f ($myInvocation.InvocationName)) $args
        }
        exit $lastexitcode
    }
    
    # End the Initialize Region
    Write-Output -InputObject ('**********************')
#endregion Don't Touch This
################################################
#region    Your Code Here
################################################


#region    Variables
    # Settings
    [bool]   $Script:ReadOnly           = $false

    # Script specific variables
    [string] $Script:NameApp            = $NameScriptNoun
    [string] $Script:NameScheduledTask  = $NameScriptNoun
    [string] $Script:PathDirInstall     = ('{0}\IronstoneIT\{1}' -f ($env:ProgramW6432,$Script:NameApp))

    # Files
    #region Files
        # Enable-BitLockerTrigger.PS1
        #region FilePS1
        [string] $Script:NameFilePS1    = 'Enable_BitLocker.ps1'
        [string] $Script:ContentFilePS1 = ('')
        #endregion FilePS1
    #endregion Files
#endregion Variables



#region Functions
    #region    FileOut-FromBase64
        Function FileOut-FromBase64 {
            [CmdLetBinding()]

            # Parameters
            Param(
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $PathDirOut,
            
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $NameFileOut,
            
                [Parameter(Mandatory=$true)]
                [ValidateNotNullOrEmpty()]
                [string] $ContentFileOut, 
            
                [Parameter(Mandatory=$true)]
                [ValidateSet('utf8','default')]
                [string] $EncodingFileOut,

                [Parameter(Mandatory=$false)]
                [Switch] $Force
            )

            # Output Debug Info
            [byte] $SubstringLength = $(if($ContentFileOut.Length -lt 10){$ContentFileOut.Length}else{10})
            Write-Debug -Message ('FileOut-FromBase64 -PathDirOut "{0}" -NameFileOut "{1}" -ContentFileOut "{2}" -EncodingFileOut "{3}"' -f ($PathDirOut,$NameFileOut,($ContentFileOut.Substring(0,$SubstringLength)+'...'),$EncodingFileOut))
        

            # If writing to Program Files, and not admin
            if ($PathDirOut -like '*Program Files\*' -and (-not([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {
                Throw ('Cannot write to "{0}" without admin rights!' -f ($PathDirOut))
            }
            else {
                # Create Install Dir if not exist
                if(-not(Test-Path -Path $PathDirOut)){$null = New-Item -Path $PathDirOut -ItemType 'Directory' -Force}
                
                # Continue only if Install Dir exist    
                if (Test-Path -Path $PathDirOut) {
                    [string] $Local:PathFileOut = ('{0}{1}{2}' -f ($PathDirOut,($(if($PathDirOut[-1] -ne '\'){'\'})) + $NameFileOut)).Replace('\\','\')
                    Write-Verbose -Message ('   Path exists, trying to write the file (File alrady exists? {0}).' -f (Test-Path -Path $Local:PathFileOut))
                    if (-not($ReadOnly)) {
                        Out-File -FilePath $Local:PathFileOut -Encoding $EncodingFileOut -InputObject ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($ContentFileOut))) -Force:$Force
                        Write-Verbose -Message ('      Success? {0}.' -f ($?))
                        Write-Verbose -Message ('         Does file actually exist? {0}.' -f (Test-Path -Path $Local:PathFileOut -ErrorAction 'SilentlyContinue'))
                    }
                }
                else {
                    Throw ('ERROR: Install Path does not exist.')
                }
            }
        }
    #endregion FileOut-FromBase64
#endregion Functions



#region Main
    Write-Output -InputObject ('### {0}' -f ($NameScript))



    ###########################################################
    ### 1. Clean up BitLockerTrigger and IronTrigger
    Write-Output -InputObject ("`r`n`r`n" + '# 1. Clean up previous install paths.')
    
    # Paths
    Write-Verbose -Message ('Remove previous install path(s) if present')
    # Get Directory Paths
    [string[]] $Local:RemPaths = @(
        # Install Directory used in this script
        ($Script:PathDirInstall),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x64
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f ($env:ProgramW6432)) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName'),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x86
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f (${env:ProgramFiles(x86)})) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName')
    )
    # Remove Directory Paths
    $Local:RemPaths | ForEach-Object {
        if (-not([string]::IsNullOrEmpty($_.Trim()))) {
            Write-Verbose -Message ('   Removing "{0}" if it exists.' -f ($_))
            if (Test-Path -Path "$_") {
                Remove-Item -Path "$_" -Force -Recurse
                Write-Verbose -Message ('      Directory does exist. Removing. Success? {0}' -f ($?))
            }
            else {
                Write-Verbose -Message ('      Directory does not exist')
            }
        }
    }
    
    # Stats and Logs
    Write-Verbose -Message ('Remove previous files: Stats and Logs')
    @(Get-ChildItem -Path ('{0}\Temp' -f ($env:windir)) -File -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*'} | Select-Object -ExpandProperty 'FullName') | ForEach-Object {
        Remove-Item -Path $_ -Force
        Write-Verbose -Message ('Removing "{0}". Success? {1}.' -f ($_,$?.ToString()))
    }
    Get-ChildItem -Path $PathDirLog -Name '*EnableBitLocker.log' -File -Force -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'PSChildName' | ForEach-Object {Remove-Item -Path ('{0}{1}' -f ($PathDirLog,$_)) -Force}

    # Scheduled tasks
    Write-Verbose -Message ('Remove previous ScheduledTask(s)')
    $Local:ScheduledTasks = Get-ScheduledTask | Where-Object {
        # Exact Name
        @($Script:NameScheduledTask,'IronTrigger','Enable_BitLocker').Contains($_.TaskName) -or `
        # Regex
        $_.TaskName -like '*BitLocker' -or $_.TaskName -like '*IronTrigger*'
    }
    
    if ($Local:ScheduledTasks.length -gt 0) {
        $Local:ScheduledTasks | ForEach-Object {             
            $null = Unregister-ScheduledTask -TaskName $_.TaskName -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($_.TaskName,$?))
        }
    }
    else {
        if (Get-ScheduledTask -TaskName $Script:NameScheduledTask -ErrorAction 'SilentlyContinue') {            
            $null = Unregister-ScheduledTask -TaskName $Script:NameScheduledTask -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($Script:NameScheduledTask,$?))
        }
        else {
            Write-Verbose -Message ('  Scheduled task "{0}" does not exist.' -f ($Script:ScheduledTaskName))
        }
    }




    ###########################################################
    ### 2. Install Files
    Write-Output -InputObject ("`r`n`r`n" + '# 2. Install files.')
    FileOut-FromBase64 -PathDirOut $Script:PathDirInstall -NameFileOut $Script:NameFilePS1 -ContentFileOut $Script:ContentFilePS1 -EncodingFileOut 'utf8' -Force    
    [bool] $SuccessInstallFile = $?
    Write-Verbose -Message ('   Success? {0}' -f ($SuccessInstallFile))
    if (-not($SuccessInstallFile)) {Break}



    
    ###########################################################
    ### 3. Surpress BitLocker Toast Notifications
    Write-Output -InputObject ("`r`n`r`n" + '# 3. Surpress BitLocker Toast Notifications.')

    # Get Current User as SecurityIdentifier
    if (-not($Script:PathDirRootCU)){
        [string] $Script:PathDirRootCU = ('HKU:\{0}\' -f ([System.Security.Principal.NTAccount]::new((Get-Process -Name 'explorer' -IncludeUserName | Select-Object -ExpandProperty UserName -First 1)).Translate([System.Security.Principal.SecurityIdentifier]).Value))
        if((-not($?)) -or [string]::IsNullOrEmpty($PathDirRootCU)){Break}
    }
    
    # Add HKU:\ as PSDrive if not already
    if ((Get-PSDrive -Name 'HKU' -ErrorAction SilentlyContinue) -eq $null) {$null = New-PSDrive -PSProvider Registry -Name 'HKU' -Root 'HKEY_USERS'}

    # Set REG value
    [string] $RegDir = ('{0}\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Windows.SystemToast.BitLockerPolicyRefresh' -f ($PathDirRootCU))
    if (-not(Test-Path -Path $RegDir)) {New-Item -Path $RegDir -ItemType 'Directory' -Force}
    $null = Set-ItemProperty -Path $RegDir -Name 'Enabled' -Value 0 -Type 'DWord' -Force
    Write-Verbose -Message ('   Success? {0}' -f ($?))




    ###########################################################
    ### 4. Create ScheduledTask and run it if success
    Write-Output -InputObject ("`r`n`r`n" + '# 4. Create Scheduled Task "{0}", run it if success.' -f ($Script:NameScheduledTask))
    # Get path of PowerShell.exe and the .PS1 file
    [string] $PathFilePowerShell = '%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe' # Works regardless of 64bit vs 32bit
    [string] $PathFilePS1        = ('{0}\{1}' -f ($Script:PathDirInstall,$Script:NameFilePS1))
    # Create Scheduled Task
    #region    Create Scheduled Task running PS1 using PowerShell.exe - Every 15 Minutes
        $ScheduledTask = New-ScheduledTask                                                    `
            -Action    (New-ScheduledTaskAction -Execute ('"{0}"' -f ($PathFilePowerShell)) -Argument ('-ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File "{0}"' -f ($PathFilePS1))) `
            -Principal (New-ScheduledTaskPrincipal -UserId 'NT AUTHORITY\SYSTEM' -RunLevel 'Highest')                                                                                                                   `
            -Trigger   (New-ScheduledTaskTrigger -Once -At ([DateTime]::Today.AddHours(12)) -RepetitionInterval ([TimeSpan]::FromMinutes(15)))                                                                          `
            -Settings  (New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -ExecutionTimeLimit ([TimeSpan]::FromMinutes(10)) -Compatibility 4 -StartWhenAvailable)
        $ScheduledTask.Author      = 'Ironstone'
        $ScheduledTask.Description = ('Runs a PowerShell script.{0} "{1}" -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File "{2}".' -f ("`r`n",$PathFilePowerShell,$PathFilePS1))
        $null = Register-ScheduledTask -TaskName $NameScheduledTask -InputObject $ScheduledTask -Force -Verbose:$false -Debug:$false
        if ($?) {$null = Start-ScheduledTask -TaskName $NameScheduledTask}
    #endregion Create Scheduled Task running PS1 using PowerShell.exe - Every 15 Minutes
    Write-Verbose -Message ('Success? {0}.' -f ($?))




    ###########################################################
    ### Done
    Write-Output -InputObject ("`r`n`r`n" + 'Done.')    
#endregion Main



################################################
#endregion Your Code Here
################################################   
#region    Don't touch this
}
Catch {
    # Construct Message
    $ErrorMessage = ('{0} finished with errors:' -f ($NameScriptFull))
    $ErrorMessage += " `n"
    $ErrorMessage += 'Exception: '
    $ErrorMessage += $_.Exception
    $ErrorMessage += " `n"
    $ErrorMessage += 'Activity: '
    $ErrorMessage += $_.CategoryInfo.Activity
    $ErrorMessage += " `n"
    $ErrorMessage += 'Error Category: '
    $ErrorMessage += $_.CategoryInfo.Category
    $ErrorMessage += " `n"
    $ErrorMessage += 'Error Reason: '
    $ErrorMessage += $_.CategoryInfo.Reason
    Write-Error -Message $ErrorMessage
}
Finally {
    Stop-Transcript
}
#endregion Don't touch this