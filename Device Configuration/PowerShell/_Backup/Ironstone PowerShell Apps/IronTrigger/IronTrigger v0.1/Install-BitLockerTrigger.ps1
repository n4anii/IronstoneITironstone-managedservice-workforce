<#
.SYNOPSIS
    <Short, what it does>


.DESCRIPTION
    <Long, what it does>


.OUTPUTS
    <What it outputs during runtime>


Usage:


Todo:


Resources:
- Base64Encode.org (https://www.base64encode.org/) for Base64 encoding of the files

#>


#region Variables
# Settings
[bool] $DebugWinTemp = $true
[bool] $DebugConsole = $false
[bool] $ReadOnly = $false
If ($DebugWinTemp) {[String] $Global:DebugStr=[String]::Empty}

# Script specific variables
[String] $WhatToConfig = 'Install BitLockerTrigger'

# Files
#region Files
# Enable-BitLockerTrigger.PS1
#region FilePS1
[String] $Local:NamePS1 = 'Enable_BitLocker.ps1'
[String] $Local:FilePS1 = ('')
#endregion FilePS1

# Enable-BitLockerTrigger.VBS
#region FileVBS
[String] $Local:NameVBS = 'Enable_BitLocker.vbs'
[String] $Local:FileVBS = ('U2V0IG9ialNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXc2NyaXB0LlNoZWxsIikgIA0KU2V0IGFyZ3MgPSBXc2NyaXB0LkFyZ3VtZW50cyAgDQpGb3IgRWFjaCBhcmcgSW4gYXJncyAgDQogICAgRGltIFBTUnVuDQogICAgUFNSdW4gPSAicG93ZXJzaGVsbC5leGUgLVdpbmRvd1N0eWxlIGhpZGRlbiAtRXhlY3V0aW9uUG9saWN5IGJ5cGFzcyAtTm9uSW50ZXJhY3RpdmUgLUZpbGUgIiIiICYgYXJnICYgIiIiIg0KICAgIG9ialNoZWxsLlJ1bihQU1J1biksMA0KTmV4dA==')
#endregion FileVBS
    
# Enable-BitLockerTrigger.XML
#region FileXML
[String] $Local:NameXML = 'Enable_BitLocker.xml'
[String] $Local:FileXML = ('PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2Ij8+DQo8VGFzayB2ZXJzaW9uPSIxLjQiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmRvd3MvMjAwNC8wMi9taXQvdGFzayI+DQogIDxSZWdpc3RyYXRpb25JbmZvPg0KICAgIDxEYXRlPjIwMTgtMDEtMDFUMTQ6MDA6MDA8L0RhdGU+DQogICAgPEF1dGhvcj5Jcm9uc3RvbmU8L0F1dGhvcj4NCiAgICA8VVJJPlxCaXRsb2NrZXJUcmlnZ2VyPC9VUkk+DQogIDwvUmVnaXN0cmF0aW9uSW5mbz4NCiAgPFRyaWdnZXJzPg0KICAgIDxUaW1lVHJpZ2dlcj4NCiAgICAgIDxSZXBldGl0aW9uPg0KICAgICAgICA8SW50ZXJ2YWw+UFQxNU08L0ludGVydmFsPg0KICAgICAgICA8U3RvcEF0RHVyYXRpb25FbmQ+ZmFsc2U8L1N0b3BBdER1cmF0aW9uRW5kPg0KICAgICAgPC9SZXBldGl0aW9uPg0KICAgICAgPFN0YXJ0Qm91bmRhcnk+MjAxOC0wMS0wMVQxNDowMDowMDwvU3RhcnRCb3VuZGFyeT4NCiAgICAgIDxFbmFibGVkPnRydWU8L0VuYWJsZWQ+DQogICAgPC9UaW1lVHJpZ2dlcj4NCiAgPC9UcmlnZ2Vycz4NCiAgPFByaW5jaXBhbHM+DQogICAgPFByaW5jaXBhbCBpZD0iQXV0aG9yIj4NCiAgICAgIDxHcm91cElkPlMtMS01LTMyLTU0NTwvR3JvdXBJZD4NCiAgICAgIDxSdW5MZXZlbD5IaWdoZXN0QXZhaWxhYmxlPC9SdW5MZXZlbD4NCiAgICA8L1ByaW5jaXBhbD4NCiAgPC9QcmluY2lwYWxzPg0KICA8U2V0dGluZ3M+DQogICAgPE11bHRpcGxlSW5zdGFuY2VzUG9saWN5Pklnbm9yZU5ldzwvTXVsdGlwbGVJbnN0YW5jZXNQb2xpY3k+DQogICAgPERpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPmZhbHNlPC9EaXNhbGxvd1N0YXJ0SWZPbkJhdHRlcmllcz4NCiAgICA8U3RvcElmR29pbmdPbkJhdHRlcmllcz5mYWxzZTwvU3RvcElmR29pbmdPbkJhdHRlcmllcz4NCiAgICA8QWxsb3dIYXJkVGVybWluYXRlPnRydWU8L0FsbG93SGFyZFRlcm1pbmF0ZT4NCiAgICA8U3RhcnRXaGVuQXZhaWxhYmxlPnRydWU8L1N0YXJ0V2hlbkF2YWlsYWJsZT4NCiAgICA8UnVuT25seUlmTmV0d29ya0F2YWlsYWJsZT5mYWxzZTwvUnVuT25seUlmTmV0d29ya0F2YWlsYWJsZT4NCiAgICA8SWRsZVNldHRpbmdzPg0KICAgICAgPFN0b3BPbklkbGVFbmQ+dHJ1ZTwvU3RvcE9uSWRsZUVuZD4NCiAgICAgIDxSZXN0YXJ0T25JZGxlPmZhbHNlPC9SZXN0YXJ0T25JZGxlPg0KICAgIDwvSWRsZVNldHRpbmdzPg0KICAgIDxBbGxvd1N0YXJ0T25EZW1hbmQ+dHJ1ZTwvQWxsb3dTdGFydE9uRGVtYW5kPg0KICAgIDxFbmFibGVkPnRydWU8L0VuYWJsZWQ+DQogICAgPEhpZGRlbj5mYWxzZTwvSGlkZGVuPg0KICAgIDxSdW5Pbmx5SWZJZGxlPmZhbHNlPC9SdW5Pbmx5SWZJZGxlPg0KICAgIDxEaXNhbGxvd1N0YXJ0T25SZW1vdGVBcHBTZXNzaW9uPmZhbHNlPC9EaXNhbGxvd1N0YXJ0T25SZW1vdGVBcHBTZXNzaW9uPg0KICAgIDxVc2VVbmlmaWVkU2NoZWR1bGluZ0VuZ2luZT50cnVlPC9Vc2VVbmlmaWVkU2NoZWR1bGluZ0VuZ2luZT4NCiAgICA8V2FrZVRvUnVuPmZhbHNlPC9XYWtlVG9SdW4+DQogICAgPEV4ZWN1dGlvblRpbWVMaW1pdD5QVDFIPC9FeGVjdXRpb25UaW1lTGltaXQ+DQogICAgPFByaW9yaXR5Pjc8L1ByaW9yaXR5Pg0KICA8L1NldHRpbmdzPg0KICA8QWN0aW9ucyBDb250ZXh0PSJBdXRob3IiPg0KICAgIDxFeGVjPg0KICAgICAgPENvbW1hbmQ+d3NjcmlwdC5leGU8L0NvbW1hbmQ+DQogICAgICA8QXJndW1lbnRzPiJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXEJpdExvY2tlclRyaWdnZXJcRW5hYmxlX0JpdExvY2tlci52YnMiICJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXEJpdExvY2tlclRyaWdnZXJcRW5hYmxlX0JpdExvY2tlci5wczEiPC9Bcmd1bWVudHM+DQogICAgPC9FeGVjPg0KICA8L0FjdGlvbnM+DQo8L1Rhc2s+')
#endregion FileXML
#enregion Files
#endregion Variables



#region Functions
    #region Write-DebugIfOn
    Function Write-DebugIfOn {
        param(
            [Parameter(Mandatory=$true, Position=0)]
            [String] $In
        )
        If ($DebugConsole) {
            Write-Output -InputObject $In
        }
        If ($DebugWinTemp) {
            $Global:DebugStr += ($In + "`r`n")
        }
    }
    #endregion Write-DebugIfOn


    #region Check-CreateDir
    Function Check-CreateDir {
        Param(
            [Parameter(Mandatory=$true, Position=0)]
            [String] $Dir
        )
        Write-DebugIfOn -In ('Check-CreateDir -Dir ' + $Dir)
        If (!(Test-Path $Dir)) {
                Write-DebugIfOn -In '   Reg dir does not exist, trying to create'
                If(!($ReadOnly)) {
                    $null = New-Item -ItemType Directory -Force -Path $Dir 2>&1
                    If (!($?)) {
                        Write-DebugIfOn -In '      ERROR: Dir could not be created'
                    }
                    Else {
                        Write-DebugIfOn -In '      SUCCESS: Dir was created'
                    }
                }
                Else {Write-DebugIfOn -In '      ReadOnly mode'}
            } 
        Else {
            Write-DebugIfOn -In '   Reg dir does already exist'
        } 
    }
    #endregion Check-CreateDir


    #region FileOut-FromBase64
    Function FileOut-FromBase64 {
        Param(
            [Parameter(Mandatory=$true)]
            [String] $InstallDir, $FileName, $File, $Encoding
        )
        Write-DebugIfOn -In ('FileOut-FromBase64 -FilePath ' + $InstallDir + ' -FileName ' + $FileName + ' -File ' + ($File.Substring(0,10) + '...'))
        $Local:FilePath = $InstallDir + $FileName

        If (Test-Path $InstallDir) {
            Write-DebugIfOn -In ('   Path exists, trying to write the file (File alrady exists? {0})' -f (Test-Path $Local:FilePath))
            If (-not($ReadOnly)) {
                Out-File -FilePath $Local:FilePath -Encoding $Encoding -InputObject ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($File)))
                Write-DebugIfOn -In ('      Success? {0}' -f ($?))
                Write-DebugIfOn -In ('         Does file actually exist? {0}' -f (Test-Path $Local:FilePath -ErrorAction SilentlyContinue))
            }
        }
        Else {
            Write-DebugIfOn -In ('   ERROR: Path does not exist')
        }
    }
    #enregion FileOut-FromBase64
#enregion Functions



#region Initialize
[String] $Script:CompName = $env:COMPUTERNAME
[System.Management.ManagementObject] $Script:WMIInfo = Get-WmiObject -Class win32_operatingsystem
[String] $Script:WindowsEdition = $Script:WMIInfo.Caption
[String] $Script:WindowsVersion = $Script:WMIInfo.Version
If ($DebugWinTemp -or $DebugConsole) {   
    Write-DebugIfOn -In '### Environment Info'
    Write-DebugIfOn -In ('Script settings: DebugConsole = ' + $DebugConsole + ' | DebugWinTemp = ' + $DebugWinTemp + ' ' + ' | ReadOnly = ' + $ReadOnly)
    Write-DebugIfOn -In ('Host (' + $Script:CompName + ') runs: ' + $Script:WindowsEdition + ' v' + $Script:WindowsVersion)
}
#endregion Initialize



#region Main
    Write-DebugIfOn -In ("`r`n`r`n" + '### ' + $WhatToConfig)

    # 1. Create dir
    [String] $Local:InstallDir = (${env:ProgramFiles(x86)} + '\BitLockerTrigger\')
    Check-CreateDir -Dir $InstallDir
    
    # 2. Import files
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NamePS1 -File $Local:FilePS1 -Encoding utf8
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NameVBS -File $Local:FileVBS -Encoding default
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NameXML -File $Local:FileXML -Encoding utf8

    # 3. Run VBS to create schedule
    Write-DebugIfOn -In ('Register-ScheduledTask -Xml (Get-Content (' + $Local:InstallDir + $Local:NameXML + ') | Out-String) -TaskName "BitLockerTrigger" -Force')
    $null = Register-ScheduledTask -Xml (Get-Content ($Local:InstallDir + $Local:NameXML) | Out-String) -TaskName 'BitLockerTrigger' -Force
    Write-DebugIfOn -In ('   Success? {0}' -f ($?))

    # 4. Reset stats and log
    Write-DebugIfOn -In ('Reset stats and log')
    [String[]] $Local:RemItems = @(($Local:InstallDir + 'stats.txt'),($env:windir + '\Temp\TriggerBitLocker.log'))
    $Local:RemItems | ForEach-Object { 
        If (Test-Path $_) {
            Remove-Item -Path ($_) -Force
            Write-DebugIfOn -In (' Removing "{0}". Success? .' -f ($_, $?))
        }
        Write-DebugIfOn -In (' "{0}" does not exist' -f ($_))
    }
#endregion Main



#region Debug
If ($DebugWinTemp) {
    If ([String]::IsNullOrEmpty($DebugStr)) {
        $DebugStr = 'Everything failed'
    }

    # Write Output
    $DebugPath = 'C:\Windows\Temp\'
    $CurDate = Get-Date -Uformat '%y%m%d'
    $CurTime = Get-Date -Format 'HHmmss'
    $DebugFileName = ('Debug Powershell ' + $WhatToConfig + ' ' + $CurDate + $CurTime + '.txt')

    $DebugStr | Out-File -FilePath ($DebugPath + $DebugFileName) -Encoding 'utf8'
    If (!($?)) {
        $DebugStr | Out-File -FilePath ($env:TEMP + '\' + $DebugFileName) -Encoding 'utf8'
    }
}
#endregion Debug