<#
.SYNOPSIS
    <Short, what it does>


.DESCRIPTION
    <Long, what it does>


.OUTPUTS
    <What it outputs during runtime>


Usage:


Todo:


Resources:
- Base64Encode.org (https://www.base64encode.org/) for Base64 encoding of the files

#>


#region Variables
# Settings
[bool] $DebugWinTemp = $false
[bool] $DebugConsole = $true
[bool] $ReadOnly = $false
If ($DebugWinTemp) {[String] $Global:DebugStr=[String]::Empty}

# Script specific variables
[String] $WhatToConfig = 'Install IronTrigger'
[String] $Script:ScheduledTaskName = 'IronTrigger'

# Files
#region Files
# Enable-BitLockerTrigger.PS1
#region FilePS1
[String] $Local:NamePS1 = 'Enable_BitLocker.ps1'
[String] $Local:FilePS1 = ('')
#endregion FilePS1

# Enable-BitLockerTrigger.VBS
#region FileVBS
[String] $Local:NameVBS = 'Enable_BitLocker.vbs'
[String] $Local:FileVBS = ('U2V0IG9ialNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXc2NyaXB0LlNoZWxsIikgIA0KU2V0IGFyZ3MgPSBXc2NyaXB0LkFyZ3VtZW50cyAgDQpGb3IgRWFjaCBhcmcgSW4gYXJncyAgDQogICAgRGltIFBTUnVuDQogICAgUFNSdW4gPSAicG93ZXJzaGVsbC5leGUgLVdpbmRvd1N0eWxlIGhpZGRlbiAtRXhlY3V0aW9uUG9saWN5IGJ5cGFzcyAtTm9uSW50ZXJhY3RpdmUgLUZpbGUgIiIiICYgYXJnICYgIiIiIg0KICAgIG9ialNoZWxsLlJ1bihQU1J1biksMA0KTmV4dA==')
#endregion FileVBS
    
# Enable-BitLockerTrigger.XML
#region FileXML
[String] $Local:NameXML = 'Enable_BitLocker.xml'
[String] $Local:FileXML = ('PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTE2Ij8+CjxUYXNrIHZlcnNpb249IjEuNCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZG93cy8yMDA0LzAyL21pdC90YXNrIj4KICA8UmVnaXN0cmF0aW9uSW5mbz4KICAgIDxEYXRlPjIwMTgtMDEtMDFUMTQ6MDA6MDA8L0RhdGU+CiAgICA8QXV0aG9yPklyb25zdG9uZTwvQXV0aG9yPgogICAgPFVSST5cSXJvblRyaWdnZXI8L1VSST4KICA8L1JlZ2lzdHJhdGlvbkluZm8+CiAgPFRyaWdnZXJzPgogICAgPFRpbWVUcmlnZ2VyPgogICAgICA8UmVwZXRpdGlvbj4KICAgICAgICA8SW50ZXJ2YWw+UFQxNU08L0ludGVydmFsPgogICAgICAgIDxTdG9wQXREdXJhdGlvbkVuZD5mYWxzZTwvU3RvcEF0RHVyYXRpb25FbmQ+CiAgICAgIDwvUmVwZXRpdGlvbj4KICAgICAgPFN0YXJ0Qm91bmRhcnk+MjAxOC0wMS0wMVQwMDowMDowMDwvU3RhcnRCb3VuZGFyeT4KICAgICAgPEVuYWJsZWQ+dHJ1ZTwvRW5hYmxlZD4KICAgIDwvVGltZVRyaWdnZXI+CiAgPC9UcmlnZ2Vycz4KICA8UHJpbmNpcGFscz4KICAgIDxQcmluY2lwYWwgaWQ9IkF1dGhvciI+CiAgICAgIDxHcm91cElkPlMtMS01LTMyLTU0NTwvR3JvdXBJZD4KICAgICAgPFJ1bkxldmVsPkhpZ2hlc3RBdmFpbGFibGU8L1J1bkxldmVsPgogICAgPC9QcmluY2lwYWw+CiAgPC9QcmluY2lwYWxzPgogIDxTZXR0aW5ncz4KICAgIDxNdWx0aXBsZUluc3RhbmNlc1BvbGljeT5JZ25vcmVOZXc8L011bHRpcGxlSW5zdGFuY2VzUG9saWN5PgogICAgPERpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPmZhbHNlPC9EaXNhbGxvd1N0YXJ0SWZPbkJhdHRlcmllcz4KICAgIDxTdG9wSWZHb2luZ09uQmF0dGVyaWVzPmZhbHNlPC9TdG9wSWZHb2luZ09uQmF0dGVyaWVzPgogICAgPEFsbG93SGFyZFRlcm1pbmF0ZT50cnVlPC9BbGxvd0hhcmRUZXJtaW5hdGU+CiAgICA8U3RhcnRXaGVuQXZhaWxhYmxlPnRydWU8L1N0YXJ0V2hlbkF2YWlsYWJsZT4KICAgIDxSdW5Pbmx5SWZOZXR3b3JrQXZhaWxhYmxlPmZhbHNlPC9SdW5Pbmx5SWZOZXR3b3JrQXZhaWxhYmxlPgogICAgPElkbGVTZXR0aW5ncz4KICAgICAgPFN0b3BPbklkbGVFbmQ+dHJ1ZTwvU3RvcE9uSWRsZUVuZD4KICAgICAgPFJlc3RhcnRPbklkbGU+ZmFsc2U8L1Jlc3RhcnRPbklkbGU+CiAgICA8L0lkbGVTZXR0aW5ncz4KICAgIDxBbGxvd1N0YXJ0T25EZW1hbmQ+dHJ1ZTwvQWxsb3dTdGFydE9uRGVtYW5kPgogICAgPEVuYWJsZWQ+dHJ1ZTwvRW5hYmxlZD4KICAgIDxIaWRkZW4+ZmFsc2U8L0hpZGRlbj4KICAgIDxSdW5Pbmx5SWZJZGxlPmZhbHNlPC9SdW5Pbmx5SWZJZGxlPgogICAgPERpc2FsbG93U3RhcnRPblJlbW90ZUFwcFNlc3Npb24+ZmFsc2U8L0Rpc2FsbG93U3RhcnRPblJlbW90ZUFwcFNlc3Npb24+CiAgICA8VXNlVW5pZmllZFNjaGVkdWxpbmdFbmdpbmU+dHJ1ZTwvVXNlVW5pZmllZFNjaGVkdWxpbmdFbmdpbmU+CiAgICA8V2FrZVRvUnVuPmZhbHNlPC9XYWtlVG9SdW4+CiAgICA8RXhlY3V0aW9uVGltZUxpbWl0PlBUMUg8L0V4ZWN1dGlvblRpbWVMaW1pdD4KICAgIDxQcmlvcml0eT43PC9Qcmlvcml0eT4KICA8L1NldHRpbmdzPgogIDxBY3Rpb25zIENvbnRleHQ9IkF1dGhvciI+CiAgICA8RXhlYz4KICAgICAgPENvbW1hbmQ+d3NjcmlwdC5leGU8L0NvbW1hbmQ+CiAgICAgIDxBcmd1bWVudHM+IkM6XFByb2dyYW0gRmlsZXMgKHg4NilcSXJvblRyaWdnZXJcRW5hYmxlX0JpdExvY2tlci52YnMiICJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXElyb25UcmlnZ2VyXEVuYWJsZV9CaXRMb2NrZXIucHMxIjwvQXJndW1lbnRzPgogICAgPC9FeGVjPgogIDwvQWN0aW9ucz4KPC9UYXNrPg==')
#endregion FileXML
#enregion Files
#endregion Variables



#region Functions
    #region Write-DebugIfOn
    Function Write-DebugIfOn {
        param(
            [Parameter(Mandatory=$true, Position=0)]
            [String] $In
        )
        If ($DebugConsole) {
            Write-Output -InputObject $In
        }
        If ($DebugWinTemp) {
            $Global:DebugStr += ($In + "`r`n")
        }
    }
    #endregion Write-DebugIfOn


    #region Check-CreateDir
    Function Check-CreateDir {
        Param(
            [Parameter(Mandatory=$true, Position=0)]
            [String] $Dir
        )
        Write-DebugIfOn -In ('Check-CreateDir -Dir ' + $Dir)
        If (!(Test-Path $Dir)) {
                Write-DebugIfOn -In '   Reg dir does not exist, trying to create'
                If(!($ReadOnly)) {
                    $null = New-Item -ItemType Directory -Force -Path $Dir 2>&1
                    If (!($?)) {
                        Write-DebugIfOn -In '      ERROR: Dir could not be created'
                    }
                    Else {
                        Write-DebugIfOn -In '      SUCCESS: Dir was created'
                    }
                }
                Else {Write-DebugIfOn -In '      ReadOnly mode'}
            } 
        Else {
            Write-DebugIfOn -In '   Reg dir does already exist'
        } 
    }
    #endregion Check-CreateDir


    #region FileOut-FromBase64
    Function FileOut-FromBase64 {
        Param(
            [Parameter(Mandatory=$true)]
            [String] $InstallDir, $FileName, $File, $Encoding
        )
        Write-DebugIfOn -In ('FileOut-FromBase64 -FilePath ' + $InstallDir + ' -FileName ' + $FileName + ' -File ' + ($File.Substring(0,10) + '...'))
        $Local:FilePath = $InstallDir + $FileName

        If (Test-Path $InstallDir) {
            Write-DebugIfOn -In ('   Path exists, trying to write the file (File alrady exists? {0})' -f (Test-Path $Local:FilePath))
            If (-not($ReadOnly)) {
                Out-File -FilePath $Local:FilePath -Encoding $Encoding -InputObject ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($File)))
                Write-DebugIfOn -In ('      Success? {0}' -f ($?))
                Write-DebugIfOn -In ('         Does file actually exist? {0}' -f (Test-Path $Local:FilePath -ErrorAction SilentlyContinue))
            }
        }
        Else {
            Write-DebugIfOn -In ('   ERROR: Path does not exist')
        }
    }
    #enregion FileOut-FromBase64


    #region Query-Registry
    Function Query-Registry {
        Param ([Parameter(Mandatory=$true)] [String] $Dir)
        $Local:Out = [String]::Empty
        [String] $Local:Key = $Dir.Split('{\}')[-1]
        [String] $Local:Dir = $Dir.Replace($Local:Key,'')
        
        $Local:Exists = Get-ItemProperty -Path ('{0}' -f $Dir) -Name ('{0}' -f $Local:Key) -ErrorAction SilentlyContinue
        If ($Exists) {
            $Local:Out = $Local:Exists.$Local:Key
        }
        return $Local:Out
    }
    #endregion Query-Registry


    #region Get-MachineInfo
    Function Get-MachineInfo {
        $Script:ComputerName = $env:COMPUTERNAME
        [String] $Script:ComputerManufacturer = Query-Registry -Dir 'HKLM:\HARDWARE\DESCRIPTION\System\BIOS\SystemManufacturer'
        If (-not([String]::IsNullOrEmpty($Script:ComputerManufacturer))) {
            [String] $Script:ComputerFamily = Query-Registry -Dir 'HKLM:\HARDWARE\DESCRIPTION\System\BIOS\SystemFamily'
            [String] $Script:ComputerProductName = Query-Registry -Dir 'HKLM:\HARDWARE\DESCRIPTION\System\BIOS\SystemProductName'
            [String] $Script:WindowsEdition = Query-Registry -Dir 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName'
            [String] $Script:WindowsVersion = Query-Registry -Dir 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ReleaseId'
            [String] $Script:WindowsVersion += (' ({0})' -f (Query-Registry -Dir 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentBuild'))
        } 
        Else {
            $Local:EnvInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -Property Manufacturer,Model,SystemFamily        
            [String] $Script:ComputerManufacturer = $Local:EnvInfo.Manufacturer
            [String] $Script:ComputerFamily = $Local:EnvInfo.SystemFamily
            [String] $Script:ComputerProductName = $Local:EnvInfo.Model
            $Local:OSInfo = Get-WmiObject -Class win32_operatingsystem | Select-Object -Property Caption,Version
            [String] $Script:WindowsEdition = $Local:OSInfo.Caption
            [String] $Script:WindowsVersion = $Local:OSInfo.Version
        }
    }
    #endregion Get-MachineInfo
#enregion Functions



#region Initialize
Get-MachineInfo
If ($DebugWinTemp -or $DebugConsole) {
    Write-DebugIfOn -In '### Environment Info'
    Write-DebugIfOn -In ('Script settings: DebugConsole = "{0}", DebugWinTemp = "{1}", ReadOnly = "{2}"' -f ($DebugConsole,$DebugWinTemp,$Script:ReadOnly))
    Write-DebugIfOn -In ('Machine info: Name = "{0}", Manufacturer = "{1}", Family = "{2}", Model = "{3}"' -f ($Script:ComputerName,$Script:ComputerManufacturer,$Script:ComputerFamily,$Script:ComputerProductName))
    Write-DebugIfOn -In ('Windows info: Edition = "{0}", Version = "{1}"' -f ($Script:WindowsEdition,$Script:WindowsVersion))
}
#endregion Initialize



#region Main
    Write-DebugIfOn -In ("`r`n`r`n" + '### ' + $WhatToConfig)

    [String] $Local:InstallDir = (${env:ProgramFiles(x86)} + '\IronTrigger\')


    ###########################################################
    ### 1. Clean up BitLockerTrigger and IronTrigger
    Write-DebugIfOn -In ("`r`n`r`n" + '# 1. Clean up previous installations')
    # Paths
    Write-DebugIfOn -In ('Remove previous install path(s) if present')
    [String[]] $Local:RemPaths = @($Local:InstallDir,(${env:ProgramFiles(x86)} + '\BitLockerTrigger\'))
    $Local:RemPaths | ForEach-Object {
        Write-DebugIfOn -In ('   Removing "{0}" if it exists.' -f ($_))
        If (Test-Path -Path ('"{0}"' -f ($_))) {
            Remove-Item -Path ('"{0}"' -f ($_)) -Force -Recurse
            Write-DebugIfOn -In ('      File does exist. Removing. Success? .' -f ($?))
        }
        Else {
            Write-DebugIfOn -In ('      File does not exist')
        }
    }
    # Stats and Logs
    Write-DebugIfOn -In ('Remove previous files, stats and logs')
    [String[]] $Local:RemItems = @(($env:windir + '\Temp\BitLockerTrigger.log'),($env:windir + '\Temp\IronTrigger.log'))
    $Local:RemItems | ForEach-Object { 
        Write-DebugIfOn -In ('   Removing "{0}" if it exists.' -f ($_))
        If (Test-Path -Path ('"{0}"' -f ($_))) {
            Remove-Item -Path ('"{0}"' -f ($_)) -Force
            Write-DebugIfOn -In ('      File does exist. Removing. Success? .' -f ($?))
        }
        Else {
            Write-DebugIfOn -In ('      File does not exist')
        }     
    }
    # Scheduled tasks
    Write-DebugIfOn -In ('Remove previous ScheduledTask(s)')
    $Local:ScheduledTasks = Get-ScheduledTask | Where-Object {$_.TaskName -like $Script:ScheduledTaskName -or $_.TaskName -like '*Trigger'}
    If ($Local:ScheduledTasks.length -gt 0) {
        $Local:Tasks | ForEach-Object {             
            $null = Unregister-ScheduledTask -TaskName $_.TaskName -Confirm:$false -ErrorAction SilentlyContinue
            Write-DebugIfOn -In ('  Removing the Scheduled task "{0}". Success? {1}' -f ($_.TaskName,$?))
        }
    }
    Else {
        If (Get-ScheduledTask -TaskName $Script:ScheduledTaskName -ErrorAction SilentlyContinue) {            
            $null = Unregister-ScheduledTask -TaskName $Script:ScheduledTaskName -Confirm:$false -ErrorAction SilentlyContinue
            Write-DebugIfOn -In ('  Removing the Scheduled task "{0}". Success? {1}' -f ($Script:ScheduledTaskName,$?))
        }
        Else {
            Write-DebugIfOn -In ('  Scheduled task "{0}" does not exist.' -f ($Script:ScheduledTaskName))
        }
    }



    ###########################################################
    ### 2. Create install dir
    Write-DebugIfOn -In ("`r`n`r`n" + '# 2. Create "{0}"' -f ($Local:InstallDir))
    Check-CreateDir -Dir $InstallDir
    

    ###########################################################
    ### 3. Import files
    Write-DebugIfOn -In ("`r`n`r`n" + '# 3. Import files to "{0}"' -f ($Local:InstallDir))
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NamePS1 -File $Local:FilePS1 -Encoding utf8
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NameVBS -File $Local:FileVBS -Encoding default
    FileOut-FromBase64 -InstallDir $Local:InstallDir -FileName $Local:NameXML -File $Local:FileXML -Encoding utf8


    ###########################################################
    ### 4. Create ScheduledTask from XML
    Write-DebugIfOn -In ("`r`n`r`n" + '# 4. Create Scheduled Task "{0}"' -f ($Script:ScheduledTaskName))
    Write-DebugIfOn -In ('Register-ScheduledTask -Xml (Get-Content "{0}" | Out-String) -TaskName "{1}" -Force' -f (($Local:InstallDir + $Local:NameXML),$Script:ScheduledTaskName))
    $null = Register-ScheduledTask -Xml (Get-Content ($Local:InstallDir + $Local:NameXML) | Out-String) -TaskName $Script:ScheduledTaskName -Force
    Write-DebugIfOn -In ('   Success? {0}' -f ($?))


    Write-DebugIfOn -In 'Done.'    
#endregion Main



#region Debug
If ($DebugWinTemp) {
    If ([String]::IsNullOrEmpty($DebugStr)) {
        $DebugStr = 'Everything failed'
    }

    # Write Output
    $DebugPath = 'C:\Windows\Temp\'
    $CurDate = Get-Date -Uformat '%y%m%d'
    $CurTime = Get-Date -Format 'HHmmss'
    $DebugFileName = ('Debug Powershell ' + $WhatToConfig + ' ' + $CurDate + $CurTime + '.txt')

    $DebugStr | Out-File -FilePath ($DebugPath + $DebugFileName) -Encoding 'utf8'
    If (!($?)) {
        $DebugStr | Out-File -FilePath ($env:TEMP + '\' + $DebugFileName) -Encoding 'utf8'
    }
}
#endregion Debug