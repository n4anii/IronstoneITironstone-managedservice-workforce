#Requires -RunAsAdministrator
<#
    .SYNOPSIS
        Installs PowerShell script "Enable_BitLocker.ps1", creates Scheduled Task that runs it.

    .DESCRIPTION
        Installs PowerShell script "Enable_BitLocker.ps1", creates Scheduled Task that runs it.
    
        How to
            Convert Enable_BitLocker.ps1 to Base64
                * https://www.base64encode.org/
                    * Destination charset: UTF8
                    * Newline separator: LF (Linux)

    .NOTES
        * In Intune, remember to set "Run this script using the logged in credentials"  according to the $DeviceContext variable.
            * Intune -> Device Configuration -> PowerShell Scripts -> $NameScriptFull -> Properties -> "Run this script using the logged in credentials"
            * DEVICE (Local System) or USER (Logged in user).
        * Only edit $NameScript and add your code in the #region Your Code Here.
        * You might want to touch "Settings - PowerShell - Output Preferences" for testing / development. 
            * $VerbosePreference, eventually $DebugPreference, to 'Continue' will print much more details.
#>


# Script Variables
$NameScript            = [string] 'Install-IronTrigger'
$DeviceContext         = [bool]   $true
$WriteToHKCUFromSystem = [bool]   $true

# Settings - PowerShell - Output Preferences
$DebugPreference       = 'SilentlyContinue'
$VerbosePreference     = 'SilentlyContinue'
$WarningPreference     = 'Continue'

#region    Don't Touch This
# Settings - PowerShell - Interaction
$ConfirmPreference     = 'None'
$InformationPreference = 'SilentlyContinue'
$ProgressPreference    = 'SilentlyContinue'

# Settings - PowerShell - Behaviour
$ErrorActionPreference = 'Continue'

# Dynamic Variables - Process & Environment
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'NameScriptFull' -Value ([string]('{0}_{1}' -f ($(if($DeviceContext){'Device'}else{'User'}),$NameScript)))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'NameScriptVerb' -Value ([string]$NameScript.Split('-')[0])
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'NameScriptNoun' -Value ([string]$NameScript.Split('-')[-1])
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrArchitectureProcess' -Value ([string]$(if([System.Environment]::Is64BitProcess){'64'}else{'32'}))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrArchitectureOS' -Value ([string]$(if([System.Environment]::Is64BitOperatingSystem){'64'}else{'32'}))

# Dynamic Variables - User
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrUserNameRunningAs' -Value ([string]$([System.Security.Principal.WindowsIdentity]::GetCurrent().'Name'))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrSIDRunningAs' -Value ([string]$([System.Security.Principal.WindowsIdentity]::GetCurrent().'User'.'Value'))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'BoolIsAdmin'  -Value ([bool]$(([System.Security.Principal.WindowsPrincipal]$([System.Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'BoolIsSystem' -Value ([bool]$($Script:StrSIDRunningAs -like ([string]$('S-1-5-18'))))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'BoolIsCorrectUser' -Value ([bool]$(if($Script:DeviceContext -and $Script:BoolIsSystem){$true}elseif(((-not($DeviceContext))) -and (-not($Script:BoolIsSystem))){$true}else{$false}))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'BoolWriteToHKCUFromSystem' -Value ([bool]$(if($DeviceContext -and $WriteToHKCUFromSystem){$true}else{$false}))

# Dynamic Variables - Logging
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'Timestamp' -Value ([string]$([datetime]::Now.ToString('yyMMdd-HHmmssffff')))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'PathDirLog' -Value ([string]$('{0}\IronstoneIT\Intune\DeviceConfiguration\' -f ([string]$(if($BoolIsSystem){$env:ProgramW6432}else{[System.Environment]::GetEnvironmentVariable('LocalAppData')}))))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'PathFileLog' -Value ([string]$('{0}{1}-{2}bit-{3}.txt' -f ($Script:PathDirLog,$Script:NameScriptFull,$Script:StrArchitectureProcess,$Script:Timestamp)))
$null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'ScriptSuccess' -Value ([bool]$($true))

# Start Transcript
if (-not(Test-Path -Path $Script:PathDirLog)) {$null = New-Item -ItemType 'Directory' -Path $Script:PathDirLog -ErrorAction 'Stop'}
Start-Transcript -Path $Script:PathFileLog -ErrorAction 'Stop'


# Wrap in Try/Catch, so we can always end the transcript
Try {
    # Output User Info, Exit if not $BoolIsCorrectUser
    Write-Output -InputObject ('Running as user "{0}" ({1}). Has admin privileges? {2}. $DeviceContext? {3}. Running as correct user? {4}.' -f ($Script:StrUserNameRunningAs,$Script:StrSIDRunningAs,$Script:BoolIsAdmin.ToString(),$Script:DeviceContext.ToString(),$Script:BoolIsCorrectUser.ToString()))
    if (-not($Script:BoolIsCorrectUser)){Throw 'Not running as correct user!'; Break}


    # Output Process and OS Architecture Info
    Write-Output -InputObject ('PowerShell is running as a {0} bit process on a {1} bit OS.' -f ($Script:StrArchitectureProcess,$Script:StrArchitectureOS))


    # If OS is 64 bit, and PowerShell got launched as x86, relaunch as x64
    if ([System.Environment]::Is64BitOperatingSystem -and -not [System.Environment]::Is64BitProcess) {
        write-Output -InputObject (' * Will restart this PowerShell session as x64.')
        if (-not([string]::IsNullOrEmpty($MyInvocation.'Line'))) {& ('{0}\sysnative\WindowsPowerShell\v1.0\powershell.exe' -f ($env:windir)) -NonInteractive -NoProfile $MyInvocation.'Line'}
        else {& ('{0}\sysnative\WindowsPowerShell\v1.0\powershell.exe' -f ($env:windir)) -NonInteractive -NoProfile -File ('{0}' -f ($MyInvocation.'InvocationName')) $args}
        exit $LASTEXITCODE
    }

    
    #region    Get SID and "Domain\Username" for Intune User only if $WriteToHKCUFromSystem
        # If running in Device Context as "NT Authority\System"
        if ($DeviceContext -and $Script:BoolIsSystem -and $BoolWriteToHKCUFromSystem) {
            # Help Variables
            $Script:RegistryLoadedProfiles = [string[]]@()
            $Local:SID                     = [string]::Empty
            $Local:LengthInterval          = [byte[]]@(40 .. 80)


            # Load User Profiles NTUSER.DAT (Registry) that is not available from current context
            $PathProfileList = [string]('Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList')
            $SIDsProfileList = [string[]]($([string[]](Get-ChildItem -Path $PathProfileList -Recurse:$false).'Name').ForEach{$_.Split('\')[-1]}.Where{$_ -like 'S-1-12-*'})
            foreach ($SID in $SIDsProfileList) {
                if (Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($SID)) -ErrorAction 'SilentlyContinue') {
                    Write-Output -InputObject ('User with SID "{0}" is already logged in and/or NTUSER.DAT is loaded.' -f ($SID))
                }
                else {
                    Write-Output -InputObject ('User with SID "{0}" is not logged in, thus NTUSER.DAT is not loaded into registry.' -f ($SID))
                    
                    # Get User Directory
                    $PathUserDirectory = [string]$(Get-ItemProperty -Path ('{0}\{1}' -f ($PathProfileList,$SID)) -Name 'ProfileImagePath' | Select-Object -ExpandProperty 'ProfileImagePath')
                    if ([string]::IsNullOrEmpty($PathUserDirectory)) {
                        Throw ('ERROR: No User Directory was found for user with SID "{0}".' -f ($SID))
                    }

                    # Get User Registry File, NTUSER.DAT
                    $PathFileUserRegistry = ('{0}\NTUSER.DAT' -f ($PathUserDirectory))
                    if (-not(Test-Path -Path $PathFileUserRegistry)) {
                        Throw ('ERROR: "{0}" does not exist.' -f ($PathFileUserRegistry))
                    }

                    # Load NTUSER.DAT
                    $null = Start-Process -FilePath ('{0}\reg.exe' -f ([string]([system.environment]::SystemDirectory))) -ArgumentList ('LOAD "HKEY_USERS\{0}" "{1}"' -f ($SID,$PathFileUserRegistry)) -WindowStyle 'Hidden' -Wait
                    if (Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($SID))) {
                        Write-Output -InputObject ('{0}Successfully loaded "{1}".' -f ("`t",$PathFileUserRegistry))
                        $RegistryLoadedProfiles += @($SID)
                    }
                    else {
                        Throw ('ERROR: Failed to load registry hive for SID "{0}", NTUSER.DAT location "{1}".' -f ($SID,$PathFileUserRegistry))
                    }
                }
            }


            # Get Intune User Information from Registry
            $IntuneUser = [PSCustomObject]([PSCustomObject[]]@(
                foreach ($x in [string[]]@(Get-ChildItem -Path 'Registry::HKEY_USERS' -Recurse:$false -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'Name' | ForEach-Object {$_.Split('\')[-1]} | Where-Object {[bool]$($_ -like 'S-1-12-*') -and [bool]$(Test-Path -Path ('Registry::HKEY_USERS\{0}\Software\IronstoneIT\Intune\UserInfo' -f ($_)))})) {
                    [PSCustomObject]@{
                        'IntuneUserSID' =[string](Get-ItemProperty -Path ('Registry::HKEY_USERS\{0}\Software\IronstoneIT\Intune\UserInfo' -f ($x)) -Name 'IntuneUserSID' -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'IntuneUserSID');
                        'IntuneUserName'=[string](Get-ItemProperty -Path ('Registry::HKEY_USERS\{0}\Software\IronstoneIT\Intune\UserInfo' -f ($x)) -Name 'IntuneUserName' -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'IntuneUserName');
                        'DateSet'       =Try{[datetime](Get-ItemProperty -Path ('Registry::HKEY_USERS\{0}\Software\IronstoneIT\Intune\UserInfo' -f ($x)) -Name 'DateSet' -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'DateSet')}Catch{[datetime]::MinValue};
                    }
                }).Where{-not([string]::IsNullOrEmpty($_.'IntuneUserSID') -or [string]::IsNullOrEmpty($_.'IntuneUserName'))} | Sort-Object -Property 'DateSet' -Descending:$false | Select-Object -Last 1
            )


            # Get Intune User SID
            $null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrIntuneUserSID' -Value (
                [string]$(
                    $Local:SID = [string]::Empty
                    # Try by registry values in HKEY_CURRENT_USER\Software\IronstoneIT\Intune\UserInfo
                    if (-not([string]::IsNullOrEmpty([string]($IntuneUser | Select-Object -ExpandProperty 'IntuneUserSID')))) {
                        $Local:SID = [string]($IntuneUser | Select-Object -ExpandProperty 'IntuneUserSID')
                    }

                    # If no valid SID yet, try Registry::HKEY_USERS
                    if ([string]::IsNullOrEmpty($Local:SID) -or (-not($Local:LengthInterval.Contains([byte]$Local:SID.'Length'))) -or (-not(Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($Local:SID)) -ErrorAction 'SilentlyContinue'))) {
                        # Get all potential SIDs from Registry::HKEY_USERS
                        $Local:SIDsFromRegistryAll = [string[]]@(Get-ChildItem -Path 'Registry::HKEY_USERS' -Recurse:$false -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'Name' | ForEach-Object {$_.Split('\')[-1]} | Where-Object {$_ -like 'S-1-12-*' -and $_ -notlike '*_Classes' -and $Local:LengthInterval.Contains([byte]$_.'Length')})
                        $Local:SID = [string]$(
                            # If none where found - Return emtpy string: Finding SID by registry will not be possible
                            if (@($Local:SIDsFromRegistryAll).'Count' -le 0) {
                                [string]::Empty
                            }
                            # If only one where found - Return it
                            elseif (@($Local:SIDsFromRegistryAll).'Count' -eq 1) {
                                [string]([string[]]@($Local:SIDsFromRegistryAll | Select-Object -First 1))
                            }
                            # If multiple where found - Try to filter out unwanted SIDs
                            else {
                                # Try to get all where IronstoneIT folder exist withing HKU (HKCU) registry
                                $Local:SIDs = [string[]]@($([string[]]@($Local:SIDsFromRegistryAll)).Where{Test-Path -Path ('Registry::HKEY_USERS\{0}\Software\IronstoneIT' -f ($_))})
                                # If none or more than 1 where found - Try getting only SIDs with AAD joined info in HKU (HKCU) registry
                                if (@($Local:SIDs).'Count' -le 0 -or @($Local:SIDs).'Count' -ge 2) {
                                    $Local:SIDs = [string[]]@($([string[]]@($Local:SIDsFromRegistryAll)).Where{Test-Path -Path ('Registry::HKEY_USERS\{0}\Software\Microsoft\Windows NT\CurrentVersion\WorkplaceJoin\AADNGC' -f ($_))})
                                }
                                # If none or more than 1 where found - Try matching Tenant ID for AAD joined HKLM with Tenant ID for AAD joined HKU (HKCU)
                                if (@($Local:SIDs).'Count' -le 0 -or @($Local:SIDs).'Count' -ge 2) {
                                    if (-not([string]::IsNullOrEmpty(($Local:TenantGUIDFromHKLM = [string]$($x='Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CloudDomainJoin\JoinInfo'; Get-ItemProperty -Path ('{0}\{1}' -f ($x,[string](Get-ChildItem -Path $x -Recurse:$false -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'Name' | ForEach-Object {$_.Split('\')[-1]}))) -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'TenantId'))))) {
                                        $Local:SIDs = [string[]]@($([string[]]@($Local:SIDsFromRegistryAll)).Where{$Local:TenantGUIDFromHKLM -eq ([string]$($x=[string]('Registry::HKEY_USERS\{0}\Software\Microsoft\Windows NT\CurrentVersion\WorkplaceJoin\AADNGC' -f ($_)); Get-ItemProperty -Path ('{0}\{1}' -f ($x,([string](Get-ChildItem -Path $x -Recurse:$false -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'Name' | ForEach-Object {$_.Split('\')[-1]})))) -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'TenantDomain'))})
                                    }
                                }
                                if(@($Local:SIDs).'Count' -eq 1){
                                    [string]([string[]]@($Local:SIDs | Select-Object -First 1))
                                }
                                else{
                                    [string]::Empty
                                }
                            }
                        )
                    }

                    # If no valid SID yet, try by running process "Explorer"
                    if ([string]::IsNullOrEmpty($Local:SID) -or (-not($Local:LengthInterval.Contains([byte]$Local:SID.'Length'))) -or (-not(Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($Local:SID)) -ErrorAction 'SilentlyContinue'))) {
                        $Local:SID = [string]$(
                            $Local:UN = [string]([string[]]@(Get-WmiObject -Class 'Win32_Process' -Filter "Name='Explorer.exe'" -ErrorAction 'SilentlyContinue' | ForEach-Object {$($Owner = $_.GetOwner();if($Owner.'ReturnValue' -eq 0 -and $Owner.'Domain' -notlike 'nt *' -and $Owner.'Domain' -notlike 'nt-*'){('{0}\{1}' -f ($Owner.'Domain',$Owner.'User'))})}) | Select-Object -Unique -First 1)
                            if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3) {
                                $Local:UN = [string]([string[]]@(Get-Process -Name 'explorer' -IncludeUserName -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'UserName' | Where-Object {$_ -notlike 'nt *' -and $_ -notlike 'nt-*'}) | Select-Object -Unique -First 1)
                            }
                            if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3) {
                                [string]::Empty
                            }
                            else {
                                Try{
                                    $Local:SID = [string]$([System.Security.Principal.NTAccount]::new($Local:UN).Translate([System.Security.Principal.SecurityIdentifier]).'Value')
                                    if ([string]::IsNullOrEmpty($Local:SID) -or (-not($Local:LengthInterval.Contains([byte]$Local:SID.'Length'))) -or (-not(Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($Local:SID)) -ErrorAction 'SilentlyContinue'))) {
                                        [string]::Empty
                                    }
                                    else {
                                        $Local:SID
                                    }
                                }
                                catch{
                                    [string]::Empty
                                }
                            }
                        )
                    }
                
                    # If no valid SID yet, throw error
                    if ([string]::IsNullOrEmpty($Local:SID) -or (-not($Local:LengthInterval.Contains([byte]$Local:SID.'Length'))) -or (-not(Test-Path -Path ('Registry::HKEY_USERS\{0}' -f ($Local:SID)) -ErrorAction 'SilentlyContinue'))) {
                        Throw 'ERROR: Did not manage to get Intune user SID from SYSTEM context'
                    }

                    # If valid SID, return it
                    else {
                        $Local:SID
                    }         
                )
            )
        

            # Get Intune User Domain\UserName
            $null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrIntuneUserName' -Value (
                [string]$(
                    # Help Variables
                    $Local:UN = [string]::Empty

                    # Try by registry values in HKEY_CURRENT_USER\Software\IronstoneIT\Intune\UserInfo
                    if (-not([string]::IsNullOrEmpty($IntuneUser.'IntuneUserName'))) {
                        $Local:UN = [string]($IntuneUser.'IntuneUserName')
                    }
                
                    # If no valid UN yet, try by convert $Script:StrIntuneUserSID to "Domain\Username"
                    if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3 -and (-not([string]::IsNullOrEmpty($Script:StrIntuneUserSID)))) {
                        $Local:UN = [string]$(Try{[System.Security.Principal.SecurityIdentifier]::new($Script:StrIntuneUserSID).Translate([System.Security.Principal.NTAccount]).'Value'}Catch{[string]::Empty})
                    }

                    # If no valid UN yet, try by Registry::HKEY_USERS\$Script:StrIntuneUserSID\Volatile Environment
                    if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3-and (-not([string]::IsNullOrEmpty($Script:StrIntuneUserSID)))) {
                        $Local:UN = [string]$(Try{$Local:x = Get-ItemProperty -Path ('Registry::HKEY_USERS\{0}\Volatile Environment' -f ($Script:StrIntuneUserSID)) -Name 'USERDOMAIN','USERNAME' -ErrorAction 'SilentlyContinue';('{0}\{1}' -f ([string]($Local:x | Select-Object -ExpandProperty 'USERDOMAIN'),[string]($Local:x | Select-Object -ExpandProperty 'USERNAME')))}Catch{[string]::Empty})
                    }
                
                    # If no valid UN yet, try by running process Explorer.exe - Method 1
                    if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3) {
                        $Local:UN = [string]([string[]]@(Get-WmiObject -Class 'Win32_Process' -Filter "Name='Explorer.exe'" -ErrorAction 'SilentlyContinue' | ForEach-Object -Process {$($Owner = $_.GetOwner();if($Owner.'ReturnValue' -eq 0 -and $Owner.'Domain' -notlike 'nt *' -and $Owner.'Domain' -notlike 'nt-*'){('{0}\{1}' -f ($Owner.'Domain',$Owner.'User'))})}) | Select-Object -Unique -First 1)
                    }
                
                    # If no valid UN yet, try by running process Explorer.exe - Method 2
                    if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3) {
                        $Local:UN = [string]([string[]]@(Get-Process -Name 'explorer' -IncludeUserName -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'UserName' | Where-Object -FilterScript {$_ -notlike 'nt *' -and $_ -notlike 'nt-*'}) | Select-Object -Unique -First 1)
                    }                   

                    # If no valid UN yet, throw Error
                    if ([string]::IsNullOrEmpty($Local:UN) -or $Local:UN.'Length' -lt 3) {
                        Throw 'ERROR: Did not manage to get "Domain"\"UserName" for Intune User.'
                    }

                    # If valid UN, return it
                    else {
                        $Local:UN
                    }
                )
            )
        }
        

        # If running in User Context / Not running as "NT Authority\System"
        elseif ((-not($DeviceContext)) -and (-not($Script:BoolIsSystem))) {
            $null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrIntuneUserSID' -Value ([string]([System.Security.Principal.WindowsIdentity]::GetCurrent().'User'.'Value'))
            $null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrIntuneUserName' -Value ([string]([System.Security.Principal.WindowsIdentity]::GetCurrent().'Name'))
            $null = New-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'StrIntuneUserPrincipalName' -Value ([string]$(Try{$O=&('{0}\whoami.exe'-f([System.Environment]::GetFolderPath('System')))'/upn';if($?){$O}else{''}}Catch{''}))

            #region    Write SID, UserName and UserPrincipalName to HKCU if running in User Context
                # Assets
                $Local:RegPath   = [string]('Registry::HKEY_CURRENT_USER\Software\IronstoneIT\Intune\UserInfo')
                $Local:RegNames  = [string[]]@('IntuneUserSID','IntuneUserName','IntuneUserPrincipalName','DateSet')
                $Local:RegValues = [string[]]@($Script:StrIntuneUserSID,$Script:StrIntuneUserName,$Script:StrIntuneUserPrincipalName,[string]([datetime]::Now.ToString('o')))

                # Get Current Info
                $Local:CurrentUserSID           = [string](Get-ItemProperty -Path $Local:RegPath -Name $Local:RegNames[0] -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty $Local:RegNames[0] -ErrorAction 'SilentlyContinue')
                $Local:CurrentUserName          = [string](Get-ItemProperty -Path $Local:RegPath -Name $Local:RegNames[1] -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty $Local:RegNames[1] -ErrorAction 'SilentlyContinue')
                $Local:CurrentUserPrincipalName = [string](Get-ItemProperty -Path $Local:RegPath -Name $Local:RegNames[2] -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty $Local:RegNames[1] -ErrorAction 'SilentlyContinue')
                $Local:CurrentUserDateSet       = [datetime]$(Try{[datetime](Get-ItemProperty -Path $Local:RegPath -Name $Local:RegNames[2] -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty $Local:RegNames[2] -ErrorAction 'SilentlyContinue')}catch{[datetime]::MinValue})

                # Set Info if any of the values does not match wanted values
                if (
                    [bool]((-not[string]::IsNullOrEmpty($Local:RegValues[0])) -and $Local:RegValues[0] -ne $Local:CurrentUserSID) -or
                    [bool]((-not[string]::IsNullOrEmpty($Local:RegValues[1])) -and $Local:RegValues[1] -ne $Local:CurrentUserName) -or
                    [bool]((-not[string]::IsNullOrEmpty($Local:RegValues[2])) -and $Local:RegValues[2] -ne $Local:CurrentUserPrincipalName) -or
                    $Local:CurrentUserDateSet -eq [datetime]::MinValue
                ) {      
                    # Create path if not exist
                    if (-not(Test-Path -Path $Local:RegPath)) {
                        $null = New-Item -Path $Local:RegPath -Force -ErrorAction 'Stop'
                    }
                    # Set registry values
                    foreach ($x in [byte[]]@(0 .. [byte]($Local:RegNames.'Length' - 1))) {
                        if (-not[string]::IsNullOrEmpty($Local:RegValues[$x])) {
                            $null = Set-ItemProperty -Path $Local:RegPath -Name $Local:RegNames[$x] -Value $Local:RegValues[$x] -Force -ErrorAction 'Stop'
                        }
                    }
                }
            #endregion Write SID and UserName to HKCU if running in User Context
        }
        
        
        # Output Intune User and SID if found
        if (-not([string]::IsNullOrEmpty($Script:StrIntuneUserSID))) {
            Write-Output -InputObject ('Intune User SID "{0}", Username "{1}".' -f ($Script:StrIntuneUserSID,$Script:StrIntuneUserName))
        }
    #endregion Get SID and "Domain\Username" for Intune User



    # End the Initialize Region
    Write-Output -InputObject ('**********************')
#endregion Don't Touch This
################################################
#region    Your Code Here
################################################



#region    Variables
    # Settings
    $Script:ReadOnly           = [bool]$($false)

    # Files
    #region Files
        # Enable-BitLockerTrigger.PS1
        #region FilePS1
        $Script:NameFilePS1    = [string]$('Enable_BitLocker.ps1')
        $Script:ContentFilePS1 = [string]$('I1JlcXVpcmVzIC1SdW5Bc0FkbWluaXN0cmF0b3IKPCMgCiAgICAuU1lOT1BTSVMKICAgICAgICBFbmFibGVzIEJpdExvY2tlciBhbmQgYmFja3VwcyBSZWNvdmVyeSBQYXNzd29yZCB0byBib3RoIEF6dXJlIEFEIGFuZCBPbmVEcml2ZSBmb3IgQnVzaW5lc3MuCgogICAgLkRFU0NSSVBUSU9OIAogICAgICAgIEVuYWJsZXMgQml0TG9ja2VyIGFuZCBiYWNrdXBzIFJlY292ZXJ5IFBhc3N3b3JkIHRvIGJvdGggQXp1cmUgQUQgYW5kIE9uZURyaXZlIGZvciBCdXNpbmVzcy4KICAgICAgICAgICAgKiBEZXNpZ25lZCBmb3IgSW50dW5lIE1ETSBtYW5hZ2VkLCBBenVyZSBBRCBqb2luZWQgZGV2aWNlcy4KICAgICAgICAgICAgKiBDb250aW5vdXNseSBtb25pdG9ycyBCaXRMb2NrZXIgc3RhdHVzLgogICAgICAgICAgICAgICAgKiBXaWxsIHJlLWVuYWJsZSBpZiBCaXRMb2NrZXIgZ2V0cyBkaXNhYmxlZC4KICAgICAgICAgICAgICAgICogV2lsbCBiYWNrdXAgbmV3IFJlY292ZXJ5IFBhc3N3b3JkcyBpZiBub3QgYWxyZWFkeSBiYWNrZWQgdXAuCiM+CgoKIyBJbnB1dCBwYXJhbWV0ZXJzCltPdXRwdXRUeXBlKCRudWxsKV0KW0NtZGxldEJpbmRpbmcoKV0KcGFyYW0oKQoKCiMgSW1wb3J0IEJpdExvY2tlciBtb2R1bGUgLSBSZXF1aXJlbWVudAppZiAoW2J5dGVdJChHZXQtTW9kdWxlIC1OYW1lICdCaXRMb2NrZXInIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScgfCBNZWFzdXJlLU9iamVjdCB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdDb3VudCcpIC1sZSAwKSB7CiAgICAkbnVsbCA9IEltcG9ydC1Nb2R1bGUgLU5hbWUgJ0JpdExvY2tlcicgLURpc2FibGVOYW1lQ2hlY2tpbmcgLUVycm9yQWN0aW9uICdTdG9wJwp9CgoKIyBNYWtlIHN1cmUgYWxsIG5ldHdvcmsgdHJhZmZpYyBnZW5lcmFjdGVkIGluIHRoaXMgc2NyaXB0IHVzZXMgVExTIDEuMgpbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW05ldC5TZWN1cml0eVByb3RvY29sVHlwZV06OlRsczEyCltTeXN0ZW0uTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZWN1cml0eVByb3RvY29sID0gW1N5c3RlbS5OZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgoKCiNyZWdpb24gU2V0dGluZ3MgYW5kIFZhcmlhYmxlcwogICAgIyBTZXR0aW5ncyAgIAogICAgIyMgUmVtb3ZlIGZpbGVzIGFmdGVyIHN1Y2Nlc3MKICAgICMjIyBJZiBvbiwgd2lsbCByZW1vdmUgYWxsIGZpbGVzIGFmdGVyIGZpcnN0IHN1Y2Nlc3MuCiAgICAkbnVsbCA9IE5ldy1WYXJpYWJsZSAtT3B0aW9uICdSZWFkT25seScgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSAtTmFtZSAnQm9vbFJlbW92ZUZpbGVzQWZ0ZXJTdWNjZXNzJyAtVmFsdWUgKFtib29sXSRmYWxzZSkKICAgIAogICAgIyMgUmVtb3ZlIHNjZWhkdWxlZCB0YXNrIGFmdGVyIHN1Y2Nlc3MKICAgICMjIyBJZiBmYWxzZSwgd2lsbCBjaGFuZ2Ugc2NoZWR1bGVkIHRhc2sgdG8gcnVuIG9uY2UgYSBkYXkgYXQgMTI6MDAgYWZ0ZXIgZmlyc3Qgc3VjY2Vzc2Z1bGwgcnVuLCBvciBhZnRlciAzMCBmYWlsZWQgcnVucwogICAgIyMjIElmIHRydWUsIHdpbGwgZGVsZXRlIHNjaGVkdWxlZCB0YXNrIGFmdGVyIGZpcnN0IHN1Y2Nlc3NmdWxsIHJ1biBhbmQgYWZ0ZXIgMzAgZmFpbGVkIHJ1bnMKICAgICRudWxsID0gTmV3LVZhcmlhYmxlIC1PcHRpb24gJ1JlYWRPbmx5JyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIC1OYW1lICdCb29sUmVtb3ZlU2NoZWR1bGVkVGFza0FmdGVyRmlyc3RTdWNjZXNzJyAtVmFsdWUgKFtib29sXSRmYWxzZSkKICAgIAogICAgIyMgQmFja3VwIHRvIE9uZURyaXZlCiAgICAjIyMgSWYgdHJ1ZSB3aWxsIGJhY2t1cCB0byBPbmVEcml2ZSBmb3IgQnVzaW5lc3MsIHdpbGwgbm90IGNvdW50IGFzIHN1Y2Nlc3NmdWwgcnVuIGJlZm9yZSB0aGlzIHN0ZXAgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkKICAgICMjIyBJZiBmYWxzZSB3aWxsIHNrdXAgYmFja3VwIHRvIE9uZURyaXZlIGZvciBCdXNpbmVzcwogICAgJG51bGwgPSBOZXctVmFyaWFibGUgLU9wdGlvbiAnUmVhZE9ubHknIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgLU5hbWUgJ0Jvb2xCYWNrdXBUb09uZURyaXZlRm9yQnVzaW5lc3MnIC1WYWx1ZSAoW2Jvb2xdJGZhbHNlKQogICAgCiAgICAjIyBTa2lwIGhhcmR3YXJlIHRlc3QgaWYgbmV3bHkgZW5yb2xsZWQKICAgICMjIyBJZiB0cnVlLCB3aWxsIHNraXAgaGFyZHdhcmUgdGVzdCB3aGVuIGVuYWJsaW5nIEJpdExvY2tlciBvbiBuZXdseSBlbnJvbGxlZCBJbnR1bmUgZGV2aWNlLgogICAgIyMjIElmIGZhbHNlLCB3aWxsIG5vdC4KICAgICRudWxsID0gTmV3LVZhcmlhYmxlIC1PcHRpb24gJ1JlYWRPbmx5JyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIC1OYW1lICdCb29sU2tpcEhhcmR3YXJlVGVzdE9uTmV3bHlFbnJvbGxlZERldmljZScgLVZhbHVlIChbYm9vbF0kdHJ1ZSkKCgoKICAgICMgVmFyaWFibGVzCiAgICAjIyBTY3JpcHQKICAgICRudWxsID0gTmV3LVZhcmlhYmxlIC1PcHRpb24gJ1JlYWRPbmx5JyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIC1OYW1lICdOYW1lU2NyaXB0JyAtVmFsdWUgJChbc3RyaW5nXSQoJ0lyb25UcmlnZ2VyJykpCiAgICAkbnVsbCA9IE5ldy1WYXJpYWJsZSAtT3B0aW9uICdSZWFkT25seScgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSAtTmFtZSAnU2NoZWR1bGVkVGFza05hbWUnIC1WYWx1ZSAkKFtzdHJpbmddJCgkU2NyaXB0Ok5hbWVTY3JpcHQuQ2xvbmUoKSkpCiAgICAkbnVsbCA9IE5ldy1WYXJpYWJsZSAtT3B0aW9uICdSZWFkT25seScgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSAtTmFtZSAnRGlySW5zdGFsbCcgLVZhbHVlICQoW3N0cmluZ10kKCd7MH1cUHJvZ3JhbSBGaWxlc1xJcm9uc3RvbmVJVFx7MX1cJyAtZiAoJGVudjpTeXN0ZW1Ecml2ZSwkU2NyaXB0Ok5hbWVTY3JpcHQpKSkKICAgICRudWxsID0gTmV3LVZhcmlhYmxlIC1PcHRpb24gJ1JlYWRPbmx5JyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIC1OYW1lICdEaXJMb2cnIC1WYWx1ZSAkKFtzdHJpbmddJCgnezB9XFByb2dyYW0gRmlsZXNcSXJvbnN0b25lSVRcSW50dW5lXERldmljZUNvbmZpZ3VyYXRpb25cJyAtZiAoJGVudjpTeXN0ZW1Ecml2ZSkpKQogICAgJG51bGwgPSBOZXctVmFyaWFibGUgLU9wdGlvbiAnUmVhZE9ubHknIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgLU5hbWUgJ0ZpbGVMb2cnIC1WYWx1ZSAkKFtzdHJpbmddJCgnezB9SXJvblRyaWdnZXIgLSBFbmFibGVCaXRMb2NrZXIubG9nJyAtZiAoJFNjcmlwdDpEaXJMb2cpKSkKICAgICRudWxsID0gTmV3LVZhcmlhYmxlIC1PcHRpb24gJ1JlYWRPbmx5JyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIC1OYW1lICdGaWxlU3RhdHMnIC1WYWx1ZSAkKFtzdHJpbmddJCgnezB9c3RhdHMudHh0JyAtZiAoJFNjcmlwdDpEaXJJbnN0YWxsKSkpCiAgICAKICAgICMjIEhlbHAKICAgICMjIyBTdGF0aWMgLyBSZWFkT25seQogICAgJG51bGwgPSBOZXctVmFyaWFibGUgLU9wdGlvbiAnUmVhZE9ubHknIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgLU5hbWUgJ09TRHJpdmVMZXR0ZXInIC1WYWx1ZSAkKFtzdHJpbmddJCgkZW52OlN5c3RlbURyaXZlLlRyaW0oJzonKS5Ub1VwcGVyKCkpKQogICAgJG51bGwgPSBOZXctVmFyaWFibGUgLU9wdGlvbiAnUmVhZE9ubHknIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgLU5hbWUgJ0NvbXB1dGVyTmFtZScgLVZhbHVlICQoW3N0cmluZ10kKFtzdHJpbmdbXV0kKFtzdHJpbmddKCRlbnY6Q09NUFVURVJOQU1FKS5UcmltKCksW3N0cmluZ10oW1N5c3RlbS5FbnZpcm9ubWVudF06Ok1hY2hpbmVOYW1lKS5UcmltKCkgLW5lIFtzdHJpbmddOjpFbXB0eSlbMF0pKQogICAgJG51bGwgPSBOZXctVmFyaWFibGUgLU9wdGlvbiAnUmVhZE9ubHknIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgLU5hbWUgJ0JpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlcycgLVZhbHVlICQoW3N0cmluZ1tdXSQoJ0Z1bGx5RGVjcnlwdGVkJywnRW5jcnlwdGlvbkluUHJvZ3Jlc3MnLCdGdWxseUVuY3J5cHRlZCcpKQogICAgIyMjIER5bmFtaWMKICAgICRTY3JpcHQ6Qm9vbERpZEFueXRoaW5nQ2hhbmdlVGhpc1J1bnRpbWUgPSBbYm9vbF0kKCRmYWxzZSkgICAgCiNlbmRyZWdpb24gU2V0dGluZ3MgYW5kIFZhcmlhYmxlcwoKCgojcmVnaW9uIEZ1bmN0aW9ucwogICAgI3JlZ2lvbiBMb2dnaW5nIGFuZCBPdXRwdXQKICAgICAgICAjcmVnaW9uIExvZ1dyaXRlCiAgICAgICAgRnVuY3Rpb24gTG9nV3JpdGUgewogICAgICAgICAgICBQYXJhbSAoCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0KICAgICAgICAgICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9nU3RyaW5nCiAgICAgICAgICAgICkKCiAgICAgICAgICAgICMgQ3JlYXRlIHZhcmlhYmxlcwogICAgICAgICAgICAkRGF0ZVRpbWUgID0gW3N0cmluZ10kKFtTeXN0ZW0uRGF0ZVRpbWVdOjpOb3cuVG9TdHJpbmcoJ3l5TU1kZCBISDptbTpzczpmZicpKQogICAgICAgICAgICAkTG9nU3RyaW5nID0gW3N0cmluZ10kKCd7MH0gezF9JyAtZiAoJERhdGVUaW1lLCRMb2dTdHJpbmcpKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBBZGQgY29udGVudCB0byBsb2cgZmlsZQogICAgICAgICAgICBBZGQtY29udGVudCAtUGF0aCAkU2NyaXB0OkZpbGVMb2cgLVZhbHVlICRMb2dTdHJpbmcgLUVuY29kaW5nICd1dGY4JwogICAgICAgICAgICAKICAgICAgICAgICAgIyBPdXRwdXQgY29udGVudCB0byBjb25zb2xlCiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAtSW5wdXRPYmplY3QgJExvZ1N0cmluZwogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIExvZ1dyaXRlCgogICAgICAgICNyZWdpb24gTG9nRXJyb3JzCiAgICAgICAgRnVuY3Rpb24gTG9nRXJyb3JzIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdDYXVnaHQgYW4gZXhjZXB0aW9uOicpCiAgICAgICAgICAgIExvZ1dyaXRlICgnRXhjZXB0aW9uIFR5cGU6ICAgIHswfScgLWYgKCRfLidFeGNlcHRpb24nLkdldFR5cGUoKS4nRnVsbE5hbWUnKSkKICAgICAgICAgICAgTG9nV3JpdGUgKCdFeGNlcHRpb24gTWVzc2FnZTogezB9JyAtZiAoJF8uJ0V4Y2VwdGlvbicuJ01lc3NhZ2UnKSkKICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBMb2dFcnJvcnMKCgogICAgICAgICNyZWdpb24gV3JpdGUtU3RhdHMKICAgICAgICAjIFdyaXRlLVN0YXRzOiBPdXRwdXRzIGN1cnJlbnQgc3RhdHVzIG9mIHZhcmlvdXMgYm9vbGVhbnMgYW5kIG90aGVyIG1lYXN1cmVtZW50cwogICAgICAgIEZ1bmN0aW9uIFdyaXRlLVN0YXRzIHsgICAgCiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW3BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV0KICAgICAgICAgICAgICAgIFtib29sXSAkUHJldmlvdXNPbmx5ID0gJGZhbHNlCiAgICAgICAgICAgICkKICAgICAgICAgICAgIyBHZW5lcmFsCiAgICAgICAgICAgIGlmICgkUHJldmlvdXNPbmx5KSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1J1bnM6IHswfSB8IEhhcyBJcm9uVHJpZ2dlciBoYWQgYSBzdWNjZXNzZnVsbCBydW4gYWxyZWFkeT8gezF9JyAtZiAoJFNjcmlwdDpDb3VudFJ1bnMsJFNjcmlwdDpJc0ZpbmlzaGVkMXN0VGltZSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgT1MgRHJpdmUKICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBkcml2ZSAoezB9KSB8IEVuY3J5cHRlZDogezF9IHwgUmVjb3ZlcnkgUGFzc3dvcmRzIHByZXNlbnQ6IHsyfSB8IEJhY2t1cCB0byBPbmVEcml2ZTogezN9IHwgQmFja3VwIHRvIEF6dXJlQUQ6IHs0fScgLWYgKCRPU0RyaXZlTGV0dGVyLCRTY3JpcHQ6SXNFbmNyeXB0ZWQsJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdywkU2NyaXB0OklzQmFja3VwT0QsJFNjcmlwdDpJc0JhY2t1cEFBRCkpCiAgICAgICAgICAgIGlmICgtbm90KCRQcmV2aW91c09ubHkpKSB7CiAgICAgICAgICAgICAgICBMb2d3cml0ZSAoJ09TIGRyaXZlICh7MH0pIHwgVm9sdW1lU3RhdHVzOiB7MX0gfCBQcm90ZWN0aW9uU3RhdHVzOiB7Mn0nIC1mICgkT1NEcml2ZUxldHRlciwkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25TdGF0dXMsJFNjcmlwdDpWb2x1bWVQcm90ZWN0aW9uU3RhdHVzKSkgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXKSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBkcml2ZSAoezB9KSB8IFByZXNlbmNlIG9mIEJpdExvY2tlciBLZXlQcm90ZWN0b3IgfCBUUE06IHsxfSB8IFJlY292ZXJ5UGFzc3dvcmQ6IHsyfScgLWYgKCRPU0RyaXZlTGV0dGVyLCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0sJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSkpCiAgICAgICAgICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Vm9sdW1lRW5jcnlwdGlvblN0YXR1c1sxXSkgewogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ09TIGRyaXZlICh7MH0pIHwgezF9JyAtZiAoJE9TRHJpdmVMZXR0ZXIsKFdyaXRlLVJlY292ZXJ5UGFzc3dvcmQpKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBPdGhlciBmaXhlZCBkcml2ZXMgd2l0aCBhIGRyaXZlIGxldHRlcgogICAgICAgICAgICAgICAgPCMgI1RPRE8KICAgICAgICAgICAgICAgIGlmICgkU2NyaXB0Ok90aGVyRW5jcnlwdGVkRHJpdmVzKSB7CiAgICAgICAgICAgICAgICAgICAgJFNjcmlwdDpPdGhlckVuY3J5cHRlZERyaXZlcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFNjcmlwdDpPdGhlckVuY3J5cHRlZERyaXZlc1swXSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbc3RyaW5nXSAkTG9jYWw6RHJpdmVWb2x1bWVTdGF0dXMgPSAoR2V0LVZhcmlhYmxlIC1OYW1lICgnVm9sdW1lezB9RW5jU3RhdHVzJyAtZiAkXykgLVNjb3BlICdTY3JpcHQnKS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10gJExvY2FsOkRyaXZlUHJvdGVjdGlvblN0YXR1cyA9IChHZXQtVmFyaWFibGUgLU5hbWUgKCdWb2x1bWV7MH1Qcm90ZWN0aW9uU3RhdHVzJyAtZiAkXykgLVNjb3BlICdTY3JpcHQnKS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nd3JpdGUgKCdTdGF0dXMgZHJpdmUgInswfSIgfCBWb2x1bWVTdGF0dXM6IHsxfSB8IFByb3RlY3Rpb25TdGF0dXM6IHsyfScgLWYgKCRfLCRMb2NhbDpEcml2ZVZvbHVtZVN0YXR1cywkTG9jYWw6RHJpdmVQcm90ZWN0aW9uU3RhdHVzKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtib29sW11dICRMb2NhbDpLZXlQcm90ZWN0b3JUeXBlcyA9IEdldC1CaXRMb2NrZXJLZXlQcm90ZWN0b3JUeXBlcyAtRHJpdmVMZXR0ZXIgJF8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnQml0TG9ja2VyIEtleVByb3RlY3RvciBUeXBlcyBwcmVzZW50IGZvciBkcml2ZSAiezB9Ij8gfCBUUE06IHsxfSB8IFJlY292ZXJ5UGFzc3dvcmQ6IHsyfScgLWYgKCRfLCRMb2NhbDpLZXlQcm90ZWN0b3JUeXBlc1swXSwkTG9jYWw6S2V5UHJvdGVjdG9yVHlwZXNbMV0pKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSM+CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBXcml0ZS1TdGF0cwoKCiAgICAgICAgI3JlZ2lvbiBXcml0ZS1SZWNvdmVyeVBhc3N3b3JkCiAgICAgICAgIyBXcml0ZS1SZWNvdmVyeVBhc3N3b3JkCiAgICAgICAgRnVuY3Rpb24gV3JpdGUtUmVjb3ZlcnlQYXNzd29yZCB7CiAgICAgICAgICAgICRMb2NhbDpDID0gW2J5dGVdJChpZigkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMpeyRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3Jkc31lbHNlezB9KQogICAgICAgICAgICBSZXR1cm4gKFtzdHJpbmddJCgnezB9IFJlY292ZXJ5IFBhc3N3b3JkKHMpIHByZXNlbnQuezF9JyAtZiAoJExvY2FsOkMsKCQoaWYoJExvY2FsOkMgLWdlIDEpeyd7MH17MX0nIC1mICgiYHJgbiIsKEdldC1TdHJpbmdSZWNvdmVyeVBhc3N3b3JkcykpfSkpKSkpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gV3JpdGUtUmVjb3ZlcnlQYXNzd29yZAoKCiAgICAgICAgI3JlZ2lvbiBHZXQtU3RyaW5nUmVjb3ZlcnlQYXNzd29yZHMKICAgICAgICAjIFJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgcmVjb3ZlcnkgcGFzc3dvcmRzIGZyb20gJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzLiBVc2VmdWxsIGZvciBwcmludGluZy8gbG9nZ2luZy8gYmFja3VwCiAgICAgICAgRnVuY3Rpb24gR2V0LVN0cmluZ1JlY292ZXJ5UGFzc3dvcmRzIHsKICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAgICAgICAgIFtzdHJpbmddICREcml2ZUxldHRlciA9ICRPU0RyaXZlTGV0dGVyCiAgICAgICAgICAgICkKCiAgICAgICAgICAgICMgVmFsaWRhdGUgSW5wdXQKICAgICAgICAgICAgJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIgPSBbc3RyaW5nXSQoJERyaXZlTGV0dGVyLlRyaW0oJzonKS5Ub1VwcGVyKCkpCiAgICAgICAgICAgIGlmICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlci4nTGVuZ3RoJyAtZ3QgMSkgewogICAgICAgICAgICAgICAgVGhyb3cgJ0VSUk9SOiBEcml2ZSBsZXR0ZXIgY2Fubm90IGJlIG1vcmUgdGhhbiBvbmUgbGV0dGVyJwogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBDcmVhdGUgdmFyaWFibGUgbmFtZXMKICAgICAgICAgICAgJExvY2FsOkFycmF5TmFtZSAgICAgPSBbc3RyaW5nXSQoJ3swfUFycmF5UmVjb3ZlcnlQYXNzd29yZHMnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpCgoKICAgICAgICAgICAgIyBHZXQgQXJyYXksIGxvb3AgaXQuIElkZWFsbHkgb25seSBvbmUgcHcsIGJ1dCBsb29wIGp1c3QgdG8gYmUgc2FmZS4KICAgICAgICAgICAgJExvY2FsOlRlbXBDb3VudGVyID0gW3VpbnQxNl0kKDApCiAgICAgICAgICAgICRMb2NhbDpPdXRTdHIgPSBbc3RyaW5nXTo6RW1wdHkKICAgICAgICAgICAgKEdldC1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6QXJyYXlOYW1lIC1TY29wZSAnU2NyaXB0JyAtVmFsdWVPbmx5KSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICRMb2NhbDpPdXRTdHIgKz0gKCd7MH0gfCBLZXlQcm90ZWN0b3JJZCAiezF9IiB8IFJlY292ZXJ5UGFzc3dvcmQgInsyfSInIC1mICgoJExvY2FsOlRlbXBDb3VudGVyICs9IDEpLCRfLktleVByb3RlY3RvcklkLCRfLlJlY292ZXJ5UGFzc3dvcmQpKQogICAgICAgICAgICAgICAgaWYgKCRMb2NhbDpUZW1wQ291bnRlciAtbHQgKChHZXQtVmFyaWFibGUgLU5hbWUgJExvY2FsOkFycmF5TmFtZSAtU2NvcGUgJ1NjcmlwdCcpLlZhbHVlKS5Db3VudCkgeyRMb2NhbDpPdXRTdHIgKz0gImByYG4ifQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBSZXR1cm4gdGhlIHN0cmluZwogICAgICAgICAgICBSZXR1cm4gJExvY2FsOk91dFN0cgogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIEdldC1TdHJpbmdSZWNvdmVyeVBhc3N3b3JkcwogICAgI2VuZHJlZ2lvbiBMb2dnaW5nIGFuZCBPdXRwdXQKCgoKICAgICNyZWdpb24gUmV0dXJuIFZhbHVlcyAoVXNlZCBieSBvdGhlciBGdW5jdGlvbnMpCiAgICAgICAgI3JlZ2lvbiAgICBHZXQtQml0TG9ja2VyS2V5UHJvdGVjdG9yVHlwZXMKICAgICAgICBGdW5jdGlvbiBHZXQtQm9vbERyaXZlSGFzQml0TG9ja2VyVFBNYW5kUFcgewogICAgICAgICAgICA8IwogICAgICAgICAgICAgICAgUmV0dXJucyBhIGJvb2wgYXJyYXksIHdoZXJlIHRoZSBmaXJzdCByZXByZXNlbnRzIHN0YXR1cyBvZiBUUE0gcHJlc2VuY2UsIGFuZCB0aGUgc2Vjb25kIGZvciBQcm90ZWN0aW9uIFBhc3N3b3JkCiAgICAgICAgICAgICM+CiAgICAgICAgICAgIFBhcmFtKAogICAgICAgICAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JGZhbHNlKV0KICAgICAgICAgICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgICAgICAgICBbc3RyaW5nXSAkRHJpdmVMZXR0ZXIgPSAkT1NEcml2ZUxldHRlcgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZhbGlkYXRlIElucHV0CiAgICAgICAgICAgICRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyID0gW3N0cmluZ10kKCREcml2ZUxldHRlci5UcmltKCc6JykuVG9VcHBlcigpKQogICAgICAgICAgICBpZiAoJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIuJ0xlbmd0aCcgLWd0IDEpIHsKICAgICAgICAgICAgICAgIFRocm93ICdFUlJPUjogRHJpdmUgbGV0dGVyIGNhbm5vdCBiZSBtb3JlIHRoYW4gb25lIGxldHRlcicKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHZXQgQml0TG9ja2VyIFZvbHVtZQogICAgICAgICAgICAkTG9jYWw6Qml0TG9ja2VyU3RhdHVzID0gR2V0LUJpdExvY2tlclZvbHVtZSAtTW91bnRQb2ludCAkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcgogICAgICAgICAgICAKICAgICAgICAgICAgIyBDcmVhdGUgb2JqZWN0IGNvbnRhaW5pbmcgbnVtYmVyIG9mIFJlY292ZXJ5UGFzc3dvcmRzIChJbmRleCA9IDApIGFuZCBUUE0gKEluZGV4ID0gMSkKICAgICAgICAgICAgJExvY2FsOkNvdW50UmVjUGFzcyA9IFt1aW50MTZdJCgwKQogICAgICAgICAgICAkTG9jYWw6Q291bnRUUE0gPSBbdWludDE2XSQoMCkKICAgICAgICAgICAgJExvY2FsOkJpdExvY2tlclN0YXR1cy4nS2V5UHJvdGVjdG9yJyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmICgkXy4nS2V5UHJvdGVjdG9yVHlwZScgLWVxICdSZWNvdmVyeVBhc3N3b3JkJykgeyRMb2NhbDpDb3VudFJlY1Bhc3MgKz0gMX0KICAgICAgICAgICAgICAgIGVsc2VpZiAoJF8uJ0tleVByb3RlY3RvclR5cGUnIC1lcSAnVFBNJykgeyRMb2NhbDpDb3VudFRQTSArPSAxfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJldHVybiB0aGUgb2JqZWN0CiAgICAgICAgICAgIHJldHVybiAoW2Jvb2xdJCgkTG9jYWw6Q291bnRUUE0gLWdlIDEpLFtib29sXSQoJExvY2FsOkNvdW50UmVjUGFzcyAtZ2UgMSkpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gR2V0LUJpdExvY2tlcktleVByb3RlY3RvclR5cGVzCgoKICAgICAgICAjcmVnaW9uICAgIEdldC1BcnJheVJlY292ZXJ5UGFzc3dvcmRzCiAgICAgICAgIyBSZXR1cm5zIGEgQXJyYXlMaXN0IHdpdGggZXhpc3RpbmcgUHJvdGVjdGlvblBhc3N3b3JkcwogICAgICAgIEZ1bmN0aW9uIEdldC1BcnJheVJlY292ZXJ5UGFzc3dvcmRzIHsKICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgICAgICAgICBbTWljcm9zb2Z0LkJpdExvY2tlci5TdHJ1Y3R1cmVzLkJpdExvY2tlclZvbHVtZV0gJEJpdExvY2tlclZvbHVtZQogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEdldCBCaXRMb2NrZXIgUHJvdGVjdGlvblBhc3N3b3JkcwogICAgICAgICAgICAkTG9jYWw6S2V5UHJvdGVjdG9yU3RhdHVzICAgICA9ICRCaXRMb2NrZXJWb2x1bWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnS2V5UHJvdGVjdG9yJwogICAgICAgICAgICAkTG9jYWw6QXJyYXlSZWNvdmVyeVBhc3N3b3JkcyA9IFtNaWNyb3NvZnQuQml0TG9ja2VyLlN0cnVjdHVyZXMuQml0TG9ja2VyVm9sdW1lS2V5UHJvdGVjdG9yW11dJCgpCgogICAgICAgICAgICAkTG9jYWw6S2V5UHJvdGVjdG9yU3RhdHVzIHwgRm9yRWFjaC1PYmplY3QgLVByb2Nlc3MgewogICAgICAgICAgICAgICAgaWYgKCRfLidLZXlQcm90ZWN0b3JUeXBlJyAtZXEgJ1JlY292ZXJ5UGFzc3dvcmQnKSB7CiAgICAgICAgICAgICAgICAgICAgJExvY2FsOkFycmF5UmVjb3ZlcnlQYXNzd29yZHMgKz0gW01pY3Jvc29mdC5CaXRMb2NrZXIuU3RydWN0dXJlcy5CaXRMb2NrZXJWb2x1bWVLZXlQcm90ZWN0b3JbXV0kKCRfKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJldHVybiB0aGUgb2JqZWN0ICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuICRMb2NhbDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gR2V0LUFycmF5UmVjb3ZlcnlQYXNzd29yZHMKCgogICAgICAgICNyZWdpb24gICAgR2V0LVZvbHVtZVVuaXF1ZUlECiAgICAgICAgRnVuY3Rpb24gR2V0LVZvbHVtZVVuaXF1ZUlEIHsKICAgICAgICAgICAgcGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyCiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVmFsaWRhdGUgSW5wdXQKICAgICAgICAgICAgJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIgPSBbc3RyaW5nXSQoJERyaXZlTGV0dGVyLlRyaW0oJzonKS5Ub1VwcGVyKCkpCiAgICAgICAgICAgIGlmICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlci4nTGVuZ3RoJyAtZ3QgMSkgewogICAgICAgICAgICAgICAgVGhyb3cgJ0VSUk9SOiBEcml2ZSBsZXR0ZXIgY2Fubm90IGJlIG1vcmUgdGhhbiBvbmUgbGV0dGVyJwogICAgICAgICAgICB9CgogICAgICAgICAgICAjIEdldCBVbmlxdWUgVm9sdW1lCiAgICAgICAgICAgIHJldHVybiBbc3RyaW5nXSQoR2V0LVZvbHVtZSAtRHJpdmVMZXR0ZXIgJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnVW5pcXVlSWQnKS5TcGxpdCgneycpWy0xXS5UcmltKCd9XCcpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gR2V0LVZvbHVtZVVuaXF1ZUlECgoKICAgICAgICAjcmVnaW9uICAgIFJlZnJlc2gtQml0TG9ja2VyVmFyaWFibGVzRm9yQ3VycmVudFZvbHVtZQogICAgICAgIEZ1bmN0aW9uIFJlZnJlc2gtQml0TG9ja2VyVmFyaWFibGVzRm9yQ3VycmVudFZvbHVtZSB7CiAgICAgICAgICAgIHBhcmFtKAogICAgICAgICAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgICAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAgICAgICAgIFtzdHJpbmddICREcml2ZUxldHRlcgogICAgICAgICAgICApCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFZhbGlkYXRlIElucHV0CiAgICAgICAgICAgICRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyID0gW3N0cmluZ10kKCREcml2ZUxldHRlci5UcmltKCc6JykuVG9VcHBlcigpKQogICAgICAgICAgICBpZiAoJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIuTGVuZ3RoIC1ndCAxKSB7CiAgICAgICAgICAgICAgICBUaHJvdyAnRVJST1I6IERyaXZlIGxldHRlciBjYW5ub3QgYmUgbW9yZSB0aGFuIG9uZSBsZXR0ZXInCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAjIFZhcmlhYmxlcyB0aGF0cyBhbHdheXMgcHJlc2VudAogICAgICAgICAgICAkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25TdGF0dXMgICAgID0gW3N0cmluZ10kKEdldC1WYXJpYWJsZSAtTmFtZSAoJ3swfVZvbHVtZUVuY3J5cHRpb25TdGF0dXMnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JyAtVmFsdWVPbmx5IC1FcnJvckFjdGlvbiAnU3RvcCcpCiAgICAgICAgICAgICRTY3JpcHQ6Vm9sdW1lUHJvdGVjdGlvblN0YXR1cyAgICAgPSBbc3RyaW5nXSQoR2V0LVZhcmlhYmxlIC1OYW1lICgnezB9Vm9sdW1lUHJvdGVjdGlvblN0YXR1cycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkgLVNjb3BlICdTY3JpcHQnIC1WYWx1ZU9ubHkgLUVycm9yQWN0aW9uICdTdG9wJykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVmFyaWFibGVzIHRoYXRzIHByZXNlbnQgb25seSBpZiB0aGVyZXMgYXQgbGVhc3Qgb25lIEtleVByb3RlY3RvciBmb3IgY3VycmVudCB2b2x1bWUKICAgICAgICAgICAgJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQVyAgICAgICAgICA9IFtib29sW11dJChHZXQtVmFyaWFibGUgLU5hbWUgKCd7MH1Wb2x1bWVIYXNUUE1hbmRQVycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkgLVNjb3BlICdTY3JpcHQnIC1WYWx1ZU9ubHkgLUVycm9yQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJykKICAgICAgICAgICAgJFNjcmlwdDpWb2x1bWVFbmNyeXB0aW9uUGVyY2VudGFnZSA9IFtzdHJpbmddJChHZXQtVmFyaWFibGUgLU5hbWUgKCd7MH1Wb2x1bWVFbmNyeXB0aW9uUGVyY2VudGFnZScgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkgLVNjb3BlICdTY3JpcHQnIC1WYWx1ZU9ubHkgLUVycm9yQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVmFyaWFibGVzIHRoYXRzIHByZXNlbnQgb25seSBpZiBjdXJyZW50IHZvbHVtZSBpcyBwcm90ZWN0ZWQgd2l0aCBtaW5pbXVtIGEgVFBNIGFuZCBhIFJlY292ZXJ5IFBhc3N3b3JkCiAgICAgICAgICAgICRTY3JpcHQ6QXJyYXlSZWNvdmVyeVBhc3N3b3JkcyAgICAgPSBHZXQtVmFyaWFibGUgLU5hbWUgKCd7MH1BcnJheVJlY292ZXJ5UGFzc3dvcmRzJyAtZiAoJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIpKSAtU2NvcGUgJ1NjcmlwdCcgLVZhbHVlT25seSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAgICAgPSBbYnl0ZV0kKEdldC1WYXJpYWJsZSAtTmFtZSAoJ3swfUNvdW50UmVjb3ZlcnlQYXNzd29yZHMnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JyAtVmFsdWVPbmx5IC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScpCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gUmVmcmVzaC1CaXRMb2NrZXJWYXJpYWJsZXNGb3JDdXJyZW50Vm9sdW1lCgoKICAgICAgICAjcmVnaW9uICAgIENoZWNrLUlmQml0TG9ja2VyUFdIYXNDaGFuZ2VkCiAgICAgICAgRnVuY3Rpb24gQ2hlY2stSWZCaXRMb2NrZXJQV0hhc0NoYW5nZWQgewogICAgICAgICAgICBwYXJhbSgKICAgICAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldCiAgICAgICAgICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICAgICAgICAgW3N0cmluZ10gJERyaXZlTGV0dGVyID0gJE9TRHJpdmVMZXR0ZXIKICAgICAgICAgICAgKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBIZWxwIFZhcmlhYmxlcwogICAgICAgICAgICAkTG9jYWw6SGFzQ2hhbmdlZCA9IFtib29sXSQoJGZhbHNlKQogICAgICAgICAgICAkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlciA9IFtzdHJpbmddJCgkRHJpdmVMZXR0ZXIuVHJpbSgnOicpLlRvVXBwZXIoKSkKICAgICAgICAgICAgaWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyLidMZW5ndGgnIC1ndCAxKSB7CiAgICAgICAgICAgICAgICBUaHJvdyAnRVJST1I6IERyaXZlIGxldHRlciBjYW5ub3QgYmUgbW9yZSB0aGFuIG9uZSBsZXR0ZXInCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgTmFtZSBWYXJpYWJsZXMKICAgICAgICAgICAgJExvY2FsOk5hbWVBcnJheSA9IFtzdHJpbmddJCgnezB9QXJyYXlSZWNvdmVyeVBhc3N3b3JkcycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkKICAgICAgICAgICAgJExvY2FsOlZvbHVtZVVuaXF1ZUlEID0gW3N0cmluZ10kKEdldC1Wb2x1bWVVbmlxdWVJRCAtRHJpdmVMZXR0ZXIgJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIpCiAgICAgICAgICAgICRMb2NhbDpOYW1lRmlsZSA9IFtzdHJpbmddJCgnezB9LnR4dCcgLWYgKCRWb2x1bWVVbmlxdWVJRCkpCiAgICAgICAgICAgCiAgICAgICAgICAgICMgR2V0IFZhcmlhYmxlcwogICAgICAgICAgICAkTG9jYWw6UGF0aERpciA9IFtzdHJpbmddJCgnezB9ezF9JyAtZiAoJFNjcmlwdDpEaXJJbnN0YWxsLCdCYWNrdXBLZXlzXCcpKQogICAgICAgICAgICAkTG9jYWw6UGF0aEZpbGUgPSBbc3RyaW5nXSQoJ3swfXsxfScgLWYgKCRMb2NhbDpQYXRoRGlyLCRMb2NhbDpOYW1lRmlsZSkpCiAgICAgICAgICAgICRMb2NhbDpOb3dLZXlQcm90ZWN0b3JJRCA9IFtzdHJpbmddJCgoKEdldC1WYXJpYWJsZSAtTmFtZSAkTG9jYWw6TmFtZUFycmF5IC1TY29wZSAnU2NyaXB0JykuJ1ZhbHVlJykuJ0tleVByb3RlY3RvcklEJykKICAgICAgICAgICAgJExvY2FsOk5vd1JlY292ZXJ5UGFzc3dvcmQgPSBbc3RyaW5nXSQoKChHZXQtVmFyaWFibGUgLU5hbWUgJExvY2FsOk5hbWVBcnJheSAtU2NvcGUgJ1NjcmlwdCcpLidWYWx1ZScpLidSZWNvdmVyeVBhc3N3b3JkJykKCgogICAgICAgICAgICAjIEdldCBzdGF0cwogICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpQYXRoRmlsZSkpIHsKICAgICAgICAgICAgICAgICRMb2NhbDpIYXNDaGFuZ2VkID0gJHRydWUKICAgICAgICAgICAgICAgIGlmICgtbm90KFRlc3QtUGF0aCAtUGF0aCAkTG9jYWw6UGF0aERpciAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnKSkgewogICAgICAgICAgICAgICAgICAgICRudWxsID0gTmV3LUl0ZW0gLVBhdGggJExvY2FsOlBhdGhEaXIgLUl0ZW1UeXBlICdEaXJlY3RvcnknIC1Gb3JjZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJExvY2FsOklucHV0U3RyaW5nID0gW3N0cmluZ1tdXSQoKEdldC1Db250ZW50IC1QYXRoICRMb2NhbDpQYXRoRmlsZSkuU3BsaXQoW0Vudmlyb25tZW50XTo6TmV3TGluZSkpCiAgICAgICAgICAgICAgICBpZiAoJD8gLWFuZCAkTG9jYWw6SW5wdXRTdHJpbmcuJ0xlbmd0aCcgLWdlIDcpIHsKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6UHJldktleVByb3RlY3RvcklEID0gW3N0cmluZ10kKCRMb2NhbDpJbnB1dFN0cmluZ1s1XS5UcmltKCkpCiAgICAgICAgICAgICAgICAgICAgJExvY2FsOlByZXZSZWNvdmVyeVBhc3N3b3JkID0gW3N0cmluZ10kKCRMb2NhbDpJbnB1dFN0cmluZ1s3XS5UcmltKCkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHskTG9jYWw6SGFzQ2hhbmdlZCA9ICR0cnVlfQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgIyBDaGVjayBpZiBjaGFuZ2VkCiAgICAgICAgICAgIGlmICgkTG9jYWw6UHJldktleVByb3RlY3RvcklEKSB7CiAgICAgICAgICAgICAgICBpZiAoJExvY2FsOlByZXZLZXlQcm90ZWN0b3JJRCAtbmUgJExvY2FsOk5vd0tleVByb3RlY3RvcklEKSB7JExvY2FsOkhhc0NoYW5nZWQgPSAkdHJ1ZX0KICAgICAgICAgICAgICAgIGlmICgkTG9jYWw6UHJldlJlY292ZXJ5UGFzc3dvcmQgLW5lICRMb2NhbDpOb3dSZWNvdmVyeVBhc3N3b3JkKSB7JExvY2FsOkhhc0NoYW5nZWQgPSAkdHJ1ZX0KICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICMgV3JpdGUgbmV3IHZhbHVlcyBpZiBjaGFuZ2VkIG9yIGRvZXMgbm90IGV4aXN0CiAgICAgICAgICAgIGlmICgkTG9jYWw6SGFzQ2hhbmdlZCAtb3IgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkTG9jYWw6UGF0aEZpbGUpKSkgewogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciA9IFtzdHJpbmddOjpFbXB0eQogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnRHJpdmUvVm9sdW1lIExldHRlciAoTm90IFVuaXF1ZSBpZGVudGlmaWVyKTp7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgJExvY2FsOk91dFN0ciArPSAnezB9ezF9JyAtZiAkQ3VycmVudFZvbHVtZUxldHRlciwiYHJgbiIKICAgICAgICAgICAgICAgICRMb2NhbDpPdXRTdHIgKz0gJ1ZvbHVtZSBVbmlxdWVJRCAoTmFtZSBvZiB0aGlzIGZpbGUpOnswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICd7MH17MX0nIC1mICRMb2NhbDpWb2x1bWVVbmlxdWVJRCwiYHJgbiIKICAgICAgICAgICAgICAgICRMb2NhbDpPdXRTdHIgKz0gJ0tleVByb3RlY3RvcklEOnswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICd7MH17MX0nIC1mICRMb2NhbDpOb3dLZXlQcm90ZWN0b3JJRCwiYHJgbiIKICAgICAgICAgICAgICAgICRMb2NhbDpPdXRTdHIgKz0gJ1JlY292ZXJ5IFBhc3N3b3JkOnswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAkTG9jYWw6T3V0U3RyICs9ICd7MH17MX0nIC1mICRMb2NhbDpOb3dSZWNvdmVyeVBhc3N3b3JkLCJgcmBuIgogICAgICAgICAgICAgICAgJG51bGwgPSBPdXQtRmlsZSAtRmlsZVBhdGggJExvY2FsOlBhdGhGaWxlIC1FbmNvZGluZyAndXRmOCcgLUZvcmNlIC1JbnB1dE9iamVjdCAoJExvY2FsOk91dFN0cikKICAgICAgICAgICAgfQoKCgogICAgICAgICAgICAjIFJldHVybiBzdGF0dXMKICAgICAgICAgICAgcmV0dXJuICRMb2NhbDpIYXNDaGFuZ2VkCiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gQ2hlY2stSWZCaXRMb2NrZXJQV0hhc0NoYW5nZWQKICAgICNlbmRyZWdpb24gUmV0dXJuIFZhbHVlcyAoVXNlZCBieSBvdGhlciBGdW5jdGlvbnMpCgoKCiAgICAjcmVnaW9uIFNldCBTY3JpcHQgV2lkZSBWYXJpYWJsZXMKICAgICAgICAjcmVnaW9uIEdldC1CaXRMb2NrZXJTdGF0dXMKICAgICAgICBGdW5jdGlvbiBHZXQtQml0TG9ja2VyU3RhdHVzIHsKICAgICAgICAgICAgPCMKICAgICAgICAgICAgICAgICogRmlsbHMgdHdvIHN0cmluZ3Mgd2l0aCBjdXJyZW50IFZvbHVtZSBFbmNyeXB0aW9uIFN0YXR1cywgYW5kIFZvbHVtZSBQcm90ZWN0aW9uIFN0YXR1cy4gCiAgICAgICAgICAgICAgICAqIEFsc28gbWFrZXMgYSBib29sIGFycmF5IHdpdGggdHJ1ZSBmYWxzZSBmb3IgfCAxOiBUUE0gcHJlc2VudCB8IDI6IFJlY292ZXJ5IFBhc3N3b3JkIFByZXNlbnQKICAgICAgICAgICAgIz4KICAgICAgICAgICAgUGFyYW0oCiAgICAgICAgICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kZmFsc2UpXQogICAgICAgICAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAgICAgICAgIFtzdHJpbmddICREcml2ZUxldHRlciA9ICRPU0RyaXZlTGV0dGVyCiAgICAgICAgICAgICkKCiAgICAgICAgICAgICMgSGVscCB2YXJpYWJsZQogICAgICAgICAgICAkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlciA9IFtzdHJpbmddJCgkRHJpdmVMZXR0ZXIuVHJpbSgnOicpLlRvVXBwZXIoKSkKICAgICAgICAgICAgaWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyLidMZW5ndGgnIC1uZSAxKSB7CiAgICAgICAgICAgICAgICBUaHJvdyAnRVJST1I6IERyaXZlIGxldHRlciBjYW5ub3QgYmUgbW9yZSBvciBsZXNzIHRoYW4gb25lIGxldHRlciEnCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgR2V0IEJpdExvY2tlciBTdGF0dXMgZm9yIFZvbHVtZQogICAgICAgICAgICAkTG9jYWw6Qml0TG9ja2VyVm9sdW1lU3RhdHVzID0gW01pY3Jvc29mdC5CaXRMb2NrZXIuU3RydWN0dXJlcy5CaXRMb2NrZXJWb2x1bWVdJChHZXQtQml0TG9ja2VyVm9sdW1lIC1Nb3VudFBvaW50ICRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKQogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIyBCaXRMb2NrZXIgVm9sdW1lIEVuY3J5cHRpb24gU3RhdHVzOiBGdWxseURlY3J5cHRlZCB8IEVuY3J5cHRpb25JblByb2dyZXNzIHwgRnVsbHlFbmNyeXB0ZWQKICAgICAgICAgICAgTmV3LVZhcmlhYmxlIC1OYW1lICgnezB9Vm9sdW1lRW5jcnlwdGlvblN0YXR1cycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAtVmFsdWUgKFtzdHJpbmddJCgkTG9jYWw6Qml0TG9ja2VyVm9sdW1lU3RhdHVzIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJ1ZvbHVtZVN0YXR1cycpKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBCaXRMb2NrZXIgVm9sdW1lIFByb3RlY3Rpb24gU3RhdHVzOiBPTiBpZiBFbmNyeXB0aW9uIFBlcmNlbnRhZ2UgPSAxMDAlCiAgICAgICAgICAgIE5ldy1WYXJpYWJsZSAtTmFtZSAoJ3swfVZvbHVtZVByb3RlY3Rpb25TdGF0dXMnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgLVZhbHVlIChbc3RyaW5nXSQoJExvY2FsOkJpdExvY2tlclZvbHVtZVN0YXR1cyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdQcm90ZWN0aW9uU3RhdHVzJykpCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDwjICAKICAgICAgICAgICAgICAgICAgICBWb2x1bWUgY2FuIGJlICdGdWxseSBEZWNyeXB0ZWQnLCBidXQgc3RpbGwgaGF2ZSBhIFRQTSBwcmVzZW50LiAKICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgcmlnaHQgYWZ0ZXIgZW5jcnlwdGlvbiBoYXMgc3RhcnRlZC4gCiAgICAgICAgICAgICM+CgoKICAgICAgICAgICAgIyBJZiB0aGVyZSBpcyBhIEtleVByb3RlY3RvciBmb3IgZ2l2ZW4gdm9sdW1lLCBnZXQgdGhlIHJlc3Qgb2YgdGhlIHZhcmlhYmxlcwogICAgICAgICAgICBpZiAoJExvY2FsOkJpdExvY2tlclZvbHVtZVN0YXR1cy4nS2V5UHJvdGVjdG9yJy4nQ291bnQnIC1ndCAwKSB7CiAgICAgICAgICAgICAgICAjIFswfSA9IFZvbHVtZSBoYXMgVFBNPyAgIFsxXSA9IFZvbHVtZSBoYXMgUmVjb3ZlcnkgUGFzc3dvcmQ/CiAgICAgICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgKCd7MH1Wb2x1bWVIYXNUUE1hbmRQVycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVZhbHVlIChbYm9vbFtdXSQoR2V0LUJvb2xEcml2ZUhhc0JpdExvY2tlclRQTWFuZFBXIC1Ecml2ZUxldHRlciAkQ3VycmVudFZvbHVtZUxldHRlcikpICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIEVuY3J5cHRpb24gUGVyY2VudGFnZTogSG93IGxvbmcgaGFzIHRoZSBlbmNyeXB0aW9uIHByb2Nlc3MgY29tZQogICAgICAgICAgICAgICAgTmV3LVZhcmlhYmxlIC1OYW1lICgnezB9Vm9sdW1lRW5jcnlwdGlvblBlcmNlbnRhZ2UnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoW3N0cmluZ10kKCRMb2NhbDpCaXRMb2NrZXJWb2x1bWVTdGF0dXMgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnRW5jcnlwdGlvblBlcmNlbnRhZ2UnKS5Ub1N0cmluZygpKSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgSWYgRHJpdmUgaGFzIFRQTSBhbmQgUFcKICAgICAgICAgICAgICAgIGlmICgoR2V0LVZhcmlhYmxlIC1OYW1lICgnezB9Vm9sdW1lSGFzVFBNYW5kUFcnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JykuVmFsdWVbMV0pIHsKICAgICAgICAgICAgICAgICAgICAjIE5hbWUgdGhlIHZhcmlhYmxlcwogICAgICAgICAgICAgICAgICAgICRMb2NhbDpOYW1lQXJyYXlSZWNvdmVyeVBhc3N3b3JkcyA9IFtzdHJpbmddJCgnezB9QXJyYXlSZWNvdmVyeVBhc3N3b3JkcycgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lTGV0dGVyKSkKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6TmFtZUNvdW50UmVjb3ZlcnlQYXNzd29yZHMgPSBbc3RyaW5nXSQoJ3swfUNvdW50UmVjb3ZlcnlQYXNzd29yZHMnIC1mICgkTG9jYWw6Q3VycmVudFZvbHVtZUxldHRlcikpCgogICAgICAgICAgICAgICAgICAgICMgR2V0IEFycmF5IHdpdGggcHJvdGVjdGlvbiBwYXNzd29yZHMKICAgICAgICAgICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgJExvY2FsOk5hbWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzIC1TY29wZSAnU2NyaXB0JyAtRm9yY2UgYAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtVmFsdWUgKEdldC1BcnJheVJlY292ZXJ5UGFzc3dvcmRzIC1CaXRMb2NrZXJWb2x1bWUgJExvY2FsOkJpdExvY2tlclZvbHVtZVN0YXR1cykKCiAgICAgICAgICAgICAgICAgICAgIyBDb3VudCBBcnJheVJlY292ZXJ5UGFzc3dvcmRzCiAgICAgICAgICAgICAgICAgICAgTmV3LVZhcmlhYmxlIC1OYW1lICRMb2NhbDpOYW1lQ291bnRSZWNvdmVyeVBhc3N3b3JkcyAtU2NvcGUgJ1NjcmlwdCcgLUZvcmNlIGAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVZhbHVlIChbYnl0ZV0kKChHZXQtVmFyaWFibGUgLU5hbWUgJExvY2FsOk5hbWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzKS4nVmFsdWUnKS4nTGVuZ3RoJykKCiAgICAgICAgICAgICAgICAgICAgIyBHZXQgVm9sdW1lIFVuaXF1ZSBJRCAodG8gY2hlY2sgaWYgcHJvdGVjdGlvbiBwYXNzd29yZCBoYXMgY2hhbmdlZCkKICAgICAgICAgICAgICAgICAgICBOZXctVmFyaWFibGUgLU5hbWUgKCd7MH1Wb2x1bWVVbmlxdWVJRCcgLWYgKCRMb2NhbDpOYW1lVm9sdW1lKSkgLVNjb3BlICdTY3JpcHQnIC1Gb3JjZSBgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1WYWx1ZSAoKEdldC1Wb2x1bWVVbmlxdWVJRCAtRHJpdmVMZXR0ZXIgJExvY2FsOkN1cnJlbnRWb2x1bWVMZXR0ZXIpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICNlbmRyZWdpb24gR2V0LUJpdExvY2tlclN0YXR1cwogICAgI2VuZHJlZ2lvbiBTZXQgU2NyaXB0IFdpZGUgVmFyaWFibGVzCgoKCiAgICAjcmVnaW9uIFJlZ2lzdHJ5IEZ1bmN0aW9ucwogICAgICAgICNyZWdpb24gQ3JlYXRlLUVudlZhcmlhYmxlcwogICAgICAgICMgQ3JlYXRlLUVudlZhcmlhYmxlczogQ3JlYXRlcyB2YXJpYWJsZXMgdXNlZCBieSB0aGUgdHJvdWJsZXNob290ZXIgYXQgdGhlIGJvdHRvbSwgd2hlbiBmYWlsZWQgcnVucyByZWFjaGVzIGEgZ2l2ZW4gbnVtYmVyLiAgCiAgICAgICAgRnVuY3Rpb24gQ3JlYXRlLUVudlZhcmlhYmxlcyB7CiAgICAgICAgICAgICMjIyMgU2NyaXB0IFdpZGUgVmFyaWFibGVzCiAgICAgICAgICAgICMjIFRlbmFudAogICAgICAgICAgICAkTG9jYWw6UGF0aERpclJlZ1RlbmFudEpvaW5JbmZvQmFzZSA9IFtzdHJpbmddJCgnUmVnaXN0cnk6OkhLRVlfTE9DQUxfTUFDSElORVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxDbG91ZERvbWFpbkpvaW5cSm9pbkluZm8nKQogICAgICAgICAgICAkTG9jYWw6UGF0aERpclJlZ1RlbmFudEpvaW5JbmZvRnVsbCA9IFtzdHJpbmddJCgnezB9XHsxfScgLWYgKCRMb2NhbDpQYXRoRGlyUmVnVGVuYW50Sm9pbkluZm9CYXNlLAogICAgICAgICAgICAgICAgKEdldC1DaGlsZEl0ZW0gLVBhdGggJExvY2FsOlBhdGhEaXJSZWdUZW5hbnRKb2luSW5mb0Jhc2UgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnTmFtZScpLlNwbGl0KCdcJylbLTFdCiAgICAgICAgICAgICkpCiAgICAgICAgICAgICRTY3JpcHQ6TmFtZVRlbmFudCA9IFtzdHJpbmddJChHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRMb2NhbDpQYXRoRGlyUmVnVGVuYW50Sm9pbkluZm9GdWxsKS4nVXNlckVtYWlsJy5TcGxpdCgnQCcpWzFdCiAgICAgICAgICAgICRTY3JpcHQ6TmFtZVRlbmFudFNob3J0ID0gW3N0cmluZ10kKCRTY3JpcHQ6TmFtZVRlbmFudC5TcGxpdCgnLicpWzBdKQogICAgICAgICAgICAKICAgICAgICAgICAgIyMgSGFyZHdhcmUgYW5kIFdpbmRvd3MgaW5mbwogICAgICAgICAgICAkU2NyaXB0OkNvbXB1dGVyTWFudWZhY3R1cmVyID0gW3N0cmluZ10kKFF1ZXJ5LVJlZ2lzdHJ5IC1EaXIgJ1JlZ2lzdHJ5OjpIS0VZX0xPQ0FMX01BQ0hJTkVcSEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXEJJT1NcU3lzdGVtTWFudWZhY3R1cmVyJykKICAgICAgICAgICAgaWYgKC1ub3QoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFNjcmlwdDpDb21wdXRlck1hbnVmYWN0dXJlcikpKSB7CiAgICAgICAgICAgICAgICAkU2NyaXB0OkNvbXB1dGVyRmFtaWx5ID0gW3N0cmluZ10kKFF1ZXJ5LVJlZ2lzdHJ5IC1EaXIgJ1JlZ2lzdHJ5OjpIS0VZX0xPQ0FMX01BQ0hJTkVcSEFSRFdBUkVcREVTQ1JJUFRJT05cU3lzdGVtXEJJT1NcU3lzdGVtRmFtaWx5JykKICAgICAgICAgICAgICAgICRTY3JpcHQ6Q29tcHV0ZXJQcm9kdWN0TmFtZSA9IFtzdHJpbmddJChRdWVyeS1SZWdpc3RyeSAtRGlyICdSZWdpc3RyeTo6SEtFWV9MT0NBTF9NQUNISU5FXEhBUkRXQVJFXERFU0NSSVBUSU9OXFN5c3RlbVxCSU9TXFN5c3RlbVByb2R1Y3ROYW1lJykKICAgICAgICAgICAgICAgICRTY3JpcHQ6V2luZG93c0VkaXRpb24gPSBbc3RyaW5nXSQoUXVlcnktUmVnaXN0cnkgLURpciAnUmVnaXN0cnk6OkhLRVlfTE9DQUxfTUFDSElORVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxQcm9kdWN0TmFtZScpCiAgICAgICAgICAgICAgICAkU2NyaXB0OldpbmRvd3NWZXJzaW9uID0gW3N0cmluZ10kKFF1ZXJ5LVJlZ2lzdHJ5IC1EaXIgJ1JlZ2lzdHJ5OjpIS0VZX0xPQ0FMX01BQ0hJTkVcU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cUmVsZWFzZUlkJykKICAgICAgICAgICAgICAgICRTY3JpcHQ6V2luZG93c1ZlcnNpb24gKz0gW3N0cmluZ10kKCcgKHswfSknIC1mIChRdWVyeS1SZWdpc3RyeSAtRGlyICdSZWdpc3RyeTo6SEtFWV9MT0NBTF9NQUNISU5FXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzIE5UXEN1cnJlbnRWZXJzaW9uXEN1cnJlbnRCdWlsZCcpKQogICAgICAgICAgICB9IAogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2NhbDpFbnZJbmZvID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgJ1dpbjMyX0NvbXB1dGVyU3lzdGVtJyB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5ICdNYW51ZmFjdHVyZXInLCdNb2RlbCcsJ1N5c3RlbUZhbWlseScKICAgICAgICAgICAgICAgICRTY3JpcHQ6Q29tcHV0ZXJNYW51ZmFjdHVyZXIgPSBbc3RyaW5nXSQoJExvY2FsOkVudkluZm8uJ01hbnVmYWN0dXJlcicpCiAgICAgICAgICAgICAgICAkU2NyaXB0OkNvbXB1dGVyRmFtaWx5ID0gW3N0cmluZ10kKCRMb2NhbDpFbnZJbmZvLidTeXN0ZW1GYW1pbHknKQogICAgICAgICAgICAgICAgJFNjcmlwdDpDb21wdXRlclByb2R1Y3ROYW1lID0gW3N0cmluZ10kKCRMb2NhbDpFbnZJbmZvLidNb2RlbCcpCiAgICAgICAgICAgICAgICAkTG9jYWw6T1NJbmZvID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgJ1dpbjMyX29wZXJhdGluZ3N5c3RlbScgfCBTZWxlY3QtT2JqZWN0IC1Qcm9wZXJ0eSAnQ2FwdGlvbicsJ1ZlcnNpb24nCiAgICAgICAgICAgICAgICAkU2NyaXB0OldpbmRvd3NFZGl0aW9uID0gW3N0cmluZ10kKCRMb2NhbDpPU0luZm8uJ0NhcHRpb24nKQogICAgICAgICAgICAgICAgJFNjcmlwdDpXaW5kb3dzVmVyc2lvbiA9IFtzdHJpbmddJCgkTG9jYWw6T1NJbmZvLidWZXJzaW9uJykKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIENyZWF0ZS1FbnZWYXJpYWJsZXMKCgogICAgICAgICNyZWdpb24gICAgUXVlcnktUmVnaXN0cnkKICAgICAgICBGdW5jdGlvbiBRdWVyeS1SZWdpc3RyeSB7CiAgICAgICAgICAgIFBhcmFtIChbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldIFtzdHJpbmddICREaXIpCiAgICAgICAgICAgICRMb2NhbDpPdXQgPSBbc3RyaW5nXTo6RW1wdHkKICAgICAgICAgICAgJExvY2FsOktleSA9IFtzdHJpbmddJCgkRGlyLlNwbGl0KCd7XH0nKVstMV0pCiAgICAgICAgICAgICRMb2NhbDpEaXIgPSBbc3RyaW5nXSQoJERpci5SZXBsYWNlKCRMb2NhbDpLZXksJycpKQogICAgICAgIAogICAgICAgICAgICAkTG9jYWw6RXhpc3RzID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAoJ3swfScgLWYgJERpcikgLU5hbWUgKCd7MH0nIC1mICRMb2NhbDpLZXkpIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScKICAgICAgICAgICAgaWYgKCRFeGlzdHMpIHsKICAgICAgICAgICAgICAgICRMb2NhbDpPdXQgPSAkTG9jYWw6RXhpc3RzLiRMb2NhbDpLZXkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJExvY2FsOk91dAogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIFF1ZXJ5LVJlZ2lzdHJ5CiAgICAjZW5kcmVnaW9uIFJlZ2lzdHJ5IEZ1bmN0aW9ucwoKCgogICAgI3JlZ2lvbiAgICBFZGl0LVNjaGVkdWxlZFRhc2sKICAgIGZ1bmN0aW9uIEVkaXQtU2NoZWR1bGVkVGFzayB7CiAgICAgICAgUGFyYW0oCiAgICAgICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRmYWxzZSldCiAgICAgICAgICAgIFtzdHJpbmddICRUYXNrTmFtZSA9ICRTY3JpcHQ6U2NoZWR1bGVkVGFza05hbWUKICAgICAgICApCgogICAgICAgICRUYXNrID0gR2V0LVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICRUYXNrTmFtZSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCgogICAgICAgIGlmICgkVGFzaykgewogICAgICAgICAgICBpZiAoJFNjcmlwdDpCb29sUmVtb3ZlU2NoZWR1bGVkVGFza0FmdGVyRmlyc3RTdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAkbnVsbCA9IFVucmVnaXN0ZXItU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJFRhc2sgLUNvbmZpcm06JGZhbHNlIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnUmVtb3ZpbmcgdGhlIFNjaGVkdWxlZCB0YXNrICJ7MH0iLiBTdWNjZXNzPyB7MX0nIC1mICgkVGFzay4nVGFza05hbWUnLCQ/LlRvU3RyaW5nKCkpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJExvY2FsOk5ld1NjaGVkVGltZSA9IFtkYXRldGltZV0kKFtkYXRldGltZV06OlRvZGF5LkFkZEhvdXJzKDEyKSkKICAgICAgICAgICAgICAgICRudWxsID0gU2V0LVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICRTY3JpcHQ6U2NoZWR1bGVkVGFza05hbWUgLVRyaWdnZXIgKE5ldy1TY2hlZHVsZWRUYXNrVHJpZ2dlciAtRGFpbHkgLUF0ICRMb2NhbDpOZXdTY2hlZFRpbWUpIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRWRpdGluZyBTY2hlZHVsZWQgdGFzayAiezB9IiB0byBzdGFydCBkYWlseSBhdCB7MX0uIFN1Y2Nlc3M/IHsyfS4nIC1mICgkU2NyaXB0OlNjaGVkdWxlZFRhc2tOYW1lLCRMb2NhbDpOZXdTY2hlZFRpbWUuJ0hvdXInLlRvU3RyaW5nKCksJD8uVG9TdHJpbmcoKSkpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnRm91bmQgbm8gU2NoZWR1bGVkIFRhc2sgd2l0aCBuYW1lICJ7MH0iLicgLWYgKCRUYXNrTmFtZSkpCiAgICAgICAgfQogICAgfQogICAgI2VuZHJlZ2lvbiBFZGl0LVNjaGVkdWxlZFRhc2sKCgogICAgI3JlZ2lvbiAgICBQcm9tcHQtUmVib290CiAgICBGdW5jdGlvbiBQcm9tcHQtUmVib290IHsKICAgICAgICAkTG9jYWw6VGltZVRvUmVib290SW5NaW51dGVzID0gW3VpbnQxNl0kKDYwKQogICAgICAgICRMb2NhbDpTdHJTaG9ydE1lc3NhZ2UgPSBbc3RyaW5nXSQoJ1dpbmRvd3Mgd2lsbCByZXN0YXJ0IGluIHswfSBtaW51dGVzIHRvIGZpbmlzaCBkZXZpY2UgY29uZmlndXJhdGlvbi4gU2F2ZSB5b3VyIHdvcmshJyAtZiAoJExvY2FsOlRpbWVUb1JlYm9vdEluTWludXRlcykpCiAgICAgICAgJG51bGwgPSBjbWQuZXhlIC9jICgnc2h1dGRvd24gL3IgL3QgezB9IC9jICJ7MX0iJyAtZiAoJExvY2FsOlRpbWVUb1JlYm9vdEluTWludXRlcyo2MCksJExvY2FsOlN0clNob3J0TWVzc2FnZSkgMj4mMQogICAgICAgIGlmICgtbm90KCQ/KSkgewogICAgICAgICAgICAkbnVsbCA9IGNtZC5leGUgL2MgKCdzaHV0ZG93biAvYScpIDI+JjEKICAgICAgICAgICAgJG51bGwgPSBjbWQuZXhlIC9jICgnc2h1dGRvd24gL3IgL3QgezB9IC9jICJ7MX0iJyAtZiAoJExvY2FsOlRpbWVUb1JlYm9vdEluTWludXRlcyo2MCksJExvY2FsOlN0clNob3J0TWVzc2FnZSkgMj4mMQogICAgICAgIH0KCiAgICAgICAgPCMgRk9SIEZVVFVSRSBFTkhBTkNFTUVOVFMKICAgICAgICBbc3RyaW5nXSAkTG9jYWw6U3RyTWVzc2FnZSA9ICdZb3VyIGNvbXB1dGVyIGFyZSBhd2FpdGluZyBhIHJlc3RhcnQ6JwogICAgICAgICRMb2NhbDpTdHJNZXNzYWdlICs9ICd7MH0gWW91ciBvcmdhbml6YXRpb24gcmVxdWlyZXMgeW91ciBoYXJkJyAtZiAiYHJgbiIKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9IGRyaXZlIHRvIGJlIGVuY3lwdGVkLiBJbiBvcmRlciB0bycgLWYgImByYG4iCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfSBmaW5pc2ggdGhpcyBwcm9jZXNzLCB5b3UgbmVlZCB0bycgLWYgImByYG4iCiAgICAgICAgJExvY2FsOlN0ck1lc3NhZ2UgKz0gJ3swfSByZXN0YXJ0IHlvdXIgY29tcHV0ZXIuIFlvdSBjYW4nIC1mICJgcmBuIgogICAgICAgICRMb2NhbDpTdHJNZXNzYWdlICs9ICd7MH0gZWl0aGVyIGRvIGl0IG1hbnVhbGx5LCBvciBpdCB3aWxsJyAtZiAiYHJgbiIKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9IGF1dG9tYXRpY2FsbHkgaGFwcGVuIGluJyAtZiAiYHJgbiIKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9IHsxfSBtaW51dGVzLicgLWYgImByYG4iLCRMb2NhbDpUaW1lVG9SZWJvb3RJbk1pbnV0ZXMKICAgICAgICAkTG9jYWw6U3RyTWVzc2FnZSArPSAnezB9ezB9IFNBVkUgWU9VUiBXT1JLIScgLWYgImByYG4iCiAgICAgICAgIz4KICAgIH0KICAgICNlbmRyZWdpb24gUHJvbXB0LVJlYm9vdCAgICAKI2VuZHJlZ2lvbiBGdW5jdGlvbnMKCgoKI3JlZ2lvbiBJbml0aWFsaXplCiAgICBMb2dXcml0ZSAoJyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIycpCiAgICBMb2dXcml0ZSAoJ1N0YXJ0aW5nIFRyaWdnZXIgQml0TG9ja2VyIHNjcmlwdC4nKQogICAgTG9nV3JpdGUgKCcjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMnKQogICAgTG9nV3JpdGUgKCcjIyMgR2V0IHN0YXRzLicpCiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAjIyBGZXRjaCBwcmV2IHJ1biByZXN1bHRzICMjCiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjICAgIAogICAgaWYgKC1ub3QoVGVzdC1QYXRoIC1QYXRoICRTY3JpcHQ6RmlsZVN0YXRzKSkgewogICAgICAgICRTY3JpcHQ6Q291bnRSdW5zID0gW3VpbnQxNl0kKDApCiAgICAgICAgJFNjcmlwdDpJc0ZpbmlzaGVkMXN0VGltZSA9ICRTY3JpcHQ6SXNFbmNyeXB0ZWQgPSAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gJFNjcmlwdDpJc0JhY2t1cE9EID0gJFNjcmlwdDpJc0JhY2t1cEFBRCA9IFtib29sXSQoJGZhbHNlKQogICAgICAgICRTY3JpcHQ6T1NEcml2ZUtleUlEID0gJFNjcmlwdDpPU0RyaXZlUHJvdGVjdGlvblBhc3N3b3JkID0gW3N0cmluZ106OkVtcHR5CiAgICAgICAgTG9nV3JpdGUgKCcjIEZpcnN0IHJ1biEnKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJElucHV0U3RyaW5nID0gW3N0cmluZ1tdXSQoR2V0LUNvbnRlbnQgLVBhdGggJFNjcmlwdDpGaWxlU3RhdHMpLlNwbGl0KFtFbnZpcm9ubWVudF06Ok5ld0xpbmUpCiAgICAgICAgJFNjcmlwdDpDb3VudFJ1bnMgPSBbdWludDE2XSQoJElucHV0U3RyaW5nWzBdKQogICAgICAgICRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUgPSBbdWludDE2XSQoJElucHV0U3RyaW5nWzFdKQogICAgICAgICRTY3JpcHQ6SXNFbmNyeXB0ZWQgPSBbdWludDE2XSQoJElucHV0U3RyaW5nWzJdKQogICAgICAgICRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3cgPSBbdWludDE2XSQoJElucHV0U3RyaW5nWzNdKQogICAgICAgICRTY3JpcHQ6SXNCYWNrdXBPRCA9IFt1aW50MTZdJCgkSW5wdXRTdHJpbmdbNF0pCiAgICAgICAgJFNjcmlwdDpJc0JhY2t1cEFBRCA9IFt1aW50MTZdJCgkSW5wdXRTdHJpbmdbNV0pCiAgICAgICAgJFNjcmlwdDpPU0RyaXZlS2V5SUQgPSBbc3RyaW5nXSQoJElucHV0U3RyaW5nWzZdKQogICAgICAgICRTY3JpcHQ6T1NEcml2ZVByb3RlY3Rpb25QYXNzd29yZCA9IFtzdHJpbmddJCgkSW5wdXRTdHJpbmdbN10pCiAgICAgICAgTG9nV3JpdGUgKCcjIFByZXZpb3VzIHJ1biByZXN1bHRzOicpCiAgICAgICAgV3JpdGUtU3RhdHMgLVByZXZpb3VzT25seSAkdHJ1ZQogICAgfQogICAgCgogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgIyMjIyBHZXQgY3VycmVudCBzdGF0dXMgIyMjIwogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAgCiAgICBMb2dXcml0ZSAoJyMgQ3VycmVudCBzdGF0dXM6JykKICAgICAgICAKICAgICMgR2V0IEN1cnJlbnQgU3RhdHVzIGZvciBPUyBEcml2ZQogICAgR2V0LUJpdExvY2tlclN0YXR1cyAtRHJpdmVMZXR0ZXIgJFNjcmlwdDpPU0RyaXZlTGV0dGVyCiAgICBSZWZyZXNoLUJpdExvY2tlclZhcmlhYmxlc0ZvckN1cnJlbnRWb2x1bWUgLURyaXZlTGV0dGVyICRTY3JpcHQ6T1NEcml2ZUxldHRlcgogICAgCgogICAgaWYgKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFcpIHsKICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkgewogICAgICAgICAgICAkU2NyaXB0OklzRW5jcnlwdGVkID0gW2Jvb2xdJCgkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25TdGF0dXMgLWVxICRTY3JpcHQ6Qml0TG9ja2VyVm9sdW1lRW5jcnlwdGlvblN0YXR1c2VzWzJdKQogICAgICAgIH0KICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSkgewogICAgICAgICAgICAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gW2Jvb2xdJCgkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMgLWVxIDEpCiAgICAgICAgfSAgICAgICAgICAgICAgICAgICAKICAgIH0KICAgIGVsc2UgewogICAgICAgICRTY3JpcHQ6SXNFbmNyeXB0ZWQgPSAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3ID0gW2Jvb2xdJCgkZmFsc2UpCiAgICB9CgoKICAgICMgT3RoZXIgRml4ZWQgRHJpdmVzCiAgICAjVE9ETwogICAgPCMKICAgIFtTdHJpbmdbXV0gJFNjcmlwdDpGaXhlZFZvbHVtZXNMZXR0ZXJzID0gQCgoR2V0LVZvbHVtZSB8IGAKICAgICAgICBXaGVyZS1PYmplY3QgeyRfLkRyaXZlVHlwZSAtZXEgJ0ZpeGVkJyAtYW5kICgtbm90KFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRfLkRyaXZlTGV0dGVyKSkpfSB8IGAKICAgICAgICBXaGVyZS1PYmplY3QgeyRfLkRyaXZlTGV0dGVyIC1uZSAkT1NEcml2ZUxldHRlci5SZXBsYWNlKCc6JywnJyl9KS5Ecml2ZUxldHRlcikKICAgIAogICAgJFNjcmlwdDpGaXhlZFZvbHVtZXNMZXR0ZXJzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgIGlmICgtbm90KFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRfKSkpIHsKICAgICAgICAgICAgR2V0LUJpdGxvY2tlclN0YXR1cyAtRHJpdmVMZXR0ZXIgJF8KICAgICAgICAgICAgaWYgKChHZXQtVmFyaWFibGUgLU5hbWUgKCd7MH1Db3VudFByb3RlY3Rpb25LZXlzJyAtZiAkXykgLVNjb3BlICdTY3JpcHQnKS5MZW5ndGggLWd0IDApIHsKICAgICAgICAgICAgICAgIFtzdHJpbmdbXV0gJFNjcmlwdDpPdGhlckVuY3J5cHRlZERyaXZlcyArPSBAKCRfKQogICAgICAgICAgICB9CiAgICAgICAgfSAgICAgCiAgICB9Iz4KCiAgICBXcml0ZS1TdGF0cwojZW5kcmVnaW9uIEluaXRpYWxpemUKICAgIAoKCiNyZWdpb24gTWFpbgojcmVnaW9uIEVuY3J5cHRpb24KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMgQml0TG9ja2VyIEVuY3J5cHRpb24gIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKTG9nV3JpdGUgKCcjIyMgQml0TG9ja2VyIEVuY3J5cHRpb24nKQoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgQml0TG9ja2VyIEVuY3J5cHRpb24gb2YgT1MgRHJpdmUgICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojcmVnaW9uIEJpdExvY2tlciBFbmNyeXB0aW9uIG9mIE9TIERyaXZlCgpMb2dXcml0ZSAoJyMgQml0TG9ja2VyIEVuY3J5cHRpb24gb2YgT1MgRHJpdmUnKQppZiAoJFNjcmlwdDpJc0VuY3J5cHRlZCkgewogICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBpcyBhbHJlYWR5IGZ1bGx5IGVuY3J5cHRlZC4nKQp9CmVsc2UgewogICAgJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9IFtib29sXSQoJHRydWUpCiAgICAKICAgICMgSWYgJ0Z1bGx5RW5jcnlwdGVkJywgYW5kIFRQTSBwcmVzZW50CiAgICAjIyBNZWFucyB0aGF0IE9TIERyaXZlIGlzIHN1Y2Nlc3NmdWxseSBlbmNyeXB0ZWQgd2l0aCBCaXRMb2NrZXIKICAgIGlmICgoJFNjcmlwdDpWb2x1bWVFbmNyeXB0aW9uU3RhdHVzIC1lcSAkU2NyaXB0OkJpdExvY2tlclZvbHVtZUVuY3J5cHRpb25TdGF0dXNlc1syXSkgLWFuZCAkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzBdKSB7CiAgICAgICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBpcyBmdWxseSBlbmNyeXB0ZWQhJykKICAgICAgICAkU2NyaXB0OklzRW5jcnlwdGVkID0gJHRydWUKICAgIH0KICAgIAoKICAgICMgSWYgJ0VuY3J5cHRpb25JblByb2dyZXNzJyBhbmQgVFBNIHByZXNlbnQKICAgICMjIE1lYW5zIGNvbXB1dGVyIGhhcyByZXN0YXJ0ZWQgYWZ0ZXIgQml0TG9ja2VyIGVuY3J5cHRpb24gd2FzIGVuYWJsZWQuIFdhaXRpbmcgZm9yIHRoZSB2b2x1bWUgdG8gZ2V0IGVuY3J5cHRlZAogICAgZWxzZWlmICgkU2NyaXB0OlZvbHVtZUVuY3J5cHRpb25TdGF0dXMgLWVxICRTY3JpcHQ6Qml0TG9ja2VyVm9sdW1lRW5jcnlwdGlvblN0YXR1c2VzWzFdIC1hbmQgJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkgewogICAgICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgZW5jcnlwdGlvbiBpcyBpbiBwcm9ncmVzczonKQogICAgICAgIExvZ1dyaXRlICgnUmVzdGFydCBoYXZlIHRha2VuIHBsYWNlLCBhbmQgZW5jcnlwdGlvbiBoYXMgc3RhcnRlZC4nKQogICAgICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgRW5jcnlwdGlvbiBQZXJjZW50YWdlOiB7MH0lLicgLWYgKCRTY3JpcHQ6Vm9sdW1lRW5jcnlwdGlvblBlcmNlbnRhZ2UpKQogICAgICAgIExvZ1dyaXRlICgnQ2FuIGNvbnRpbnVlIHRvIGNoZWNrIGlmIFJlY292ZXJ5IFBhc3N3b3JkIGlzIHByZXNlbnQsIGFuZCBiYWNrdXAgaXQuJykKICAgIH0KCgogICAgIyBJZiAnRnVsbHlEcmVjdHlwdGVkJyAgICAgCiAgICBlbHNlaWYgKCRTY3JpcHQ6Vm9sdW1lRW5jcnlwdGlvblN0YXR1cyAtZXEgJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMF0pIHsgICAgICAgIAogICAgICAgICMgSWYgJ0Z1bGx5RHJlY3R5cHRlZCcgYnV0IHRoZXJlIGV4aXN0cyBhIFRQTQogICAgICAgICMjIE1lYW5zIHRoYXQgZW5jcnlwdGlvbiBoYXMgc3RhcnRlZCwgYnV0IGNvbXB1dGVyIGlzIGF3YWl0aW5nIHJlc3RhcnQKICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQVyAtYW5kICRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0pIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBFbmNyeXB0aW9uIGhhcyBzdGFydGVkLCBidXQgY29tcHV0ZXIgaGFzIG5vdCBiZWVuIHJlc3RhcnRlZCB5ZXQuJykKICAgICAgICAgICAgTG9nV3JpdGUgKCdPUyBEcml2ZSBFbmNyeXB0aW9uIFBlcmNlbnRhZ2U6IHswfSUuJyAtZiAoJFNjcmlwdDpWb2x1bWVFbmNyeXB0aW9uUGVyY2VudGFnZSkpCiAgICAgICAgICAgIExvZ1dyaXRlICgnQ2FuIGNvbnRpbnVlIHRvIGNoZWNrIGlmIFJlY292ZXJ5IFBhc3N3b3JkIGlzIHByZXNlbnQsIGFuZCBiYWNrdXAgaXQuJykKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgIyBFbHNlCiAgICAgICAgIyMgTWVhbnMgQml0TG9ja2VyIHNob3VsZCBiZSBlbmFibGVkCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgaXMgbm90IGVuY3J5cHRlZC4nKQogICAgICAgICAgICBMb2dXcml0ZSAoJ0F0dGVtcHRpbmcgdG8gRW5hYmxlIEJpdExvY2tlciBvbiBPUyBkcml2ZSAoezB9KScgLWYgKCRPU0RyaXZlKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2V0ICRTa2lwSGFyZHdhcmVUZXN0CiAgICAgICAgICAgICRTa2lwSGFyZHdhcmVUZXN0ID0gW2Jvb2xdJCgKICAgICAgICAgICAgICAgIGlmICgkU2NyaXB0OkJvb2xTa2lwSGFyZHdhcmVUZXN0T25OZXdseUVucm9sbGVkRGV2aWNlKSB7CiAgICAgICAgICAgICAgICAgICAgIyBTZXQgdG8gdHJ1ZSBpZiBpdCdzIGxlc3MgdGhhbiBvbmUgZGF5IHNpbmNlIGVucm9sbG1lbnQuCiAgICAgICAgICAgICAgICAgICAgJFBhdGggPSAoJ3swfVxNaWNyb3NvZnQgSW50dW5lIE1hbmFnZW1lbnQgRXh0ZW5zaW9uJyAtZiAoJHtlbnY6UHJvZ3JhbUZpbGVzKHg4Nil9KSkKICAgICAgICAgICAgICAgICAgICBbYm9vbF0kKAogICAgICAgICAgICAgICAgICAgICAgICBbZGF0ZXRpbWVdJCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbYm9vbF0kKFRlc3QtUGF0aCAtUGF0aCAkUGF0aCAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyeXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJERhdGUgPSBbZGF0ZXRpbWVdJChHZXQtSXRlbSAtUGF0aCAkUGF0aCAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJ0NyZWF0aW9uVGltZVV0YycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkRGF0ZSAtbmUgW2RhdGV0aW1lXTo6TWluVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICREYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRldGltZV06OlV0Y05vdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhdGNoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGF0ZXRpbWVdOjpVdGNOb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGF0ZXRpbWVdOjpVdGNOb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKSAtZ3QgW2RhdGV0aW1lXTo6VXRjTm93LkFkZERheXMoLTEpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJGZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgVHJ5IHRvIGVuYWJsZSBCaXRMb2NrZXIKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICMgRW5hYmxlIEJpdExvY2tlciB1c2luZyBUUE0KICAgICAgICAgICAgICAgICRudWxsID0gRW5hYmxlLUJpdExvY2tlciAtTW91bnRQb2ludCAkT1NEcml2ZUxldHRlciAtVHBtUHJvdGVjdG9yIC1Vc2VkU3BhY2VPbmx5OiRmYWxzZSAtSGFyZHdhcmVFbmNyeXB0aW9uOiRmYWxzZSAtU2tpcEhhcmR3YXJlVGVzdDokU2tpcEhhcmR3YXJlVGVzdCAtRXJyb3JBY3Rpb24gJ0NvbnRpbnVlJwogICAgICAgICAgICAgICAgaWYgKCQ/KSB7CiAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzZnVsbHkgZW5hYmxlZCBiaXRsb2NrZXIuJykgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0ZhaWxlZCBFbmFibGluZyBCaXRsb2NrZXIgVHBtUHJvdGVjdG9yLCBpdGBzIHByb2JhYmx5IGFscmVhZHkgZW5hYmxlZCcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gCiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIExvZ0Vycm9ycwogICAgICAgICAgICAgICAgRW5hYmxlLUJpdExvY2tlciAtTW91bnRQb2ludCAkT1NEcml2ZUxldHRlciAtVHBtUHJvdGVjdG9yIC1Vc2VkU3BhY2VPbmx5OiRmYWxzZSAtSGFyZHdhcmVFbmNyeXB0aW9uOiRmYWxzZSAtU2tpcEhhcmR3YXJlVGVzdDokU2tpcEhhcmR3YXJlVGVzdCAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1dpbGwgYXR0ZW1wdCB0byBFbmFibGUgQml0TG9ja2VyIGFueXdheSBhbmQgdGhlbiBjb250aW51ZS4gU3VjY2Vzcz8gezB9JyAtZiAoJD8pKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdEaWQgd2UgYWN0dWFsbHkgZW5hYmxlIEJpdExvY2tlcj8nKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIFJlZnJlc2ggVmFyaWFibGVzCiAgICAgICAgICAgICAgICBHZXQtQml0TG9ja2VyU3RhdHVzIC1Ecml2ZUxldHRlciAkT1NEcml2ZUxldHRlcgogICAgICAgICAgICAgICAgUmVmcmVzaC1CaXRMb2NrZXJWYXJpYWJsZXNGb3JDdXJyZW50Vm9sdW1lIC1Ecml2ZUxldHRlciAkT1NEcml2ZUxldHRlcgoKICAgICAgICAgICAgICAgICMgQ2hlY2sgcmVzdWx0CiAgICAgICAgICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQVyAtYW5kICRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFdbMF0pIHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1RQTSBwcmVzZW50IGZvciBPUyBEcml2ZT8gezB9JyAtZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBQcm9tcHQgcmVib290IGlmIG5vdCAkU2tpcEhhcmR3YXJlVGVzdAogICAgICAgICAgICAgICAgICAgIGlmICgkU2tpcEhhcmR3YXJlVGVzdCkgewogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ05vdCBwcm9tcHRpbmcgZm9yIHJlYm9vdCAtICRTa2lwSGFyZHdhcmVUZXN0IGlzICR0cnVlLicpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1Byb21wdGluZyByZWJvb3QgLSAkU2tpcEhhcmR3YXJlVGVzdCBpcyAkZmFsc2UuJykKICAgICAgICAgICAgICAgICAgICAgICAgUHJvbXB0LVJlYm9vdAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRVJST1IsIG5vdCBlbmNyeXB0ZWQuIFRQTSBub3QgcHJlc2VudCBmb3IgT1MgRHJpdmUnKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgIyBJZiBzY2VuYXJpbyBmaXRzIG5vbmUgb2YgdGhlIGNhc2VzIGFib3ZlLi4KICAgIGVsc2UgewogICAgICAgIExvZ1dyaXRlICgnTmVpdGhlciAiezB9IiwgInsxfSIgb3IgInsyfSIuJyAtZiAoJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMF0sJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMV0sJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMl0pKQogICAgfQp9CiNlbmRyZWdpb24gQml0TG9ja2VyIEVuY3J5cHRpb24gb2YgT1MgRHJpdmUKCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFByb3RlY3Rpb24gUGFzc3dvcmQgZm9yIE9TIERyaXZlICAjCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKI3JlZ2lvbiBQcm90ZWN0aW9uIFBhc3N3b3JkIGZvciBPUyBEcml2ZQoKTG9nV3JpdGUgKCcjIEJpdExvY2tlciBQcm90ZWN0aW9uIFBhc3N3b3JkIGZvciBPUyBEcml2ZScpCiMgSWYgJ0Z1bGx5RW5jcnlwdGVkJywgb3IgVE1QIGlzIHByZXNlbnQKaWYgKCRTY3JpcHQ6SXNFbmNyeXB0ZWQgLW9yICgkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXIC1hbmQgJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1swXSkpIHsKICAgIAogICAgCiAgICAjIElmIHdlJ3JlIGRvbmUgd2l0aCByZWNvdmVyeSBwYXNzd29yZChzKSBhbHJlYWR5CiAgICBpZiAoJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyAtYW5kICgkU2NyaXB0OkNvdW50UmVjb3ZlcnlQYXNzd29yZHMgLWVxIDEpKSB7CiAgICAgICAgTG9nV3JpdGUgJ1JlY292ZXJ5IFBhc3N3b3JkIGZvciBPUyBEcml2ZSBpcyBhbHJlYWR5IHByZXNlbnQnCiAgICB9CiAgICAKCiAgICAjIElmIHdlJ3JlIG5vdCBkb25lIHdpdGggcmVjb3ZlcnkgcGFzc3dvcmQocykKICAgIGVsc2UgeyAgICAgICAgCiAgICAgICAgJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9IFtib29sXSQoJHRydWUpCiAgICAgICAgJExvY2FsOlN1Y2Nlc3MgPSBbYm9vbF0kKCRmYWxzZSkKICAgICAgICAKICAgICAgICAKICAgICAgICAjIElmIHRoZXJlIGV4aXN0cyBCaXRMb2NrZXIgRW5jcnlwdGlvbiBSZWNvdmVyeSBQYXNzd29yZCAgICAgICAKICAgICAgICBpZiAoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSkgewogICAgICAgICAgICAKCiAgICAgICAgICAgICMgSWYgdGhlcmVzIGlzIF9hXyBQcm90ZWN0aW9uUGFzc3dvcmQsIHdlJ3JlIGRvbmUKICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZXEgMSkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgJ09ubHkgYSBwYXNzd29yZCBwcmVzZW50JwogICAgICAgICAgICAgICAgJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyA9ICR0cnVlCiAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAjIElmIHRoZXJlIGlzIG11bHRpcGxlIFJlY292ZXJ5UGFzc3dvcmRzLCB3ZSBuZWVkIHRvIHJlbW92ZSBhbGwgYnV0IG9uZQogICAgICAgICAgICBlbHNlaWYgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZ3QgMSkgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgJ011bHRpcGxlIHBhc3N3b3JkcyBwcmVzZW50JwogICAgICAgICAgICAgICAgV3JpdGUtUmVjb3ZlcnlQYXNzd29yZAogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdXaWxsIHJlbW92ZSBhbGwgYnV0IHRoZSBmaXJzdCBvbmUnKQogICAgICAgICAgICAgICAgJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICAgICBpZiAoJF8uJ0tleVByb3RlY3RvcklkJyAtbmUgJFNjcmlwdDpBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLidLZXlQcm90ZWN0b3JJZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJG51bGwgPSBSZW1vdmUtQml0TG9ja2VyS2V5UHJvdGVjdG9yIC1Nb3VudFBvaW50ICRPU0RyaXZlTGV0dGVyIC1LZXlQcm90ZWN0b3JJZCAkXy4nS2V5UHJvdGVjdG9ySWQnCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkPykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzZnVsbHkgcmVtb3ZlZCB8IEtleVByb3RlY3RvcklkICJ7MH0iIHwgUmVjb3ZlcnlQYXNzd29yZCAiezF9IicgLWYgKCRfLidLZXlQcm90ZWN0b3JJZCcsJF8uJ1JlY292ZXJ5UGFzc3dvcmQnKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzZnVsbHkgc2tpcHBlZCB0aGUgZmlyc3Qga2V5LiB8IEtleVByb3RlY3RvcklkICJ7MH0iIHwgUmVjb3ZlcnlQYXNzd29yZCAiezF9IicgLWYgKCRfLidLZXlQcm90ZWN0b3JJZCcsJF8uJ1JlY292ZXJ5UGFzc3dvcmQnKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgR2V0LUJpdExvY2tlclN0YXR1cwogICAgICAgICAgICAgICAgaWYgKCRTY3JpcHQ6Vm9sdW1lSGFzVFBNYW5kUFcgLWFuZCAkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzFdIC1hbmQgKCRTY3JpcHQ6Q291bnRSZWNvdmVyeVBhc3N3b3JkcyAtZXEgMSkpIHsKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICMgVGhpcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlCiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgJ0VSUk9SOiBSZWNvdmVyeVBhc3N3b3JkIHByZXNlbnQsIGJ1dCBjb3VudCA8IDEnCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIAogICAgICAgICNyZWdpb24gQWRkIFByb3RlY3Rpb24gUGFzc3dvcmQgSWYgTm9uZSBQcmVzZW50CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnTm8gQml0TG9ja2VyIFJlY292ZXJ5IFBhc3N3b3JkcyBmb3VuZCBmb3IgT1MgRHJpdmUgezB9LCBjcmVhdGluZyBvbmUuJyAtZiAoJE9TRHJpdmVMZXR0ZXIpKQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJG51bGwgPSBBZGQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIC1Nb3VudFBvaW50ICRPU0RyaXZlTGV0dGVyIC1SZWNvdmVyeVBhc3N3b3JkUHJvdGVjdG9yIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScgLVdhcm5pbmdBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IEVuYWJsZS1CaXRMb2NrZXIgLU1vdW50UG9pbnQgJE9TRHJpdmVMZXR0ZXIgLVJlY292ZXJ5UGFzc3dvcmRQcm90ZWN0b3IgLVVzZWRTcGFjZU9ubHk6JGZhbHNlIC1IYXJkd2FyZUVuY3J5cHRpb246JGZhbHNlIC1Ta2lwSGFyZHdhcmVUZXN0OiRmYWxzZSAtRXJyb3JBY3Rpb24gJ1N0b3AnCiAgICAgICAgICAgICAgICAgICAgaWYgKCQ/KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICB9IAogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBMb2dFcnJvcnMKICAgICAgICAgICAgICAgICRudWxsID0gQWRkLUJpdExvY2tlcktleVByb3RlY3RvciAtTW91bnRQb2ludCAkT1NEcml2ZUxldHRlciAtUmVjb3ZlcnlQYXNzd29yZFByb3RlY3RvciAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnIC1XYXJuaW5nQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgICAgICAgICAgaWYgKCRMYXN0RXhpdENvZGUgLWVxIDApIHsKICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IEVuYWJsZS1CaXRMb2NrZXIgLU1vdW50UG9pbnQgJE9TRHJpdmVMZXR0ZXIgLVJlY292ZXJ5UGFzc3dvcmRQcm90ZWN0b3IgLVVzZWRTcGFjZU9ubHk6JGZhbHNlIC1IYXJkd2FyZUVuY3J5cHRpb246JGZhbHNlIC1Ta2lwSGFyZHdhcmVUZXN0OiRmYWxzZSAtRXJyb3JBY3Rpb24gJ1NpbGVudGx5Q29udGludWUnCiAgICAgICAgICAgICAgICAgICAgaWYgKCQ/KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmluYWxseSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1RyaWVkIHRvIGFkZCBCaXRMb2NrZXIgUmVjb3ZlcnlQYXNzd29yZFByb3RlY3Rvci4gU3VjY2Vzcz8gezB9LicgLWYgKCRMb2NhbDpTdWNjZXNzKSkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgI2VuZHJlZ2lvbiBBZGQgUHJvdGVjdGlvbiBQYXNzd29yZCBJZiBOb25lIFByZXNlbnQKCiAgICAgICAgCgogICAgICAgICMgQ291bnQgYW5kIGxpc3QgZXhpc3RpbmcgUmVjb3ZlcnlQYXNzd29yZCwgb25seSB3cml0ZSBzdWNjZXNzIGlmIHRoZXJlcyBvbmUgICAgICAgIAogICAgICAgIGlmICgkTG9jYWw6U3VjY2VzcykgewogICAgICAgICAgICBMb2dXcml0ZSAnQ2hlY2tpbmcgaWYgdGhlcmUgaXMgb25seSBvbmUgUHJvdGVjdGlvbiBQYXNzd29yZC4nCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJlZnJlc2ggVmFyaWFibGVzIGZvciBjdXJyZW50IHZvbHVtZQogICAgICAgICAgICBHZXQtQml0TG9ja2VyU3RhdHVzIC1Ecml2ZUxldHRlciAkT1NEcml2ZUxldHRlcgogICAgICAgICAgICBSZWZyZXNoLUJpdExvY2tlclZhcmlhYmxlc0ZvckN1cnJlbnRWb2x1bWUgLURyaXZlTGV0dGVyICRPU0RyaXZlTGV0dGVyCgogICAgICAgICAgICAjIENoZWNrIHJlc3VsdHMKICAgICAgICAgICAgJExvY2FsOkJvb2xUZW1wID0gW2Jvb2xdJChpZigkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXKXsoJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSl9ZWxzZXskZmFsc2V9KQogICAgICAgICAgICBMb2dXcml0ZSAoJ1Byb3RlY3Rpb24gUGFzc3dvcmQgUHJlc2VudD8gezB9JyAtZiAoJExvY2FsOkJvb2xUZW1wKSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCRMb2NhbDpCb29sVGVtcCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAoJFNjcmlwdDpDb3VudFJlY292ZXJ5UGFzc3dvcmRzIC1lcSAxKSB7ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU1VDQ0VTUywga2V5cyBsZWZ0OiAxLicpCiAgICAgICAgICAgICAgICAgICAgJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyA9ICR0cnVlCiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAnRkFJTCwga2V5cyBsZWZ0OiB7MH0uJyAtZiAoJFNjcmlwdDpDb3VudFJlY292ZXJ5UGFzc3dvcmRzKQogICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNQcm90ZWN0aW9uUGFzc3cgPSAkZmFsc2UKICAgICAgICAgICAgICAgIH0gIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdGQUlMLCBubyBQcm90ZWN0aW9uIFBhc3N3b3JkIGZvdW5kJykKICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnU29tZXRoaW5nIGZhaWxlZCcpCiAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgCiAgICB9CiAgICAjZW5kcmVnaW9uIElmIHRoZXJlcyAwIG9yIG11bHRpcGxlIFByb3RlY3Rpb25zUGFzc3dvcmQocykgCn0KCgojIE5vdCBlbmNyeXB0ZWQgPSBObyBtYWtpbmcgb2YgUmVjb3ZlcnlQYXNzd29yZAplbHNlIHsKICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgaXMgIkZ1bGx5RGVjcnlwdGVkIiBhbmQgdGhlcmUgZXhpc3RzIG5vICJUUE0iLicpCiAgICBMb2dXcml0ZSAoJ0JpdExvY2tlciBSZWNvdmVyeVBhc3N3b3JkIGNhbiBub3QgYmUgYWRkZWQgYXQgdGhpcyB0aW1lLicpCiAgICBMb2dXcml0ZSAoJ1JlY292ZXJ5IFBhc3N3b3JkIHByZXNlbnQ/IHswfScgLWYgKFtzdHJpbmddJChpZigkU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXKXskU2NyaXB0OlZvbHVtZUhhc1RQTWFuZFBXWzBdfWVsc2V7JGZhbHNlfSkpKQogICAgJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdyA9ICRmYWxzZQp9CgojIFdyaXRlIHJlY292ZXJ5IHBhc3N3b3JkKHMpIGlmIGFueXRoaW5nIGNoYW5nZWQgdGhpcyBydW50aW1lCmlmICgkU2NyaXB0OkJvb2xEaWRBbnl0aGluZ0NoYW5nZVRoaXNSdW50aW1lIC1hbmQgJFNjcmlwdDpWb2x1bWVIYXNUUE1hbmRQV1sxXSkgewogICAgV3JpdGUtUmVjb3ZlcnlQYXNzd29yZAp9CiNlbmRyZWdpb24gUHJvdGVjdGlvbiBQYXNzd29yZCBmb3IgT1MgRHJpdmUKI2VuZHJlZ2lvbiBFbmNyeXB0aW9uCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMjIyBCQUNLVVAgIyMjIyMjCiMjIyMjIyMjIyMjIyMjIyMjIyMjCiNyZWdpb24gQmFja3VwCgoKTG9nV3JpdGUgKCcjIyMgQmFja3VwIFByb3RlY3Rpb24gUGFzc3dvcmQgdG8gQXp1cmVBQUQgYW5kIE9uZURyaXZlNEInKQoKIyBDaGVjayBmb3IgY2hhbmdlcyBpZiBGaW5pc2hlZDFzdFRpbWUKaWYgKCRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUgLW9yICRTY3JpcHQ6SXNCYWNrdXBBQUQgLWFuZCBbYm9vbF0kKFtib29sXSQoJFNjcmlwdDpCb29sQmFja3VwVG9PbmVEcml2ZUZvckJ1c2luZXNzIC1hbmQgJFNjcmlwdDpJc0JhY2t1cE9EKSAtb3IgW2Jvb2xdJCgtbm90KCRTY3JpcHQ6Qm9vbEJhY2t1cFRvT25lRHJpdmVGb3JCdXNpbmVzcykpKSkgewogICAgTG9nV3JpdGUgKCdEcml2ZSBpcyBhbHJlYWR5IGJhY2tlZCB1cC4nKQogICAgTG9nV3JpdGUgKCdXaWxsIGNoZWNrIGlmIGFueXRoaW5nIGhhcyBjaGFuZ2VkLicpCgogICAgaWYgKENoZWNrLUlmQml0TG9ja2VyUFdIYXNDaGFuZ2VkKSB7CiAgICAgICAgTG9nV3JpdGUgJ1NvbWV0aGluZyBoYXMgY2hhbmdlZCwgQml0TG9ja2VyIFJlY292ZXJ5IFByb3RlY3Rpb24gUGFzc3dvcmQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSBvbmUgYmFja2VkIHVwLicKICAgICAgICAkU2NyaXB0OklzQmFja3VwQUFEID0gJFNjcmlwdDpJc0JhY2t1cE9EID0gJGZhbHNlCiAgICAgICAgJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9ICR0cnVlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBMb2dXcml0ZSAnTm90aGluZyBoYXMgY2hhbmdlZCwgQml0TG9ja2VyIFJlY292ZXJ5IFByb3RlY3Rpb24gUGFzc3dvcmQgaXMgdGhlIHNhbWUgYXMgdGhlIG9uZSBwcmV2aW91c2x5IGJhY2tlZCB1cC4nCiAgICB9Cn0KCgojIElmIG5vIGJhY2t1cHMKaWYgKC1ub3QoJFNjcmlwdDpJc0JhY2t1cEFBRCAtYW5kIFtib29sXSQoW2Jvb2xdJCgkU2NyaXB0OkJvb2xCYWNrdXBUb09uZURyaXZlRm9yQnVzaW5lc3MgLWFuZCAkU2NyaXB0OklzQmFja3VwT0QpIC1vciBbYm9vbF0kKC1ub3QoJFNjcmlwdDpCb29sQmFja3VwVG9PbmVEcml2ZUZvckJ1c2luZXNzKSkpKSkgewogICAgIyBJZiBQcm90ZWN0aW9uUGFzc3dvcmQocykgZXhpc3QKICAgIGlmICgkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3KSB7CiAgICAgICAgICAgIAogICAgICAgIExvZ1dyaXRlICgnT1MgRHJpdmUgaXMgZW5jcnlwdGVkLCBhbmQgdGhlcmUgYXJlIHswfSBQcm90ZWN0aW9uUGFzc3dvcmQocykgcHJlc2VudC4nIC1mICgkU2NyaXB0OkFycmF5UmVjb3ZlcnlQYXNzd29yZHMuJ0NvdW50JykpCiAgICAgICAgTG9nV3JpdGUgKCdXcml0aW5nIGV4aXN0aW5nIFJlY292ZXJ5UGFzc3dvcmQgZm9yIGN1cnJlbnQgZHJpdmUsIGZvciBmdXR1cmUgcmVmZXJlbmNlLi4uJykKICAgICAgICAkbnVsbCA9IENoZWNrLUlmQml0TG9ja2VyUFdIYXNDaGFuZ2VkCiAgICAgICAgCiAgICAgICAgTG9nV3JpdGUgKCdDb250aW51aW5nIHdpdGggYmFja3VwLicpCgogICAgCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgIyBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgYmFja3VwCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgI3JlZ2lvbiBCYWNrdXAgT25lRHJpdmUgZm9yIEJ1c2luZXNzCiAgICAKICAgICAgICBMb2dXcml0ZSAoJyMgQmFja3VwIHRvIE9uZURyaXZlJykKICAgICAgICBpZiAoLW5vdCRTY3JpcHQ6Qm9vbEJhY2t1cFRvT25lRHJpdmVGb3JCdXNpbmVzcykgewogICAgICAgICAgICBMb2dXcml0ZSAoJ0Rpc2FibGVkIGluIHNjcmlwdCBzZXR0aW5ncy4nKQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgTG9nV3JpdGUgKCdFbmFibGVkIGluIHNjcmlwdCBzZXR0aW5ncy4nKQogICAgICAgICAgICBpZiAoJFNjcmlwdDpJc0JhY2t1cE9EKSB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0FscmVhZHkgZG9uZScpCiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSA9ICR0cnVlCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgVHJ5IHsKICAgICAgICAgICAgICAgICAgICAjIEdldCBDdXJyZW50IFVzZXIgYXMgU2VjdXJpdHlJZGVudGlmaWVyCiAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QoJFNjcmlwdDpQYXRoRGlyUm9vdENVKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6UGF0aERpclJvb3RDVSA9IFtzdHJpbmddJCgnUmVnaXN0cnk6OkhLRVlfVVNFUlNcezB9XCcgLWYgKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLk5UQWNjb3VudF06Om5ldygoR2V0LVByb2Nlc3MgLU5hbWUgJ2V4cGxvcmVyJyAtSW5jbHVkZVVzZXJOYW1lIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJ1VzZXJOYW1lJyAtRmlyc3QgMSkpLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS4nVmFsdWUnKSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYoKC1ub3QoJD8pKSAtb3IgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFBhdGhEaXJSb290Q1UpKXtCcmVha30KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgR2V0IE9uZURyaXZlIGZvciBCdXNpbmVzcyBwYXRoIGZyb20gcmVnaXN0cnkgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRSZWdWYWx1ZXMgPSBbYXJyYXldJChHZXQtQ2hpbGRJdGVtIC1QYXRoICgnezB9XFNPRlRXQVJFXE1pY3Jvc29mdFxPbmVEcml2ZVxBY2NvdW50c1wnIC1mICgkUGF0aERpclJvb3RDVSkpIHwgV2hlcmUtT2JqZWN0IC1Qcm9wZXJ0eSAnTmFtZScgLWxpa2UgJypcQnVzaW5lc3MqJykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEV4aXQgVHJ5L0NhdGNoIGlmIG5vIGFjY291bnRzIHdoZXJlIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgaWYgKCRSZWdWYWx1ZXMuJ0NvdW50JyAtbGUgMCkgeyAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzQmFja3VwT0QgPSAkZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgVGhyb3cgKCdGYWlsZWQgdG8gZmluZCBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgYWNjb3VudHMuJykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICMgRm9yIGVhY2ggZm91bmQgT25lRHJpdmUgZm9yIEJ1c2luZXNzIGFjY291bnQKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkUmVnVmFsdWUgaW4gJFJlZ1ZhbHVlcykgeyAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6UGF0aERpck9ENEIgPSBbc3RyaW5nXSQoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkUmVnVmFsdWUuJ05hbWUnLlJlcGxhY2UoJ0hLRVlfVVNFUlNcJywnUmVnaXN0cnk6OkhLRVlfVVNFUlNcJykgLU5hbWUgJ1VzZXJGb2xkZXInKS4nVXNlckZvbGRlcicKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgRXhpdCBUcnkvQ2F0Y2ggaWYgZmFpbGVkIHRvIGJ1aWxkIHBhdGggZm9yIE9uZURyaXZlIGZvciBCdXNpbmVzcyBmb2xkZXIgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJExvY2FsOlBhdGhEaXJPRDRCIC1ub3RsaWtlICgnezB9XFVzZXJzXCpcT25lRHJpdmUgLSonIC1mICgkT1NEcml2ZSkpIC1hbmQgKC1ub3RbYm9vbF0kKFRlc3QtUGF0aCAtUGF0aCAkTG9jYWw6UGF0aERpck9ENEIpKSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNCYWNrdXBPRCA9ICRmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhyb3cgKCdGYWlsZWQgdG8gYnVpbGQgT25lRHJpdmUgcGF0aCAoInswfSIpLCBvciBpdCBkb2VzIG5vdCBleGlzdC4nIC1mICgkTG9jYWw6UGF0aCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBDcmVhdGUgc2NyaXB0IHZhcmlhYmxlcyBpZiB0aGV5IGRvIG5vdCBleGlzdCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtbm90KCRTY3JpcHQ6Q29tcHV0ZXJQcm9kdWN0TmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0ZS1FbnZWYXJpYWJsZXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgUnVudGltZSB2YXJpYWJsZQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6Qm9vbEZvbGRlckV4aXN0cyA9IFtib29sXSQoJGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAjIENyZWF0aW5nIHBhdGhzCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cFBhcmVudCA9IFtzdHJpbmddJCgnezB9XEJpdExvY2tlciBSZWNvdmVyeVwnIC1mICgkTG9jYWw6UGF0aERpck9ENEIpKQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXAgPSBbc3RyaW5nXSQoJ3swfXsxfSAoezJ9IHszfSlcJyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50LCRTY3JpcHQ6Q29tcHV0ZXJOYW1lLCRTY3JpcHQ6Q29tcHV0ZXJNYW51ZmFjdHVyZXIsJFNjcmlwdDpDb21wdXRlclByb2R1Y3ROYW1lKSkKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdPbmVEcml2ZSBmb3IgQnVzaW5lc3MgUGF0aDogezB9JyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCKSkKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdCYWNrdXAgUGF0aCBQYXJlbnQ6ICAgICAgICAgezB9JyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50KSkKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdCYWNrdXAgUGF0aCBmb3IgQml0bG9ja2VyIFJlY292ZXJ5IEtleShzKTogezB9JyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwKSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICNUZXN0aW5nIGlmIFJlY292ZXJ5IGZvbGRlciBleGlzdHMgaWYgbm90IGNyZWF0ZSBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdUZXN0aW5nIGlmIGJhY2t1cCBmb2xkZXIgZXhpc3RzLCBjcmVhdGUgaXQgaWYgbm90LicpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpCb29sRm9sZGVyRXhpc3RzID0gJHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICdDcmVhdGluZyBPbmVEcml2ZSBmb3IgQnVzaW5lc3MgZm9sZGVyIGZvciBiYWNrdXAuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG51bGwgPSBOZXctSXRlbSAtUGF0aCAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXAgLUl0ZW1UeXBlICdEaXJlY3RvcnknIC1Gb3JjZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpCb29sRm9sZGVyRXhpc3RzID0gVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCd7MH0nIC1mICQoaWYoJExvY2FsOkJvb2xGb2xkZXJFeGlzdHMpeydTdWNjZXNzLid9ZWxzZXsnRmFpbGVkLid9KSkKICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAjIEV4aXQgVHJ5L0NhdGNoIG9mIGZhaWxlZCB0byBjcmVhdGUgT25lRHJpdmUgZm9yIEJ1c2luZXNzIEJhY2t1cCBpZiBpdCBkaWRuJ3QgZXhpc3QKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC1ub3QoJExvY2FsOkJvb2xGb2xkZXJFeGlzdHMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzQmFja3VwT0QgPSAkZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRocm93ICdGYWlsZWQgdG8gY2hlY2sgb3IgY3JlYXRlIGZvbGRlci4nCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgTWFrZSBzdXJlICdCaXRMb2NrZXIgUmVjb3ZlcnknIGZvbGRlciBpcyBoaWRkZW4KICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdNYWtpbmcgc3VyZSAiezB9IiBpcyBoaWRkZW4uJyAtZiAoJExvY2FsOlBhdGhEaXJPRDRCQmFja3VwUGFyZW50KSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChHZXQtSXRlbSAtUGF0aCAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXBQYXJlbnQgLUZvcmNlKS5BdHRyaWJ1dGVzIC1ub3RsaWtlICcqaGlkZGVuKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChHZXQtSXRlbSAtUGF0aCAkTG9jYWw6UGF0aERpck9ENEJCYWNrdXBQYXJlbnQgLUZvcmNlKS5BdHRyaWJ1dGVzID0gKEdldC1JdGVtIC1QYXRoICRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cFBhcmVudCAtRm9yY2UpLkF0dHJpYnV0ZXMgLWJvciAnSGlkZGVuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzZnVsbHkgaGlkZGVuPyB7MH0uJyAtZiAoJD8pKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdBbHJlYWR5IGhpZGRlbi4nKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAjIEdldCBBcnJheVJlY292ZXJ5UGFzc3dvcmRzIGZvciBjdXJyZW50IHZvbHVtZQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6Q3VycmVudFZvbHVtZUFycmF5UmVjb3ZlcnlQYXNzd29yZHMgPSBHZXQtVmFyaWFibGUgLU5hbWUgKCd7MH1BcnJheVJlY292ZXJ5UGFzc3dvcmRzJyAtZiAoJE9TRHJpdmVMZXR0ZXIpKSAtU2NvcGUgJ1NjcmlwdCcgLVZhbHVlT25seSAtRXJyb3JBY3Rpb24gJ1N0b3AnCgogICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgQ3JlYXRlIHN0cmluZyBmb3IgQml0TG9ja2VyUmVjb3ZlcnlQYXNzd29yZC50eHQKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgPSBbc3RyaW5nXTo6RW1wdHkKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gKCdCaXRMb2NrZXIgUmVjb3ZlcnlQYXNzd29yZCBmb3IgT1MgRHJpdmUgKHswfSl7MX0nIC1mICgkZW52OlN5c3RlbURyaXZlLCJgcmBuIikpCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9IEdldC1TdHJpbmdSZWNvdmVyeVBhc3N3b3JkcwogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAiYHJgbmByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdCaXRMb2NrZXIgRHJpdmUgRW5jcnlwdGlvbiByZWNvdmVyeSBrZXl7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAnVG8gdmVyaWZ5IHRoYXQgdGhpcyBpcyB0aGUgY29ycmVjdCByZWNvdmVyeSBrZXksIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRoZSBmb2xsb3dpbmd7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAnaWRlbnRpZmllciB3aXRoIHRoZSBpZGVudGlmaWVyIHZhbHVlIGRpc3BsYXllZCBvbiB5b3VyIFBDLicKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gImByYG5gcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAoJ0lkZW50aWZpZXI6IHswfScgLWYgKCRMb2NhbDpDdXJyZW50Vm9sdW1lQXJyYXlSZWNvdmVyeVBhc3N3b3Jkc1swXS5LZXlQcm90ZWN0b3JJZCkpCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICJgcmBuYHJgbiIKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ0lmIHRoZSBhYm92ZSBpZGVudGlmaWVyIG1hdGNoZXMgdGhlIG9uZSBkaXNwbGF5ZWQgYnkgeW91ciBQQyx7MH0nIC1mICJgcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAndGhlbiB1c2UgdGhlIGZvbGxvd2luZyBrZXkgdG8gIHVubG9jayB5b3VyIGRyaXZlOicKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gImByYG5gcmBuIgogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAoJ1JlY292ZXJ5IEtleTogezB9JyAtZiAoJExvY2FsOkN1cnJlbnRWb2x1bWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLlJlY292ZXJ5UGFzc3dvcmQpKQogICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWw6U3RyUmVjUGFzcyArPSAiYHJgbmByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdJZiB0aGUgYWJvdmUgaWRlbnRpZmllciBkb2VzbmB0IG1hdGNoIHRoZSBvbmUgZGlzcGxheWVkIGJ5IHlvdXIgUEMsezB9JyAtZiAiYHJgbiIKICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsOlN0clJlY1Bhc3MgKz0gJ3RoZW4gdGhpcyBpc25gdCB0aGUgcmlnaHQga2V5IHRvIHVubG9jayB5b3VyIGRyaXZlLnswfScgLWYgImByYG4iCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdUcnkgYW5vdGhlciByZWNvdmVyeSBrZXksIG9yIHJlZmVyIHRvezB9JyAtZiAiYHJgbiIgCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpTdHJSZWNQYXNzICs9ICdodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9MjYwNTg5IGZvciBhZGRpdGlvbmFsIGFzc2lzdGFuY2UuJwoKCiAgICAgICAgICAgICAgICAgICAgICAgICMgT3V0LUZpbGUgdGhlIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAnQ3JlYXRpbmcgYmFja3VwIGluIE9uZURyaXZlIGZvciBCdXNpbmVzcy4nCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbDpPRDRCQmFja3VwRmlsZVBhdGggPSBbc3RyaW5nXSQoJ3swfUJpdGxvY2tlclJlY292ZXJ5UGFzc3dvcmQtezF9LnR4dCcgLWYgKCRMb2NhbDpQYXRoRGlyT0Q0QkJhY2t1cCwoR2V0LURhdGUgLUZvcm1hdCAneXlNTWRkaGhtbXNzJykpKQogICAgICAgICAgICAgICAgICAgICAgICBPdXQtRmlsZSAtRmlsZVBhdGggJExvY2FsOk9ENEJCYWNrdXBGaWxlUGF0aCAtRW5jb2RpbmcgJ3V0ZjgnIC1Gb3JjZSAtSW5wdXRPYmplY3QgKCRMb2NhbDpTdHJSZWNQYXNzKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRMb2NhbDpPRDRCQmFja3VwRmlsZVBhdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNCYWNrdXBPRCA9ICR0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAKCgogICAgICAgICAgICAgICAgICAgICAgICAjIE9uZURyaXZlIGZvciBCdXNpbmVzcyBCYWNrdXAgU3VjY2Vzcz8KICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdTdWNjZXNzPyB7MH0nIC1mICgkU2NyaXB0OklzQmFja3VwT0QpKQogICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgQ2F0Y2ggewogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRXJyb3Igd2hpbGUgYmFja3VwIHRvIE9uZURyaXZlLCBtYWtlIHN1cmUgdGhhdCB5b3UgYXJlIEFBRCBqb2luZWQgYW5kIGFyZSBydW5uaW5nIHRoZSBjbWRsZXQgYXMgYW4gYWRtaW4uJykKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0Vycm9yIG1lc3NhZ2U6JyArICJgcmBuIiArICgkXykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBGaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0RpZCBiYWNrdXAgdG8gT25lRHJpdmUgc3VjY2VlZD8gezB9JyAtZiAoJFNjcmlwdDpJc0JhY2t1cE9EKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIEJhY2t1cCBPbmVEcml2ZSBmb3IgQnVzaW5lc3MKICAgIAoKCiAgICAgICAgIyMjIyMjIyMjIyMjIyMjIyMKICAgICAgICAjIEF6dXJlIEFEIEJhY2t1cAogICAgICAgICMjIyMjIyMjIyMjIyMjIyMjCiAgICAgICAgI3JlZ2lvbiBCYWNrdXAgQXp1cmUgQUFECgogICAgICAgIExvZ1dyaXRlICgnIyBCYWNrdXAgdG8gQXp1cmUgQUQnKQogICAgICAgIGlmICgkU2NyaXB0OklzQmFja3VwQUFEKSB7CiAgICAgICAgICAgIExvZ1dyaXRlICgnQWxyZWFkeSBkb25lJykKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRTY3JpcHQ6Qm9vbERpZEFueXRoaW5nQ2hhbmdlVGhpc1J1bnRpbWUgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBUcnkgewogICAgICAgICAgICAgICAgIyBHZXQgQXJyYXlSZWNvdmVyeVBhc3N3b3JkcyBmb3IgY3VycmVudCB2b2x1bWUKICAgICAgICAgICAgICAgICRMb2NhbDpDdXJyZW50Vm9sdW1lQXJyYXlSZWNvdmVyeVBhc3N3b3JkcyA9IEdldC1WYXJpYWJsZSAtTmFtZSAoJ3swfUFycmF5UmVjb3ZlcnlQYXNzd29yZHMnIC1mICgkT1NEcml2ZUxldHRlcikpIC1TY29wZSAnU2NyaXB0JyAtVmFsdWVPbmx5IC1FcnJvckFjdGlvbiAnU3RvcCcKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyBDaGVjayBpZiB3ZSBjYW4gdXNlIEJhY2t1cFRvQUFELUJpdExvY2tlcktleVByb3RlY3RvciBjb21tYW5kbGV0ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgTG9nV3JpdGUgJ0NoZWNraW5nIGlmIHdlIGNhbiB1c2UgIkJhY2t1cFRvQUFELUJpdExvY2tlcktleVByb3RlY3RvciIgY29tbWFuZGxldC4nCgogICAgICAgICAgICAgICAgaWYgKEdldC1Db21tYW5kIC1OYW1lICdCYWNrdXBUb0FBRC1CaXRMb2NrZXJLZXlQcm90ZWN0b3InIC1FcnJvckFjdGlvbiAnU2lsZW50bHlDb250aW51ZScpIHsgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnQ29tbWFuZGxldCBleGlzdHMhJyAtZiAoJExvY2FsOkNtZE5hbWUpKSAKICAgICAgICAgICAgICAgICAgICAkbnVsbCA9IEJhY2t1cFRvQUFELUJpdExvY2tlcktleVByb3RlY3RvciAtTW91bnRQb2ludCAkT1NEcml2ZUxldHRlciAtS2V5UHJvdGVjdG9ySWQgJExvY2FsOkN1cnJlbnRWb2x1bWVBcnJheVJlY292ZXJ5UGFzc3dvcmRzWzBdLidLZXlQcm90ZWN0b3JJZCcgLUVycm9yQWN0aW9uICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgICAgICAgICAgICAgIGlmICgkPykgewogICAgICAgICAgICAgICAgICAgICAgICAkU2NyaXB0OklzQmFja3VwQUFEID0gJHRydWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRudWxsID0gQmFja3VwVG9BQUQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIC1Nb3VudFBvaW50ICRPU0RyaXZlTGV0dGVyIC1LZXlQcm90ZWN0b3JJZCAkTG9jYWw6Q3VycmVudFZvbHVtZUFycmF5UmVjb3ZlcnlQYXNzd29yZHNbMF0uS2V5UHJvdGVjdG9ySWQgLUVycm9yQWN0aW9uICdTdG9wJwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNCYWNrdXBBQUQgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU3VjY2Vzcz8gezB9JyAtZiAoJFNjcmlwdDpJc0JhY2t1cEFBRCkpCiAgICAgICAgICAgICAgICB9IAogICAgICAgICAgICAgICAgZWxzZSB7IAogICAgICAgICAgICAgICAgICAgICMgQmFja3VwVG9BQUQtQml0TG9ja2VyS2V5UHJvdGVjdG9yIGNvbW1hbmRsZXQgbm90IGF2YWlsYWJsZSwgdXNpbmcgb3RoZXIgbWVjaGFuaXNtIAogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICdCYWNrdXBUb0FBRC1CaXRMb2NrZXJLZXlQcm90ZWN0b3IgY29tbWFuZGxldCBub3QgYXZhaWxhYmxlLCB1c2luZyBvdGhlciBtZWNoYW5pc20uJyAKICAgICAgICAgICAgICAgICAgICAjIEdldCB0aGUgQUFEIE1hY2hpbmUgQ2VydGlmaWNhdGUKICAgICAgICAgICAgICAgICAgICAkQ2VydGlmaWNhdGUgICAgICAgICAgID0gKCQoW2FycmF5XSQoR2V0LUNoaWxkSXRlbSAtUGF0aCAnQ2VydGlmaWNhdGU6OkxvY2FsTWFjaGluZVxNeScpKS5XaGVyZXskXy4nSXNzdWVyJyAtbWF0Y2ggJ0NOPU1TLU9yZ2FuaXphdGlvbi1BY2Nlc3MnfSkKICAgICAgICAgICAgICAgICAgICAkQ2VydGlmaWNhdGVUaHVtYnByaW50ID0gW3N0cmluZ10kKCRDZXJ0aWZpY2F0ZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdUaHVtYnByaW50JykKICAgICAgICAgICAgICAgICAgICAkQ2VydGlmaWNhdGVTdWJqZWN0ICAgID0gW3N0cmluZ10kKFtzdHJpbmddJCgkQ2VydGlmaWNhdGUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAnU3ViamVjdCcpLlJlcGxhY2UoJ0NOPScsJycpKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgR2V0IHRlbmFudCBkb21haW4gbmFtZSBmcm9tIHJlZ2lzdHJ5CiAgICAgICAgICAgICAgICAgICAgJFRlbmFudERvbWFpbiA9IFtzdHJpbmddJChbc3RyaW5nXSQoR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAoJ1JlZ2lzdHJ5OjpIS0VZX0xPQ0FMX01BQ0hJTkVcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcQ2xvdWREb21haW5Kb2luXEpvaW5JbmZvXHswfScgLWYgKCRDZXJ0aWZpY2F0ZVRodW1icHJpbnQpKSAtTmFtZSAnVXNlckVtYWlsJyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdVc2VyRW1haWwnKS5TcGxpdCgnQCcpWy0xXSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIE1ha2Ugc3VyZSB3ZSBoYXZlIHZhbGlkIHZhbHVlcwogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRWYXJpYWJsZSBpbiBbYXJyYXldJCgkQ2VydGlmaWNhdGVUaHVtYnByaW50LCRDZXJ0aWZpY2F0ZVN1YmplY3QsJFRlbmFudERvbWFpbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRWYXJpYWJsZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRocm93ICdGYWlsZWQgdG8gYmFja3VwIHRvIEFBRCB1c2luZyBhbHRlcm5hdGl2ZSBtZXRob2QgaW52b2x2aW5nIEludm9rZS1XZWJSZXF1ZXN0LicKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIyBMb2cKICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAkVGVuYW50RG9tYWluCiAgICAgICAgICAgICAgICAgICAgIyBHZW5lcmF0ZSB0aGUgYm9keSB0byBzZW5kIHRvIEFBRCBjb250YWluaW5nIHRoZSByZWNvdmVyeSBpbmZvcm1hdGlvbgogICAgICAgICAgICAgICAgICAgICMgR2V0IHRoZSBCaXRMb2NrZXIga2V5IGluZm9ybWF0aW9uIGZyb20gV01JCiAgICAgICAgICAgICAgICAgICAgW2FycmF5XSQoR2V0LUJpdExvY2tlclZvbHVtZSAtTW91bnRQb2ludCAkT1NEcml2ZUxldHRlciB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICdLZXlQcm90ZWN0b3InKS5XaGVyZXskXy4nS2V5UHJvdGVjdG9yVHlwZScgLWVxICdSZWNvdmVyeVBhc3N3b3JkJ30uRm9yRWFjaHsKICAgICAgICAgICAgICAgICAgICAgICAgJEtleSA9ICRfCiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgia2lkIDogJCgkS2V5LidLZXlQcm90ZWN0b3JJZCcpIGtleTogJCgkS2V5LidSZWNvdmVyeVBhc3N3b3JkJykiKQogICAgICAgICAgICAgICAgICAgICAgICAkQm9keSA9IFtzdHJpbmddJCgieyIia2V5IiI6IiIkKCRLZXkuJ1JlY292ZXJ5UGFzc3dvcmQnKSIiLCIia2lkIiI6IiIkKCRLZXkuJ0tleVByb3RlY3RvcklkJy5SZXBsYWNlKCd7JywnJykuUmVwbGFjZSgnfScsJycpKSIiLCIidm9sIiI6IiJPU1YiIn0iKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIENyZWF0ZSB0aGUgVVJMIHRvIHBvc3QgdGhlIGRhdGEgdG8gYmFzZWQgb24gdGhlIHRlbmFudCBhbmQgZGV2aWNlIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICRVcmkgPSBbc3RyaW5nXSQoJ2h0dHBzOi8vZW50ZXJwcmlzZXJlZ2lzdHJhdGlvbi53aW5kb3dzLm5ldC9tYW5hZ2UvezB9L2RldmljZS97MX0/YXBpLXZlcnNpb249MS4wJyAtZiAoJFRlbmFudERvbWFpbiwkQ2VydGlmaWNhdGVTdWJqZWN0KSkKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgIkNyZWF0aW5nIHVybC4uLiRVcmkiCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgUG9zdCB0aGUgZGF0YSB0byB0aGUgVVJMIGFuZCBzaWduIGl0IHdpdGggdGhlIEFBRCBNYWNoaW5lIENlcnRpZmljYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICRSZXF1ZXN0ID0gSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkVXJpIC1Cb2R5ICRCb2R5IC1Vc2VCYXNpY1BhcnNpbmcgLU1ldGhvZCAnUG9zdCcgLVVzZURlZmF1bHRDcmVkZW50aWFscyAtQ2VydGlmaWNhdGUgJENlcnRpZmljYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICRSZXF1ZXN0LidSYXdDb250ZW50JwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJD8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTY3JpcHQ6SXNCYWNrdXBBQUQgPSAkdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB9ICAgIAogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1Bvc3QgdGhlIGRhdGEgdG8gdGhlIFVSTCBhbmQgc2lnbiBpdCB3aXRoIHRoZSBBQUQgTWFjaGluZSBDZXJ0aWZpY2F0ZS4gU3VjY2Vzcz8gezB9JyAtZiAoJFNjcmlwdDpJc0JhY2t1cEFBRCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgfQogICAgICAgICAgICBDYXRjaCB7CiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0Vycm9yIHdoaWxlIGJhY2t1cCB0byBBenVyZSBBRCwgbWFrZSBzdXJlIHRoYXQgeW91IGFyZSBBQUQgam9pbmVkIGFuZCBhcmUgcnVubmluZyB0aGUgY21kbGV0IGFzIGFuIGFkbWluLicpCiAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ0Vycm9yIG1lc3NhZ2U6JyArICJgcmBuIiArICgkXykpCiAgICAgICAgICAgICAgICAkSXNCYWNrdXBBQUQgPSAkZmFsc2UKICAgICAgICAgICAgfQogICAgICAgICAgICBGaW5hbGx5IHsKICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnRGlkIGJhY2t1cCB0byBBenVyZSBBRCBTdWNjZWVkPyB7MH0nIC1mICgkU2NyaXB0OklzQmFja3VwQUFEKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAjZW5kcmVnaW9uIEJhY2t1cCBBenVyZSBBQUQKICAgICAgICAKICAgICAgICAKICAgICAgICAjIElmIG5vIGJhY2t1cCBhbmQgbm8gUmVjb3ZlcnkgUGFzc3dvcmRzIHByZXNlbnQKICAgICAgICAKICAgIH0KICAgIGVsc2UgewogICAgICAgIExvZ1dyaXRlICdPUyBEcml2ZSBpcyBub3QgZW5jcnlwdGVkLCB0aGVyZSBhcmUgbm8gUmVjb3ZlcnkgUGFzc3dvcmRzLCBhbmQgdGhlcmUgYXJlIG5vIGJhY2t1cHMuJwogICAgfQp9CiNlbmRyZWdpb24gQmFja3VwCiNlbmRyZWdpb24gTWFpbgoKCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIyBFTkQgUkVTVUxUUyAjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMKI3JlZ2lvbiBFbmQgUmVzdWx0cyAKTG9nV3JpdGUgKCcjIyMgRW5kIHJlc3VsdHMnKQojIENsZWFuaW5nIHVwIGlmIHN1Y2Nlc3MKaWYgKCRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUpIHsKICAgIExvZ1dyaXRlICdGaW5pc2hlZCBmaXJzdCB0aW1lID0gVHJ1ZSB8IEp1c3QgY2hlY2tlZCB3ZWF0aGVyIEJpdExvY2tlciBSZWNvdmVyeSBQYXNzd29yZCBoYWQgY2hhbmdlZC4nCn0KCmVsc2UgewogICAgaWYgKCRTY3JpcHQ6SXNFbmNyeXB0ZWQgLWFuZCAkU2NyaXB0OklzUHJvdGVjdGlvblBhc3N3IC1hbmQgJFNjcmlwdDpJc0JhY2t1cEFBRCAtYW5kCiAgICAgICAgKFtib29sXSQoJFNjcmlwdDpCb29sQmFja3VwVG9PbmVEcml2ZUZvckJ1c2luZXNzIC1hbmQgJFNjcmlwdDpJc0JhY2t1cE9EKSAtb3IgW2Jvb2xdJCgtbm90KCRTY3JpcHQ6Qm9vbEJhY2t1cFRvT25lRHJpdmVGb3JCdXNpbmVzcykpKQogICAgKSB7CiAgICAgICAgJEJMViA9IEdldC1CaXRMb2NrZXJWb2x1bWUgLU1vdW50UG9pbnQgJGVudjpTeXN0ZW1Ecml2ZQogICAgICAgIGlmICgoJEJMVi4nVm9sdW1lU3RhdHVzJyAtZXEgJFNjcmlwdDpCaXRMb2NrZXJWb2x1bWVFbmNyeXB0aW9uU3RhdHVzZXNbMl0pIC1hbmQgKEAoJEJMVi4nS2V5UHJvdGVjdG9yJyB8IFdoZXJlLU9iamVjdCAtUHJvcGVydHkgJ0tleVByb3RlY3RvclR5cGUnIC1lcSAnUmVjb3ZlcnlQYXNzd29yZCcpLidDb3VudCcgLWVxIDEpKSB7CiAgICAgICAgCiAgICAgICAgICAgICMgRmlyc3Qgc3VjY2Vzc2Z1bGwgcnVuCiAgICAgICAgICAgICRTY3JpcHQ6SXNGaW5pc2hlZDFzdFRpbWUgPSAkdHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTY2hlZHVsZWRUYXNrCiAgICAgICAgICAgIEVkaXQtU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJFNjcmlwdDpTY2hlZHVsZWRUYXNrTmFtZQoKICAgICAgICAgICAgIyBGaWxlcwogICAgICAgICAgICAjcmVnaW9uIFJlbW92ZSBmaWxlcwogICAgICAgICAgICBpZiAoJFNjcmlwdDpCb29sUmVtb3ZlRmlsZXNBZnRlclN1Y2Nlc3MgLWFuZCAkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKSB7ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkbnVsbCA9IFN0YXJ0LUpvYiAtQXJndW1lbnRMaXN0ICRTY3JpcHQ6RmlsZUxvZyAtU2NyaXB0QmxvY2sgewogICAgICAgICAgICAgICAgICAgIFBhcmFtKFtzdHJpbmddICRGaWxlTG9nKQogICAgICAgIAogICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uIExvZ1dyaXRlIHsKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW0gKFtzdHJpbmddJExvZ1N0cmluZykKICAgICAgICAgICAgICAgICAgICAgICAgJGEgPSBbc3RyaW5nXSQoR2V0LURhdGUpCiAgICAgICAgICAgICAgICAgICAgICAgICRMb2dTdHJpbmcgPSBbc3RyaW5nXSQoJGEsICRMb2dTdHJpbmcpCiAgICAgICAgICAgICAgICAgICAgICAgIEFkZC1jb250ZW50IC1QYXRoICRGaWxlTG9nIC1WYWx1ZSAkTG9nU3RyaW5nCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRMb2NhbDpSZW1EaXJQYXRoID0gW3N0cmluZ10kKCR7ZW52OlByb2dyYW1GaWxlcyh4ODYpfSArICdcQml0TG9ja2VyVHJpZ2dlclwnKQogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgNQogICAgICAgICAgICAgICAgICAgIExvZ1dyaXRlICgnU3RhcnRlZCB0aGUgam9iIHRvIHJlbW92ZSAiezB9IicgLWYgKCRMb2NhbDpSZW1EaXJQYXRoKSkKICAgICAgICAgICAgICAgICAgICBpZiAoVGVzdC1QYXRoICRMb2NhbDpSZW1EaXJQYXRoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZS1JdGVtIC1QYXRoICRMb2NhbDpSZW1EaXJQYXRoIC1SZWN1cnNlIC1Gb3JjZQogICAgICAgICAgICAgICAgICAgICAgICBMb2dXcml0ZSAoJ1JlbW92aW5nIHRoZSBmb2xkZXIgKHJlY3Vyc2UsIGZvcmNlKS4gU3VjY2Vzcz8gezB9JyAtZiAoJD8pKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgTG9nV3JpdGUgKCdGb2xkZXIgZG9lcyBub3QgZXhpc3QnKQogICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgI2VuZHJlZ2lvbiBSZW1vdmUgRmlsZXMKICAgICAgICB9ICAgIAogICAgfQogICAgZWxzZSB7CiAgICAgICAgTG9nV3JpdGUgJ1RoZXJlIGFyZSBzdGlsbCB0aGluZ3MgdG8gZG8uIFRyeWluZyBhZ2FpbiBsYXRlci4nCiAgICB9Cn0KI2VuZHJlZ2lvbiBFbmQgUmVzdWx0cwoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIFMgVCBBIFQgUyAjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIwpMb2dXcml0ZSAoJyMjIyBTVEFUUycpCiRTY3JpcHQ6Q291bnRSdW5zICs9IDEKCmlmICgtbm90KCRTY3JpcHQ6Qm9vbFJlbW92ZUZpbGVzQWZ0ZXJTdWNjZXNzKSkgewogICAgaWYgKC1ub3QoVGVzdC1QYXRoICRTY3JpcHQ6RGlySW5zdGFsbCkpIHsKICAgICAgICAkbnVsbCA9IE5ldy1JdGVtIC1QYXRoICRTY3JpcHQ6RGlySW5zdGFsbCAtSXRlbVR5cGUgJ0RpcmVjdG9yeScgLUZvcmNlCiAgICB9CiAgICAKICAgICMgRmV0Y2ggT1MgZHJpdmUgZW5jcnlwdGlvbiBrZXkgYW5kIHBhc3N3b3JkCiAgICAkU2NyaXB0Ok9TRHJpdmVLZXlJRCA9IFtzdHJpbmddJCgkU2NyaXB0OkNBcnJheVJlY292ZXJ5UGFzc3dvcmRzIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMSAtRXhwYW5kUHJvcGVydHkgJ0tleVByb3RlY3RvcklkJykKICAgICRTY3JpcHQ6T1NEcml2ZVByb3RlY3Rpb25QYXNzd29yZCA9IFtzdHJpbmddJCgkU2NyaXB0OkNBcnJheVJlY292ZXJ5UGFzc3dvcmRzIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMSAtRXhwYW5kUHJvcGVydHkgJ1JlY292ZXJ5UGFzc3dvcmQnKQoKICAgICMgQ3JlYXRlIG91dHB1dCBzdHJpbmcKICAgICRPdXRTdHJpbmcgPSBbc3RyaW5nXSQoKCRTY3JpcHQ6Q291bnRSdW5zKS5Ub1N0cmluZygpICsgImByYG4iKSAgICAgICAgICAgICMgMCAgIExpbmUgMQogICAgJE91dFN0cmluZyArPSAoKFtieXRlXSAkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKS5Ub1N0cmluZygpICsgImByYG4iKSAgICAgIyAxICAgTGluZSAyCiAgICAkT3V0U3RyaW5nICs9ICgoW2J5dGVdICRTY3JpcHQ6SXNFbmNyeXB0ZWQpLlRvU3RyaW5nKCkgKyAiYHJgbiIpICAgICAgICAgICAjIDIgICBMaW5lIDMKICAgICRPdXRTdHJpbmcgKz0gKChbYnl0ZV0gJFNjcmlwdDpJc1Byb3RlY3Rpb25QYXNzdykuVG9TdHJpbmcoKSArICJgcmBuIikgICAgICMgMyAgIExpbmUgNAogICAgJE91dFN0cmluZyArPSAoKFtieXRlXSAkU2NyaXB0OklzQmFja3VwT0QpLlRvU3RyaW5nKCkgKyAiYHJgbiIpICAgICAgICAgICAgIyA0ICAgTGluZSA1CiAgICAkT3V0U3RyaW5nICs9ICgoW2J5dGVdICRTY3JpcHQ6SXNCYWNrdXBBQUQpLlRvU3RyaW5nKCkgKyAiYHJgbiIpICAgICAgICAgICAjIDUgICBMaW5lIDYKICAgICRPdXRTdHJpbmcgKz0gKChbc3RyaW5nXSAkU2NyaXB0Ok9TRHJpdmVLZXlJRCkgKyAiYHJgbiIpICAgICAgICAgICAgICAgICAgICMgNiAgIExpbmUgNwogICAgJE91dFN0cmluZyArPSAoKFtzdHJpbmddICRTY3JpcHQ6T1NEcml2ZVByb3RlY3Rpb25QYXNzd29yZCkpICAgICAgICAgICAgICAgIyA3ICAgTGluZSA4CiAgIAogICAgIyBPdXRwdXQgdGhlIHN0YXRzIGZpbGUKICAgICRudWxsID0gT3V0LUZpbGUgLUZpbGVQYXRoICRTY3JpcHQ6RmlsZVN0YXRzIC1FbmNvZGluZyAndXRmOCcgLUZvcmNlIC1JbnB1dE9iamVjdCAoJE91dFN0cmluZykKfQpMb2dXcml0ZSAoJ1J1bnMgc28gZmFyOiB7MH0nIC1mICgkU2NyaXB0OkNvdW50UnVucykpCgppZiAoJFNjcmlwdDpCb29sRGlkQW55dGhpbmdDaGFuZ2VUaGlzUnVudGltZSkgewogICAgV3JpdGUtU3RhdHMgCn0KCgoKIyMjIEdpdmUgdXAgYWZ0ZXIgWCBydW5zIGFuZCBJc0ZpbmlzaGVkMXN0VGltZSAtZXEgJGZhbHNlCmlmICgkU2NyaXB0OkNvdW50UnVucyAtZXEgMzAgLWFuZCAoLW5vdCgkU2NyaXB0OklzRmluaXNoZWQxc3RUaW1lKSkpIHsKICAgIExvZ1dyaXRlICgnU2hvdWxkIGhhdmUgYmVlbiBkb25lIGJ5IG5vdy4nKQogICAgRWRpdC1TY2hlZHVsZWRUYXNrIC1UYXNrTmFtZSAkU2NyaXB0OlNjaGVkdWxlZFRhc2tOYW1lICAgIAp9CgoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjICBEIE8gTiBFICAjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIwpMb2dXcml0ZSAoJ0FsbCBkb25lLCBleGl0aW5nIHNjcmlwdC4uLicpCiNlbmRyZWdpb24gTWFpbgo=')
        #endregion FilePS1
    #endregion Files

    # Script specific variables
    $Script:NameApp            = [string]$($NameScriptNoun)
    $Script:NameScheduledTask  = [string]$($NameScriptNoun)
    $Script:PathDirInstall     = [string]$('{0}\IronstoneIT\{1}' -f ($env:ProgramW6432,$Script:NameApp))
    $Script:PathFileInstall    = [string]$('{0}\{1}' -f ($Script:PathDirInstall,$Script:NameFilePS1))
#endregion Variables




#region Main
    Write-Output -InputObject ('### {0}' -f ($NameScript))



    ###########################################################
    ### 1. Clean up BitLockerTrigger and IronTrigger
    Write-Output -InputObject ('{0}# 1. Clean up previous install paths.' -f ("`r`n`r`n"))
    
    # Paths
    Write-Verbose -Message ('Remove previous install path(s) if present')
    # Get Directory Paths
    $Local:RemPaths = [string[]]@(
        # Install Directory used in this script
        ($Script:PathDirInstall),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x64
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f ($env:ProgramW6432)) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName'),
        # Install Dirs matching "*Trigger*" or "*BitLocker*" is ProgramFiles x86
        @(Get-ChildItem -Path ('{0}\IronstoneIT\' -f (${env:ProgramFiles(x86)})) -Directory -ErrorAction 'SilentlyContinue' | Where-Object {$_.Name -like '*trigger*' -or $_.Name -like '*BitLocker*'} | Select-Object -ExpandProperty 'FullName')
    )
    # Remove Directory Paths
    foreach ($Path in $Local:RemPaths) {
        if (-not([string]::IsNullOrEmpty($Path.Trim()))) {
            Write-Verbose -Message ('   Removing "{0}" if it exists.' -f ($Path))
            if (Test-Path -Path $Path) {
                $null = Remove-Item -Path $Path -Force -Recurse
                Write-Verbose -Message ('      Directory does exist. Removing. Success? {0}' -f ($?))
            }
            else {
                Write-Verbose -Message ('      Directory does not exist')
            }
        }
    }
    
    # Stats and Logs
    Write-Verbose -Message ('Remove previous files: Stats and Logs')
    @(Get-ChildItem -Path ('{0}\Temp' -f ($env:windir)) -File -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {$_.'Name' -like '*trigger*'} | Select-Object -ExpandProperty 'FullName') | ForEach-Object {
        Remove-Item -Path $_ -Force
        Write-Verbose -Message ('Removing "{0}". Success? {1}.' -f ($_,$?.ToString()))
    }
    Get-ChildItem -Path $PathDirLog -Name '*EnableBitLocker.log' -File -Force -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'PSChildName' | ForEach-Object {Remove-Item -Path ('{0}{1}' -f ($PathDirLog,$_)) -Force}

    # Scheduled tasks
    Write-Verbose -Message ('Remove previous ScheduledTask(s)')
    $Local:ScheduledTasks = Get-ScheduledTask | Where-Object {
        # Exact Name
        @($Script:NameScheduledTask,'IronTrigger','Enable_BitLocker').Contains($_.'TaskName') -or `
        # Regex
        $_.'TaskName' -like '*BitLocker' -or $_.'TaskName' -like '*IronTrigger*'
    }
    
    if ($Local:ScheduledTasks.'Length' -gt 0) {
        $Local:ScheduledTasks | ForEach-Object {             
            $null = Unregister-ScheduledTask -TaskName $_.'TaskName' -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($_.'TaskName',$?))
        }
    }
    else {
        if (Get-ScheduledTask -TaskName $Script:NameScheduledTask -ErrorAction 'SilentlyContinue') {            
            $null = Unregister-ScheduledTask -TaskName $Script:NameScheduledTask -Confirm:$false -ErrorAction 'SilentlyContinue'
            Write-Verbose -Message ('  Removing the Scheduled task "{0}". Success? {1}' -f ($Script:NameScheduledTask,$?))
        }
        else {
            Write-Verbose -Message ('  Scheduled task "{0}" does not exist.' -f ($Script:ScheduledTaskName))
        }
    }




    ###########################################################
    ### 2. Install Files
    Write-Output -InputObject ('{0}# 2. Install files.' -f ("`r`n`r`n"))
    # Create path if not exist
    if (-not([System.IO.Directory]::Exists($Script:PathDirInstall))){$null=[System.IO.Directory]::CreateDirectory($Script:PathDirInstall)}
    # Output file
    $null = Out-File -FilePath $Script:PathFileInstall -Encoding 'Utf8' -InputObject ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($Script:ContentFilePS1))) -Force:$true -ErrorAction 'Stop'
    # Verbose
    Write-Verbose -Message ('   Success? {0}' -f ($?))



    
    ###########################################################
    ### 3. Surpress BitLocker Toast Notifications
    Write-Output -InputObject ('{0}# 3. Surpress BitLocker Toast Notifications.' -f ("`r`n`r`n"))

    # Create registry base path to HKCU:\ from System context
    $RegDirBase = [string]$('Registry::HKEY_USERS\{0}\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings' -f ($Script:StrIntuneUserSID))
    
    # Registry paths to disable BitLocker Toast Notifications
    $RegDirs    = [string[]]@(
        [string]('{0}\Windows.SystemToast.BitLockerPolicyRefresh' -f ($RegDirBase)),
        [string]('{0}\Windows.SystemToast.BdeUnlock' -f ($RegDirBase))
    )

    # Set registry values
    foreach ($RegDir in $RegDirs) {
        if (-not(Test-Path -Path $RegDir)) {$null = New-Item -Path $RegDir -ItemType 'Directory' -Force}
        $null = Set-ItemProperty -Path $RegDir -Name 'Enabled' -Value 0 -Type 'DWord' -Force
        if (-not($?)) {
            Throw 'ERROR: Failed to set registry values to surpress BotLocker Toast Notifications.'
        }
        else {
            Write-Verbose -Message ('   Success.')
        }
    }




    ###########################################################
    ### 4. Create ScheduledTask and run it if success
    Write-Output -InputObject ('{0}# 4. Create Scheduled Task "{1}", run it if success.' -f ("`r`n`r`n",$Script:NameScheduledTask))
    # Get path of PowerShell.exe and the .PS1 file
    $PathFilePowerShell = [string] '%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe' # Works regardless of 64bit vs 32bit
    $PathFilePS1        = [string] ('{0}\{1}' -f ($Script:PathDirInstall,$Script:NameFilePS1))
    # Create Scheduled Task
    #region    Create Scheduled Task running PS1 using PowerShell.exe - Every 15 Minutes
        # Construct Scheduled Task
        $ScheduledTask = New-ScheduledTask                                                    `
            -Action    (New-ScheduledTaskAction -Execute ('"{0}"' -f ($PathFilePowerShell)) -Argument ('-ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File "{0}"' -f ($PathFilePS1))) `
            -Principal (New-ScheduledTaskPrincipal -UserId 'NT AUTHORITY\SYSTEM' -RunLevel 'Highest')                                                                                                                   `
            -Trigger   (New-ScheduledTaskTrigger -Once -At ([datetime]::Today) -RepetitionInterval ([timespan]::FromMinutes(15)))                                                                                       `
            -Settings  (New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -ExecutionTimeLimit ([timespan]::FromMinutes(10)) -Compatibility 4 -StartWhenAvailable)
        $ScheduledTask.'Author'      = 'Ironstone'
        $ScheduledTask.'Description' = ('{0}Runs a PowerShell script. {1}Execute: "{2}". {1}Arguments: "{3}".' -f (
            $(if([string]::IsNullOrEmpty($DescriptionScheduledTask)){''}else{('{0} {1}' -f ($DescriptionScheduledTask,"`r`n"))}),"`r`n",
            [string]($ScheduledTask | Select-Object -ExpandProperty 'Actions' | Select-Object -ExpandProperty 'Execute'),
            [string]($ScheduledTask | Select-Object -ExpandProperty 'Actions' | Select-Object -ExpandProperty 'Arguments')
        ))

        # Register Scheduled Task
        $null = Register-ScheduledTask -TaskName $NameScheduledTask -InputObject $ScheduledTask -Force -Verbose:$false -Debug:$false
                
        # Check if success registering Scheduled Task
        $SuccessCreatingScheduledTask = [bool]$($? -and [bool]$([byte](@(Get-ScheduledTask -TaskName $NameScheduledTask).'Count') -eq 1))
        Write-Verbose -Message ('Success creating scheduled task "{0}"? "{1}".' -f ($NameScheduledTask,$SuccessCreatingScheduledTask.ToString()))
                
        # Run Scheduled Task if Success Creating It
        if ($SuccessCreatingScheduledTask) {$null = Start-ScheduledTask -TaskName $NameScheduledTask}
        else {Throw 'ERROR: Failed to create scheduled task.'}
    #endregion Create Scheduled Task running PS1 using PowerShell.exe - Every 15 Minutes




    ###########################################################
    ### Done
    Write-Output -InputObject ('{0}Done.' -f ("`r`n`r`n"))    
#endregion Main



################################################
#endregion Your Code Here
################################################   
#region    Don't touch this
}
Catch {
    # Set ScriptSuccess to false
    $null = Set-Variable -Option 'ReadOnly' -Scope 'Script' -Force -Name 'ScriptSuccess' -Value ([bool]$($false))
    # Construct error message
    ## Generic content
    $ErrorMessage = [string]$('{0}Catched error:' -f ([System.Environment]::NewLine))    
    ## Last exit code if any
    if (-not[string]::IsNullOrEmpty($LASTEXITCODE)) {
        $ErrorMessage += ('{0}# Last exit code ($LASTEXITCODE):{0}{1}' -f ([System.Environment]::NewLine,$LASTEXITCODE))
    }
    ## Dynamically add info to the error message
    foreach ($ParentProperty in [string[]]$($_.GetType().GetProperties().'Name')) {
        if ($_.$ParentProperty) {
            $ErrorMessage += ('{0}# {1}:' -f ([System.Environment]::NewLine,$ParentProperty))
            foreach ($ChildProperty in [string[]]$($_.$ParentProperty.GetType().GetProperties().'Name')) {
                ### Build ErrorValue
                $ErrorValue = [string]::Empty
                if ($_.$ParentProperty.$ChildProperty -is [System.Collections.IDictionary]) {
                    foreach ($Name in [string[]]$($_.$ParentProperty.$ChildProperty.GetEnumerator().'Name')) {
                        if (-not[string]::IsNullOrEmpty([string]$($_.$ParentProperty.$ChildProperty.$Name))) {
                            $ErrorValue += ('{0} = {1}{2}' -f ($Name,[string]$($_.$ParentProperty.$ChildProperty.$Name),[System.Environment]::NewLine))
                        }
                    }
                }
                else {
                    $ErrorValue = [string]$($_.$ParentProperty.$ChildProperty)
                }
                if (-not[string]::IsNullOrEmpty($ErrorValue)) {
                    $ErrorMessage += ('{0}## {1}\{2}:{0}{3}' -f ([System.Environment]::NewLine,$ParentProperty,$ChildProperty,$ErrorValue.Trim()))
                }
            }
        }
    }
    # Write Error Message
    Write-Error -Message $ErrorMessage -ErrorAction 'Continue'
}
Finally {
    # Unload Users' Registry Profiles (NTUSER.DAT) if any were loaded
    if ($Script:BoolIsSystem -and $BoolWriteToHKCUFromSystem -and ([string[]]@($RegistryLoadedProfiles | Where-Object -FilterScript {-not([string]::IsNullOrEmpty($_))})).'Count' -gt 0) {
        # Close Regedit.exe if running, can't unload hives otherwise
        $null = Get-Process -Name 'regedit' -ErrorAction 'SilentlyContinue' | ForEach-Object -Process {Stop-Process -InputObject $_ -ErrorAction 'SilentlyContinue'}

        # Get all logged in users
        $SIDsLoggedInUsers = [string[]]$(([string[]]@(Get-Process -Name 'explorer' -IncludeUserName -ErrorAction 'SilentlyContinue' | Select-Object -ExpandProperty 'UserName' -Unique | ForEach-Object -Process {Try{[System.Security.Principal.NTAccount]::new(($_)).Translate([System.Security.Principal.SecurityIdentifier]).'Value'}Catch{}} | Where-Object -FilterScript {-not([string]::IsNullOrEmpty($_))}),[string]$([System.Security.Principal.WindowsIdentity]::GetCurrent().'User'.'Value')) | Select-Object -Unique)

        foreach ($SID in $RegistryLoadedProfiles) {
            # If SID is found in $SIDsLoggedInUsers - Don't Unload Hive
            if ([bool]$(([string[]]@($SIDsLoggedInUsers | ForEach-Object -Process {$_.Trim().ToUpper()})).Contains($SID.Trim().ToUpper()))) {
                Write-Output -InputObject ('User with SID "{0}" is currently logged in, will not unload registry hive.' -f ($SID))
            }
            # If SID is not found in $SIDsLoggedInUsers - Unload Hive
            else {
                $PathUserHive = [string]('HKEY_USERS\{0}' -f ($SID))
                $null = Start-Process -FilePath ('{0}\reg.exe' -f ([string]$([system.environment]::SystemDirectory))) -ArgumentList ('UNLOAD "{0}"' -f ($PathUserHive)) -WindowStyle 'Hidden' -Wait

                # Check success
                if (Test-Path -Path ('Registry::{0}' -f ($PathUserHive)) -ErrorAction 'SilentlyContinue') {
                    Write-Output -InputObject ('ERROR: Failed to unload user registry hive "{0}".' -f ($PathUserHive)) -ErrorAction 'Continue'
                }
                else {
                    Write-Output -InputObject ('Successfully unloaded user registry hive "{0}".' -f ($PathUserHive))
                }
            }
        }
    }
    
    # Stop Transcript
    Stop-Transcript
}
# Exit script
if ($ScriptSuccess) {
    Exit 0
}
else {
    Exit 1
}
#endregion Don't touch this